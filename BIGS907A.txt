'I. BUILDING A USER-DEFINED SET OF GAME RULES

'The BIGS907 software application enables the user to load into
'program memory a set of databases of player-finish probabilities
'saved to a set of data files by the BIGS903 software
'application. The BIGS907 software application enables the user
'to load into program memory a set of databases of dealer-finish
'probabilities saved to a set of data files by the BIGS906
'software application. The BIGS907 software application enables
'the user to load into program memory data about a user-defined
'subset of game rules saved to a data file by the BIGS903
'software application. The BIGS907 software application enables
'the user to input the remainder of a user-defined set of game
'rules consisting of all of the remaining game rules required to
'play any of a subset of optional embodiments of the game of the
'present invention.

'Each optional embodiment in the subset of optional embodiments
'is subject to a user-defined set of game rules that includes the
'following three rules. The dealer forms the player's initial
'hand by dealing two cards to the player's position. The dealer
'forms the dealer's initial hand by dealing two cards to the
'dealer's position. The dealer reveals to the player the point
'values assigned to the two cards in the dealer's initial hand
'before the dealer does consult with the player for a decision on
'how to play the player's hand. Hereafter,  any optional
'embodiment that is subject to the above-described set of three
'rules shall be referred to as a double-exposure game.

'If the user wants the BIGS907 software application to be able to
'perform it's functions properly, then the subset of game rules
'used by the BIGS906 software application to build the databases
'of dealer-finish probabilities that are loaded by the user into
'the program memory of the BIGS907 software application must
'match the subset of game rules used by the BIGS903 software
'application to build the databases of player-finish
'probabilities that are loaded by the user into the program
'memory of the BIGS907 software application. For example, if the
'user wants the BIGS907 software application to be able to
'perform it's functions properly, and if the subset of game rules
'used by the BIGS906 software application to build the databases
'of dealer-finish probabilities loaded into program memory of the
'BIGS907 software application specify a standard deck
'composition, two decks, and any hand that includes a joker has a
'value of twenty-seven points, then the subset of game rules used
'by the BIGS903 software application to build the databases of
'player-finish probabilities loaded into program memory  of the
'BIGS907 software application must also specify a standard  deck
'composition, two decks, and any hand that includes a joker has a
'value of twenty-seven points.

'If the user wants the BIGS907 software application to be able to
'perform its' functions properly using a different subset of game
'rules, then it is necessary for the user to program the BIGS903
'software application to build another set of databases of
'player-finish probabilities using the different subset of game
'rules, and it is necessary for the user to program the BIGS906
'software application to build another set of databases of
'dealer-finish probabilities using the different subset of game
'rules. A vast number of unique subsets of game rules are
'possible. To the subset of game rules used to build the sets of
'databases, the user can further program the BIGS907 software
'application to add any one of a set of billions of possible
'combinations of game rules and thereby to create the user-
'defined set of game rules. The BIGS907 software application
'saves data about the user-defined set of game rules to a data
'file.

'Given the user-defined set of game rules, the BIGS907 software
'application does all of the following. The BIGS907 software
'application finds the set of combination-dependent-playing-
'strategy tables for an optional embodiment of the double-
'exposure game of the present invention that is subject to the
'user-defined set of game rules. The BIGS907 software application
'calculates the expected value of the game wager for an optional
'embodiment of the double-exposure game of the present invention
'that is subject to the user-defined set of game rules.

'A playing strategy is a strategy for the play of the player's
'hand. The BIGS collection of software applications supports
'eighty-four playing strategies. The eighty-four-supported-
'playing strategies consist of the eighty-one-supported
'strategies for the player's use of the hit option, and a set of
'three additional playing strategies consisting of double down,
'split, and surrender.

'A combination-dependent-playing strategy found for an optional
'embodiment of the double-exposure game of the present invention
'is the best playing strategy for the play of the player's hand
'given the user-defined set of game rules, and given the
'combination of card ranks assigned to the cards removed from the
'stack and dealt face up to form the first two cards of the
'player's hand and the two cards of the dealer's initial hand. A
'combination-dependent-playing-strategy table found for an
'optional embodiment of the double-exposure game of the present
'invention provides a combination-dependent-playing strategy for
'each of the combinations of card ranks that are possible for the
'four cards removed from the stack and dealt face up to form the
'first two cards of the player's hand and the two cards of the
'dealer's initial hand.

'If the user-defined set of game rules does not give the option
'to split to the player, then a set of combination-dependent-
'playing-strategy tables found for an optional embodiment of the
'double-exposure game of the present invention consists of one
'combination-dependent-playing-strategy table found for each of
'the combinations of card ranks that are possible for the four
'cards removed from the stack and dealt face up to form the set
'of hands consisting of the player's initial hand and the
'dealer's initial hand. If the user-defined set of game rules
'does give the option to split to the player, then the set of
'combination-dependent-playing-strategy tables consists of three
'tables. The first table is a combination-dependent-playing-
'strategy table found for each of the combinations of card ranks
'that are possible for the four cards removed from the stack and
'dealt face up to form the set of hands consisting of the
'player's initial hand and the dealer's initial hand. The second
'of the three tables is a combination-dependent-playing-strategy
'table found for each of the combinations of card ranks that are
'possible for the four cards removed from the stack and dealt
'face up to form the set of hands consisting of the player's
'post-split-initial hand and the dealer's initial hand wherein:
'The value of variable pc1 is equal to or greater than the value
'of variable pc2. The third of the three tables is a combination-
'dependent-playing-strategy table found for each of the
'combinations of card ranks that are possible for the four cards
'removed from the stack and dealt face up to form the set of
'hands consisting of the player's post-split-initial hand and the
'dealer's initial hand wherein: The value of variable pc1 is less
'than or equal to the value of variable pc2. Under most
'circumstances, the player refers to the set of combination-
'dependent-playing-strategy tables one time per each player's
'initial hand and one time per each player's post-split-initial
'hand.

'The values given to variables named pc1 and pc2 correspond to
'the ranks of the first two cards of a player's hand. The values
'given to variables named dc1 and dc2 correspond to the ranks of
'the first two cards of a dealer's hand. A value of zero
'corresponds to the rank of joker. A value of one corresponds to
'a rank of ace. Values two through ten correspond to the ranks of
'two through ten respectively. A value of eleven corresponds to
'the rank of jack. A value of twelve corresponds to the rank of
'queen. A value of thirteen corresponds to the rank of king.

'The expected value of the game wager is the average portion of
'the game wager that the player can expect to gain or lose in the
'long term.  The expected value of the game wager is expressed as
'a percentage of the game wager. A negative percentage indicates
'a long term loss and a positive percentage indicates a long term
'gain. The house edge is equal to the product of the expected
'value of the game wager multiplied by negative one.

'The BIGS907 software application calculates the expected value
'of the game wager for the entire game given the user-defined set
'of game rules. The BIGS907 software application calculates the
'expected value of the game wager for each of the combinations of
'card ranks that are possible for the four cards removed from the
'stack and dealt face up to form the set of hands consisting of
'the player's initial hand and the dealer's initial hand. The
'BIGS907 software application calculates the probability of the
'occurrence of each of the combinations of card ranks that are
'possible for the four cards removed from the stack and dealt
'face up to form the set of hands consisting of the player's
'initial hand and the dealer's initial hand. The contribution
'made by any combination of card ranks to the expected value of
'the game wager for the entire game is equal to the product of
'the expected value of the game wager for that particular
'combination of card ranks multiplied by the probability of the
'occurrence of that particular combination of card ranks. The
'BIGS907 software application calculates the sum of the
'contributions made by all combinations of card ranks that are
'possible for the four cards removed from the stack and dealt
'face up to form the set of hands consisting of the player's
'initial hand and the dealer's initial hand. The expected value
'of the game wager for the entire game is equal to the sum of the
'contributions made by all combinations of card ranks that are
'possible for the four cards removed from the stack and dealt
'face up to form the set of hands consisting of the player's
'initial hand and the dealer's initial hand.

'II. SUGGESTED FILE NAMING PROTOCOL

'Go ahead and start the BIGS907 software application. The BIGS907
'software application dimensions a set of arrays. After the
'BIGS907 software application dimensions arrays, the BIGS907
'software application displays some introductory remarks. Go
'ahead and read those. After displaying some introductory
'remarks, the BIGS907 software application prompts the user to
'enter the 'folder/file name prefix' to be used to store
'application output. Here the BIGS907 software application is
'prompting the user to enter one of three parts of a file name.
'The three parts are a file name prefix, a file name suffix, and
'a file name extension.

'The file name prefix is a user-definable name. The file name
'prefix is common to each file of a set of files saved as
'application output.

'The file name suffix consists of a single letter. The BIGS907
'software application adds the file name suffix to the file name
'prefix. Each file name suffix is unique to one file of the set
'of files saved as application output. Accordingly, the
'combination of the file name prefix and the file name suffix
'enables users and other applications in the BIGS collection to
'identify the specific contents of each file of the set of files.

'The file name extension consists of a period followed by a set
'of three characters. The file name extension indicates the type
'of file. The two types of file that are handled by the BIGS907
'software application are text and data. If the type of file is a
'text file, then .txt is the file name extension. If the type of
'file is a data file, then .dat is the file name extension.

'There is a need for an intelligent way of naming files for later
'reference. The BIGS907 software application is capable of
'producing a set of files containing data about the expected
'value of the game wager and the set of combination-dependent-
'playing-strategy tables for an optional embodiment of the
'double-exposure game of the present invention that is subject to
'a user-defined sets of game rules. The user-defined set of game
'rules must specify the composition of each deck of cards, a
'target-numerical sum for the dealer's hard hands, a target-
'numerical sum for the dealer's soft hands, and the number of
'decks in the virtual stack.

'I suggest the user make a new folder to hold the many sets of
'files the BIGS907 software application produces and use these
'rules to make up a name for the new folder. For example, suppose
'the user intends to input into the BIGS907 software application
'a user-defined set of game rules for an optional embodiment of
'the double-exposure game of the present invention that calls for
'a target-numerical sum of twenty-three points for the dealer's
'hard hands and a target-numerical sum of twenty-three points for
'the dealer's soft hands. Suppose further that the user-defined
'set of game rules calls for there to be six decks in the virtual
'stack with each deck being composed of thirteen ranks of each of
'four French suits.  If so, then if the user has not already done
'so, I suggest the user create a new folder to hold the many sets
'of files the BIGS907 software application is capable of
'producing that have these rules in common and I suggest the user
'name the new folder '23h23s6d'.

'Suppose the user intends to input into the BIGS907 software
'application a user-defined set of game rules for an optional
'embodiment of the double-exposure game of the present invention
'that calls for a target-numerical sum of twenty-two points for
'the dealer's hard hands and a target-numerical sum of twenty-two
'points for the dealer's soft hands. Suppose further that the
'user-defined set of game rules calls for there to be eight decks
'in the virtual stack with each deck being composed of thirteen
'ranks of each of Four French suits plus two jokers. If so, then
'if the user has not already done so, I suggest the user create a
'new folder to hold the many sets of files the BIGS907 software
'application is capable of producing that have this subset of
'rules in common and I suggest the user name the folder
'J22h22s8d. Of course, there are many other possibilities besides
'the two examples given above.

'The BIGS907 software application requires a file name prefix for
'each set of files saved.  I suggest using 'game' as the file
'name prefix because these sets of files are associated with an
'optional-embodiment of the game of the present invention that is
'subject to a user-defined set of game rules. Furthermore, I
'suggest adding a number to indicate the chronological order of
'the placement of the set of files within a\ folder. For example,
'game1 as the file name prefix of the first set of files put
'within the folder, game2 as the file name prefix of the second
'set of files put in the folder and so on.

'For example, enter 23h23s6d/game1 as the folder/file name prefix
'for the first set of files put in the folder named 23h23s6d.
'Enter J22h22s8d/game1 as the folder/file name prefix of the
'first set of files put in the folder named J22h22s8d.

'III. LOADING DATABASES

'After the user enters the 'folder/file name prefix' to be used
'to store application output, the BIGS907 software application
'prompts the user to enter the folder/file name prefix of the
'files containing the databases of player-finish probabilities to
'be loaded into program memory. If the user followed my
'suggestion for naming the folder that holds files containing the
'databases of player-finish probabilities, then the user would
'enter '903docs' as the name of the folder.

'As for the file name prefix, the user should enter the file name
'prefix that corresponds to the subset of game rules that the
'user intends to include in the user-defined set of game rules.
'The subset of game rules specifies the composition of each deck,
'and the number of decks in the stack. If each deck includes at
'least one joker, then the subset of game rules also includes a
'rule specifying the point value assigned to the at least one
'joker.

'If the user followed my suggestions for the naming of files that
'contain the databases of player-finish probabilities, then the
'user should enter a file name prefix in accordance with the
'following examples. If the user intends to input a set of game
'rules for an optional-embodiment of the double-exposure game of
'the present invention that includes a subset of rules specifying
'a standard deck composition, six decks in the stack, and each
'joker has a value of zero points, then the user would enter
''J6d' as the file name prefix. If the user intends to input a
'set of game rules for an optional-embodiment of the double-
'exposure game of the present invention that includes a subset of
'rules specifying a standard deck composition,  nine decks in the
'stack, and each joker has a value of any number of points
'required to make a hand total of twenty-seven points, then the
'user would enter 'wc9d' as the file name prefix. If the user
'intends to input a set of rules for an optional embodiment of
'the double-exposure game of the present invention that includes
'a subset of rules specifying a non-standard deck composition
'consisting of thirteen ranks of each of four French suits and
'two decks in the stack, then the user would enter '2d' as the
'file name prefix.

'After the user enters the folder/file name prefix of the files
'containing the databases of player-finish probabilities to be
'loaded into program memory, the BIGS907 software application
'prompts the user to enter the folder/file name prefix of the
'files containing the databases of dealer-finish probabilities to
'be loaded into program memory. If the user followed my
'suggestion for naming the folder that holds files containing
'databases of dealer-finish probabilities, then the user would
'enter '906docs' as the name of the folder. As for the file name
'prefix, if the user followed my suggestions for naming files,
'then the file name prefix of the files containing the databases
'of dealer-finish probabilities to be loaded into program memory
'should be the same as the file name prefix of the files
'containing the databases of player-finish probabilities to be
'loaded into program memory.

'After the user enters the 'folder/file name prefix' of the files
'containing the databases of dealer-finish probabilities to be
'loaded into program memory, the BIGS907 software application
'loads into program memory the contents of a data file that was
'saved by the BIGS903 software application. The data file
'contains data about the user-defined subset of game rules and
'contains a description of the databases of player-finish
'probabilities to be loaded into program memory.

'Afterward, the BIGS907 software application displays the
'description of the databases of player-finish probabilities and
'prompts the user with the following conditional statement. 'If
'this is acceptable, then type y and press enter, else press
'enter'. If the user has made an error while entering the
''folder/file name prefix' of the files containing the databases
'of player-finish probabilities to be loaded into program memory,
'then it will become apparent upon review of the description of
'the databases of player-finish probabilities. If there was an
'error, the user should simply press 'enter' and the BIGS907
'software application will go back to the point in the program
'where the user can reenter the folder/file name prefix of the
'files containing the databases of player-finish probabilities to
'be loaded into program memory. If there was no error, then the
'user should type 'y' and  press 'enter'.

'IV. ADD DEALER SHUFFLE RULES

'After the user presses 'y' and 'enter', the BIGS907 software
'application loads the databases of player-finish probabilities
'and the BIGS907 software application loads the databases of
'dealer-finish probabilities.

'Afterward, the BIGS907 software application prompts the user to
''input the maximum percentage of the stack remaining in the shoe
'when the dealer reshuffles (15-99). Here the BIGS907 software
'application is giving the user an opportunity to add a rule to
'the user-defined set of game rules. The rule specifies when the
'dealer reshuffles the stack. If the percentage of the stack
'remaining in the shoe is less than or equal to the maximum
'percentage of the stack remaining in the shoe when the dealer
'reshuffles, then the dealer does reshuffle the stack. If the
'percentage of the stack remaining in the shoe is greater than
'the maximum percentage of the stack remaining in the shoe when
'the dealer reshuffles, then the dealer does not reshuffle.
'Accordingly, the maximum percentage of the stack dealt from the
'shoe before the dealer reshuffles the stack is equal to the
'difference of one-hundred percent minus the maximum percentage
'of the stack remaining in the shoe when the dealer reshuffles.

'V. HARD AND SOFT

'There are two basic types of hands. If a hand includes at least
'one ace and the dealer can count one ace as fourteen points
'without causing the sum of the point values assigned to the
'cards in the hand to exceed twenty-seven points, then the hand
'is a "soft" hand. Otherwise, the hand is a "hard" hand. If the
'sum of the point values assigned to the cards in a hard hand
'does exceed twenty-seven points, then the holder of the hand
'does bust. However, if the sum of the point values assigned to
'the cards in a soft hand does exceed twenty-seven points, then
'the holder of the hand does not bust. Instead, the value of the
'ace counted as fourteen points changes to one point, and the
'soft hand becomes a hard hand.

'A hand total is equal to the sum of the point values assigned to
'the cards in a hand. There are two basic types of hand totals. A
'soft total is the hand total of a soft hand. For example, ?soft
'twenty-five? is the soft total of a soft hand consisting of an
'ace of diamonds and a jack of diamonds. A hard total is the hand
'total of a hard hand. For example, ?hard twenty-three? is the
'hard total of a hard hand consisting of an ace of spades, a nine
'of diamonds, and a king of clubs.

'VI. ADD RULES FOR THE PLAY OF THE DEALER'S HAND

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'input the hard
'total that the dealer must stand at'. Here the BIGS907 software
'application is giving the user an opportunity to specify a
'target-numerical sum for the play of the dealer's hard hands by
'choosing a hard total from a group of values consisting of hard
'nineteen, hard twenty, hard twenty-one, hard twenty-two, hard
'twenty-three, and hard twenty-four.

'After the user inputs the hard total that the dealer must stand
'at, the BIGS907 software application prompts the user to 'input
'the soft total that the dealer must stand at'. Here the BIGS907
'software application is giving the user an opportunity to
'specify a target-numerical sum for the play of the dealer's soft
'hands by choosing a soft total from a group of values. The lower
'limit for the group of values is equal to the specified target-
'numerical sum for the dealer's hard hands and the upper limit
'for the group of values is equal to soft twenty-five.

'Because the dealer cannot bust while holding a soft hand, it
'does not make sense for the user to specify a target-numerical
'sum for the play of the dealer's soft hands that is less than
'the target-numerical sum specified for the play of the dealer's
'hard hands. In fact, the rules for the play of the dealer's hand
'that yield higher values for house edge tend to be those rules
'that specify a target-numerical sum for the play of the dealer's
'soft hands that is higher than the target-numerical sum
'specified for the play of the dealer's hard hands. Therefore,
'the BIGS907 software application enables the user to specify one
'of twenty-seven rules for the play of the dealer's hand. Each
'rule does specify one of a group of twenty-seven combinations of
'target-numerical sums for the play of the dealer's hand
'consisting of the following hard total/soft total combinations.
'19/A5, 19/A6, 19/A7, 19/A8, 19/A9, 19/AT, 19/AJ, 20/A6, 20/A7,
'20/A8, 20/A9, 20/AT, 20/AJ, 21/A7, 21/A8, 21/A9, 21/AT, 21/AJ,
'22/A8, 22/A9, 22/AT, 22/AJ, 23/A9, 23/AT, 23/AJ, 24/AT,
'and 24/AJ.

'VII. ADD RULES FOR THE PLAY OF THE PLAYER'S HAND

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'input the hard
'total that the player must stand at in games wherein, upon the
'dealer's turn, the dealer will draw at least one additional card
'to the dealer's initial hand, else press enter'. Here the
'BIGS907 software application is giving the user an opportunity
'to add a rule to the user-defined set of game rules. The rule
'does specify the following. If, upon the dealer's turn, the
'dealer will draw at least one card to the dealer's initial hand,
'if the player has a hard hand, and if the player's hand total is
'at least equal to the hard total input by the user, then the
'player must stand.

'If, upon the dealer's turn, the dealer will draw at least one
'additional card to the dealer's initial hand, then, given this
'rule, the BIGS907 software application does the following. If
'the player's initial hand is a hard hand with a hard total that
'is less than the hard total input by the user, then the BIGS907
'software application does not consider any of the eighty-one-
'supported strategies for the player's use of the hit option that
'specify a target-numerical sum for the play of the player's hard
'hands that is greater than the hard total input by the user. If
'the player's initial hand is a hard hand with a hard total that
'is at least equal to the hard total input by the user, then the
'BIGS907 software application does consider those of the eighty-
'one-supported strategies for the player's use of the hit option
'that specify a target-numerical sum for the play of the player's
'hard hands that is greater than the hard total input by the
'user.

'As such, if the user inputs zero in response to the above-
'described prompt, if the user inputs twenty-seven in response to
'the above-described prompt, or if the user does simply press the
''enter' key in response to the above-described prompt, then the
'user does add a rule to specify the following. If, upon the
'dealer's turn, the dealer will draw at least one card to the
'dealer's initial hand, if the player has a hard hand, and if the
'player's hand total is at least equal to hard twenty-seven, then
'the player must stand.

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'input the soft
'total that the player must stand at in games wherein, upon the
'dealer's turn, the dealer will draw at least one additional card
'to the dealer's initial hand, else press enter'. Here the
'BIGS907 software application is giving the user an opportunity
'to add a rule to the user-defined set of game rules. The rule
'does specify the following. If, upon the dealer's turn, the
'dealer will draw at least one playing card to the dealer's
'initial hand, if the player has a soft hand, and if the player's
'hand total is at least equal to the soft total input by the
'user, then the player must stand.

'If, upon the dealer's turn, the dealer will draw at least one
'additional card to the dealer's initial hand, then, given this
'rule, the BIGS907 software application does the following. If
'the player's initial hand is a soft hand with a soft total that
'is less than the soft total input by the user, then the BIGS907
'software application does not consider any of the eighty-one-
'supported strategies for the player's use of the hit option that
'specify a target-numerical sum for the play of the player's soft
'hands that is greater than the soft total input by the user. If
'the player's initial hand is a soft hand with a soft total that
'is at least equal to the soft total input by the user, then the
'BIGS907 software application does consider those of the eighty-
'one-supported strategies for the player's use of the hit option
'that specify a target-numerical sum for the play of the player's
'soft hands that is greater than the soft total input by the
'user.

'Therefore, if the user inputs zero in response to the above-
'described prompt, if the user inputs twenty-seven in response to
'the above-described prompt, or if the user does simply press the
''enter' key in response to the above-described prompt, then the
'user does add a rule to specify the following. If, upon the
'dealer's turn, the dealer will draw at least one card to the
'dealer's initial hand, if the player has a soft type hand and if
'the player's hand total is at least equal to soft twenty-seven,
'then the player must stand.

'VIII. OUTCOME OF GAMES WHEREIN A TIE-SCORE CONTEST DOES OCCUR

'If the dealer determines the outcome of the game by comparing
'hand totals to the target-numerical sum of twenty-seven points,
'and if the player's hand total is as close to twenty-seven
'points as is the dealer's hand total, then a tie-score contest
'occurs.

'In some optional embodiments, if the tie-score contest does
'occur, then the outcome of the game is the dealer's hand wins
'unless a predetermined outcome does occur. Accordingly, the
'contest may be described succinctly as a dealer-wins-ties
'contest.

'In other optional embodiments, if the tie-score contest does
'occur, then the outcome of the game is the player's hand wins
'unless a predetermined outcome does occur. Accordingly, the
'contest may be described succinctly as a player-wins-ties
'contest.

'In still other optional embodiments, if the tie-score contest
'does occur, then the outcome of the game is a stalemate unless a
'predetermined outcome does occur. Accordingly, the contest may
'be described succinctly as a nobody-wins-ties contest.

'After the user has responded to the above-described prompts, the
'BIGS907 software application prompts the user to 'add one of
'three rules to specify the outcome of games wherein a tie-score
'contest occurs.  Press the 'enter' key to add a rule to specify
'that a nobody-wins-ties contest occurs. Press the '1' and
''enter' keys to add a rule to specify that a dealer-wins-ties
'contest occurs. Press the '2' and 'enter' keys to add a rule to
'specify that a player-wins-ties contest occurs.

'IX. OUTCOME OF GAMES WHEREIN A PLAYER-BUST CONTEST DOES OCCUR

'If the dealer determines the outcome of the game by comparing
'hand totals to the target-numerical sum of twenty-seven points,
'if the player does bust, and if the dealer does not bust, then a
'player-bust contest occurs. After the user has added one of
'three rules to specify the outcome of games wherein a tie-score
'contest does occur, the BIGS907 software application prompts the
'user to 'add one of three rules to specify the outcome of games
'wherein a player-bust contest does occur. Press 'enter' to add a
'rule to specify that a player-bust-loss contest occurs. Press
''1' and 'enter' to add a rule to specify a player-bust-push
'contest occurs. Press '2' and 'enter' to add a rule to specify a
'player-bust-win contest occurs.'

'Here the BIGS907 software application is giving the user an
'opportunity to add one of three rules to the user-defined set of
'game rules. If the user does press the 'enter' key in response
'to the above-described prompt, then the user does add the rule
'to specify that a player-bust-loss contest occurs. If the
'player-bust-loss contest does occur, then the player's hand is a
'predetermined-losing-complete hand, a predetermined outcome does
'occur, and the outcome of the game is the dealer's hand wins.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the user does add
'the rule to specify that a player-bust-push contest occurs. If
'the player-bust-push contest does occur, then the dealer
'determines the outcome of the game by comparing hand totals to
'the target-numerical sum of twenty-seven points in accordance
'with the following set of rules. If the player's hand total is
'closer to twenty-seven points than is the dealer's hand total,
'then the player's hand is a predetermined-stalemating-complete
'hand, a predetermined outcome does occur, and the outcome of the
'game is a stalemate. If the player's hand total is as close to
'twenty-seven points as is the dealer's hand total, and if the
'player-wins-ties contest does occur, then the player's hand is a
'predetermined-stalemating-complete hand, a predetermined outcome
'does occur, and the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the nobody-wins-ties contest does
'occur, then the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the dealer's hand total is closer to twenty-seven points than
'is the player's hand total, then the outcome of the game is the
'dealer's hand wins.

'If the user does press the '2' key and the 'enter' key in
'response to the above-described prompt, then the user does add
'the rule to specify that a player-bust-win contest occurs. If
'the player-bust-win contest does occur, then the dealer
'determines the outcome of the game by comparing hand totals to
'the target-numerical sum of twenty-seven points in accordance
'with the following set of rules. If the player's hand total is
'closer to twenty-seven points than is the dealer's hand total,
'then the outcome of the game is the player's hand wins. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the player-wins-ties contest does
'occur, then the outcome of the game is the player's hand wins.
'If the player's hand total is as close to twenty-seven points as
'is the dealer's hand total, and if the nobody-wins-ties contest
'does occur, then the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the dealer's hand total is closer to twenty-seven points than
'is the player's hand total, then the outcome of the game is the
'dealer's hand wins.

'X. OUTCOME OF GAMES WHEREIN A DEALER-BUST CONTEST DOES OCCUR

'If the dealer determines the outcome of the game by comparing
'hand totals to the target-numerical sum of twenty-seven points,
'if the player does not bust, and if the dealer does bust, then a
'dealer-bust contest occurs. After the user has added one of
'three rules to specify the outcome of games wherein a player-
'bust contest occurs, the BIGS907 software application prompts
'the user to 'add one of three rules to specify the outcome of
'games wherein a dealer-bust contest occurs. Press 'enter' to add
'a rule to specify that a dealer-bust-loss contest occurs.  Press
''1' and 'enter' to add a rule to specify that a dealer-bust-push
'contest occurs.  Press '2' and 'enter' to add a rule to specify
'that a dealer-bust-win contest occurs.'

'Here the BIGS907 software application is giving the user an
'opportunity to add one of three rules to the user-defined set of
'game rules. If the user does press the 'enter' key in response
'to the above-described prompt, then the user does add the rule
'to specify that a dealer-bust-loss contest occurs. If the
'dealer-bust-loss contest does occur, then the dealer's hand is a
'predetermined-losing-complete hand, a predetermined outcome does
'occur, and the outcome of the game is the player's hand wins.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the user does add
'the rule to specify that a dealer-bust-push contest occurs. If
'the dealer-bust-push contest does occur, then the dealer
'determines the outcome of the game by comparing hand totals to
'the target-numerical sum of twenty-seven points in accordance
'with the following set of rules. If the dealer's hand total is
'closer to twenty-seven points than is the player's hand total,
'then the dealer's hand is a predetermined-stalemating-complete
'hand, a predetermined outcome does occur, and the outcome of the
'game is a stalemate. If the dealer's hand total is as close to
'twenty-seven points as is the player's hand total, and if the
'dealer-wins-ties contest does occur, then the dealer's hand is a
'predetermined-stalemating-complete hand, a predetermined outcome
'does occur, and the outcome of the game is a stalemate. If the
'dealer's hand total is as close to twenty-seven points as is the
'player's hand total, and if the nobody-wins-ties contest does
'occur, then the outcome of the game is a stalemate. If the
'dealer's hand total is as close to twenty-seven points as is the
'player's hand total, and if the player-wins-ties contest does
'occur, then the outcome of the game is the player's hand wins.
'If the player's hand total is closer to twenty-seven points than
'is the dealer's hand total, then the outcome of the game is the
'player's hand wins.

'If the user does press the '2' key and the 'enter' key in
'response to the above-described prompt, then the user does add
'the rule to specify that a dealer-bust-win contest occurs. If
'the dealer-bust-win contest does occur, then the dealer
'determines the outcome of the game by comparing hand totals to
'the target-numerical sum of twenty-seven points in accordance
'with the following set of rules. If the dealer's hand total is
'closer to twenty-seven points than is the player's hand total,
'then the outcome of the game is the dealer's hand wins. If the
'dealer's hand total is as close to twenty-seven points as is the
'player's hand total, and if the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the dealer's hand total is as close to twenty-seven points as
'is the player's hand total, and if the nobody-wins-ties contest
'does occur, then the outcome of the game is a stalemate. If the
'dealer's hand total is as close to twenty-seven points as is the
'player's hand total, and if the player-wins-ties contest does
'occur, then the outcome of the game is the player's hand wins.
'If the player's hand total is closer to twenty-seven points than
'is the dealer's hand total, then the outcome of the game is the
'player's hand wins.

'XI. OUTCOME OF GAMES WHEREIN A DOUBLE-BUST CONTEST DOES OCCUR

'If the dealer determines the outcome of the game by comparing
'hand totals to the target-numerical sum of twenty-seven points,
'if the player busts, and if the dealer busts, then a double-bust
'contest occurs. After the user has added one of three rules to
'specify the outcome of games wherein the dealer-bust contest
'occurs, the BIGS907 software application prompts the user to
''add one of three rules to specify the outcome of games wherein
'a double-bust contest occurs.  Press 'enter' to add a rule to
'specify that a double-bust-loss contest occurs. Press '1' and
''enter' to add a rule to specify that a double-bust-push contest
'occurs. Press '2' and 'enter' to add a rule to specify that a
'double-bust-win contest occurs.'

'Here the BIGS907 software application is giving the user an
'opportunity to add one of three rules to the user-defined set of
'game rules. If the user does press the 'enter' key in response
'to the above-described prompt, then the user does add the rule
'to specify that a dealer-bust-loss contest occurs. If the
'double-bust-loss contest does occur, then the player's hand is a
'predetermined-losing-complete hand, a predetermined outcome does
'occur, and the outcome of the game is the dealer's hand wins.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the user does add
'the rule to specify a double-bust-push contest occurs. If the
'double-bust-push contest does occur, then the dealer determines
'the outcome of the game by comparing hand totals to the target-
'numerical sum of twenty-seven points in accordance with the
'following set of rules. If the player's hand total is closer to
'twenty-seven points than is the dealer's hand total, then the
'player's hand is a predetermined-stalemating-complete hand, a
'predetermined outcome does occur, and the outcome of the game is
'a stalemate. If the player's hand total is as close to twenty-
'seven points as is the dealer's hand total, and if the player-
'wins-ties contest does occur, then the player's hand is a
'predetermined-stalemating-complete hand, a predetermined outcome
'does occur, and the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the nobody-wins-ties contest does
'occur, then the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the dealer's hand total is closer to twenty-seven points than
'is the player's hand total, then the outcome of the game is the
'dealer's hand wins.

'If the user does press the '2' key and the 'enter' key in
'response to the above-described prompt, then the user does add a
'rule to specify the double-bust-win contest occurs. If the
'double-bust-win contest does occur, then the dealer determines
'the outcome of the game by comparing hand totals to the target-
'numerical sum of twenty-seven points in accordance with the
'following set of rules. If the player's hand total is closer to
'twenty-seven points than is the dealer's hand total, then the
'outcome of the game is the player's hand wins. If the player's
'hand total is as close to twenty-seven points as is the dealer's
'hand total, and if the player-wins-ties contest does occur, then
'the outcome of the game is the player's hand wins. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the nobody-wins-ties contest does
'occur, then the outcome of the game is a stalemate. If the
'player's hand total is as close to twenty-seven points as is the
'dealer's hand total, and if the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the dealer's hand-total is closer to twenty-seven points than
'is the player's hand total, then the outcome of the game is the
'dealer's hand wins.

'XII. OUTCOME OF GAMES WHEREIN THE DEALER-BUST CONTEST DOES OCCUR
'AND WHEREIN THE DEALER'S HAND TOTAL DOES EQUAL TWENTY-EIGHT
'POINTS

'After the user has added one of a set of three rules to specify
'the conduct of a double bust contest, the BIGS907 software
'application prompts the user to 'add one of three rules to
'specify the outcome of games wherein the dealer-bust contest
'does occur, and wherein the dealer's hand total does equal
'twenty-eight points. Press enter to add a rule to specify the
'outcome conforms to the normal rules. Press 1 and enter to add a
'rule to specify the outcome is a stalemate. Press 2 and enter to
'add a rule to specify the outcome is the dealer's hand wins'

'Here the BIGS907 software application is giving the user an
'opportunity to add one of three rules to the user-defined set of
'game rules. If the user does press the 'enter' key in response
'to the above-described prompt, then the user does add the rule
'to specify the outcome conforms to normal rules. In that event,
'if the dealer-bust contest does occur, and if the dealer's hand
'total is equal to twenty-eight points, then the outcome of the
'game is determined by the rule added to specify the outcome of
'games wherein the dealer-bust contest does occur. If the user
'does press the '1' key and the 'enter' key in response to the
'above-described prompt, then the user does add the rule to
'specify the outcome of the game is a stalemate. In that event,
'if the dealer-bust contest does occur, and if the dealer's hand
'total is equal to twenty-eight points, then the dealer's hand is
'a predetermined-stalemating-complete hand, and the outcome of
'the game is a stalemate. If the user does press the '2' key and
'the 'enter' key in response to the above-described prompt, then
'the user does add the rule to specify the dealer's hand wins. In
'that event, if the dealer-bust contest does occur, and if the
'dealer's hand total is equal to twenty-eight points, then the
'dealer's hand is a predetermined-winning-complete hand, and the
'outcome of the game is the dealer's hand wins.

'XIII. AN INITIAL HAND CONSISTING OF A PAIR OF JOKERS

'If the user-defined composition of each deck includes at least
'one joker, then, after the user has responded to the above-
'described prompts, the BIGS907 software application prompts the
'user to 'press 1 and enter for an initial hand that consists of
'a pair of jokers has a value of twenty-seven points and in most
'cases is a predetermined-winning-complete hand, else press
'enter'. Here the BIGS907 software application is giving the user
'the opportunity to add a rule to the user-defined set of game
'rules. The rule is. Any initial hand that consists of a pair of
'jokers has a value of twenty-seven points and in most cases is a
'predetermined-winning-complete hand. If the user would like to
'add this rule to the user-defined set of game rules, then the
'user should press the '1' key, and the 'enter' key. The user
'could also simply press the 'enter' key. In that event, an
'initial hand that consists of a pair of jokers will not be a
'predetermined-winning-complete hand unless another user-defined
'rule makes that combination of cards a predetermined-winning-
'complete hand.

'XIV. AN INITIAL HAND CONSISTING OF AN ACE AND A KING

'After the user has responded to the above-described prompt, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for an initial hand consisting of an ace and a king has a
'value of twenty-seven points and in most cases is a
'predetermined-winning-complete hand, else press enter'. Here the
'BIGS907 software application is giving the user the opportunity
'to add a rule to the user-defined set of game rules. The rule
'is: Any initial hand consisting of an ace and a king has a value
'of twenty-seven points and in most cases is a predetermined-
'winning-complete hand. If the user would like to add this rule
'to the user-defined set of game rules, then the user should
'press the '1' key, and the 'enter' key. The user could also
'simply press the 'enter' key. In that event, an initial hand
'consisting of an ace and a king will have a value of twenty-
'seven points and will not be a predetermined-winning-complete
'hand unless another user-defined rule makes that combination of
'cards a predetermined-winning-complete hand.

'XV. AN INITIAL HAND CONSISTING OF A JOKER AND A CARD OF ANY RANK
'OTHER THAN JOKER

'If the user-defined composition of each deck includes at least
'one joker, then, after the user has responded to the above-
'described prompts, the BIGS907 software application prompts the
'user to 'press 1 and enter for an initial hand that consists of
'a joker and a card of any rank other than joker has a value of
'twenty-seven points and in most cases is a predetermined-
'winning-complete hand, else press enter'. Here the BIGS907
'software application is giving the user an opportunity to add a
'rule to the user-defined set of game rules. The rule is: Any
'initial hand that consists of a joker and a card of any rank
'other than joker has a value of twenty-seven points and in most
'cases is a predetermined-winning-complete hand. If the user
'would like to add this rule to the user-defined set of game
'rules, then the user should press the '1' key, and the 'enter'
'key. The user could also simply press the 'enter' key. In that
'event, an initial hand that consists of a joker and a card of
'any rank other than joker will not be a predetermined-winning-
'complete hand unless another user-defined rule makes that
'combination of cards a predetermined-winning-complete hand.

'XVI. RANK OF EACH INITIAL HAND THAT IN MOST CASES IS A
'PREDETERMINED-WINNING-COMPLETE HAND.

'If both the player and the dealer draw an initial hand that in
'most cases is a predetermined-winning-complete hand, then the
'BIGS907 software application ranks each initial hand in reverse
'order of its' probability of occurrence as follows. An initial
'hand consisting of a pair of jokers has the highest rank. An
'initial hand consisting of an ace and a king has a higher rank
'than an initial hand consisting of a joker and a card of any
'rank other than joker. An initial hand consisting of a joker and
'a card of any rank other than joker has the lowest rank. If both
'the player and the dealer draw an initial hand that in most
'cases is a predetermined-winning-complete hand, then the hand
'with the highest rank is a predetermined-winning-complete hand,
'a predetermined outcome does occur, and the outcome of the game
'is: The holder of the hand with the highest rank wins.

'If both the player and the dealer draw an initial hand that in
'most cases is a predetermined-winning-complete hand, and if both
'hands have the same rank, then the BIGS907 software application
'determines the outcome of the game according to the rule added
'by the user to specify the outcome of games wherein the tie-
'score contest occurs. If the dealer-wins-ties contest does
'occur, then the outcome of the game is the dealer's hand wins.
'If the nobody-wins-ties contest does occur, then the outcome of
'the game is a stalemate. If the player-wins-ties contest does
'occur, then the outcome of the game is the player's hand wins.

'XVII. STATUS OF ANY HAND THAT INCLUDES AT LEAST ONE JOKER

'If the user-defined composition of each deck includes at least
'one joker, and if the rules assign each joker a value of any
'number of points required to make a hand total of twenty-seven
'points, then, after the user responds to the above-described
'prompts, the BIGS907 software application prompts the user to do
'the following. 'Press 1 and enter for in most cases any player
'hand that includes at least one joker is a predetermined-
'winning-complete hand, else press enter'. Here the BIGS907
'software application is giving the user an opportunity to add a
'rule to the user-defined set of game rules. The rule is. In most
'cases, any hand that includes at least one joker is a
'predetermined-winning-complete hand. If the user would like to
'add this rule to the user-defined set of game rules, then the
'user should press the '1' key, and the 'enter' key.  The user
'could also simply press the 'enter' key. In that event, any hand
'that includes at least one joker will not be a predetermined-
'winning-complete hand unless another user-defined rule makes
'that hand a predetermined-winning-complete hand.

'If the user does add a rule to specify that in most cases a
'particular type of initial hand is a predetermined-winning-
'complete hand, then said rule takes precedence over a rule to
'specify that in most cases any player hand that includes at
'least one joker is a predetermined-winning-complete hand. As
'such, if the user-defined set of game rules does specify that in
'most cases any player hand that includes at least one joker is a
'predetermined-winning-complete hand, and if the player's hand
'does include at least one joker, then the BIGS907 software
'application determines the outcome of the game as follows. If
'the user-defined set of game rules does not specify that in most
'cases the dealer's initial hand is a predetermined-winning-
'complete hand, then the outcome of the game is the player's hand
'wins. If the user-defined set of game rules does specify that in
'most cases the dealer's initial hand is a predetermined-winning-
'complete hand, and if the user-defined set of game rules does
'not specify that in most cases the player's initial hand is a
'predetermined-winning-complete hand, then the outcome of the
'game is the dealer's hand wins.

'XVIII. STATUS OF ANY-NINE-CARD-PLAYER HAND WITH A NUMERICAL-SUM
'VALUE OF LESS THAN TWENTY-EIGHT POINTS

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for any nine-card player hand with a numerical sum value
'of less than twenty-eight points is a predetermined-winning-
'complete hand, else press enter'. Here the BIGS907 software
'application is giving the user an opportunity to add a rule to
'the user-defined set of game rules. The rule is: Any nine-card-
'player hand with a numerical-sum value of less than twenty-eight
'points is a predetermined-winning-complete hand.  If the user
'would like to add this rule to the user-defined set of game
'rules, then the user should press the '1' key and the 'enter'
'key. The user could also simply press the 'enter' key. In that
'event, any nine-card-player hand with a numerical-sum value of
'less than twenty-eight points is not a predetermined-winning-
'complete hand unless another user-defined rule makes that hand a
'predetermined-winning-complete hand.

'XIX. SURRENDER

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for allow the player to surrender, else press enter'. Here
'the BIGS907 software application is enabling the user to add a
'rule to the user-defined set of game rules. The rule is: If the
'dealer consults with the player for a decision on how to play
'the player's initial hand, then the player will have the option
'to surrender the player's initial hand in exchange for agreeing
'to give up half of the game wager to the dealer, and agreeing to
'retire from the game. If the user does want to allow the player
'to surrender the player's initial hand, then the user should
'press the '1' key, and the 'enter' key. If the user does not
'want the player to have the option to surrender the player's
'initial hand, then the user should press the 'enter' key.

'XX. DOUBLE DOWN

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for allow the player to double down, else press enter'.
'Here the BIGS907 software application is enabling the user to
'add a rule to the user-defined set of game rules. The rule is.
'If the dealer consults with the player for a decision on how to
'play the player's initial hand, then the player has the option
'to double the game wager on the player's initial hand in
'exchange for agreeing to take only one additional card to the
'player's initial hand, and, afterward, ending the play of the
'hand. If the user does want to add this rule to the user-defined
'set of game rules, then the user should press the '1' key, and
'the 'enter' key. If the user does not want to add this rule to
'the user-defined set of game rules, then the user should press
'the 'enter' key.

'XXI. RESTRICT THE PLAYER'S USE OF THE DOUBLE DOWN OPTION

'If the user does allow the player to double down, then, after
'the player responds to the above-described prompts, the BIGS907
'software application prompts the user to 'press 1 and enter to
'restrict the player's use of the double down option to those
'hands wherein the player's hand total is equal to one of a user-
'defined set of hand totals, else press enter'.  Here the BIGS907
'software application is enabling the user to add a rule to the
'user-defined set of game rules. The rule is. The player's use of
'the double down option is restricted to those hands wherein the
'player's hand total is equal to one of a user-defined set of
'hand totals. If the user does want to add a rule to restrict the
'player's use of the double down option, then the user should
'press the '1' key, and the 'enter' key. Otherwise, the user
'should press the 'enter' key.

'If the user does press the 'enter' key in response to the above-
'described prompt, then the user does not add a rule to restrict
'the player's use of the double down option. In that event, if
'the dealer consults with the player for a decision on how to
'play the player's hand, then the player can double down on any
'player's hand total. If the user does press the '1' key and the
''enter' key, then the user does add a rule to restrict the
'player's use of the double down option to those hands wherein
'the player's hand total is equal to one of a user-defined set of
'hand totals. If the user does press the '1' key and the 'enter'
'key, then the BIGS907 software application prompts the user to
''press enter for default restrictions. Press 1 and enter for
'alternate restrictions'. Here the BIGS907 software application
'is giving the user a choice between two different rules for
'restricting the player's use of the double down option to those
'hands wherein the player's hand is equal to one of a user-
'defined set of hand totals.

'If the user does press the 'enter' key, then the user does not
'choose the alternate rule, the user does choose the default
'rule. If the user does choose the default rule, then the BIGS907
'software application prompts the user to do the following.
''Enter an integer to define a number of points as the lower
'limit of the user-defined set of hand totals and in so doing
'make the upper limit of the user-defined set of hand totals
'equal to fourteen points. For example, enter 12 for 12/13/14
'only; enter 13 for 13/14 only'.

'If the user presses the '1' key and the 'enter' key when the
'BIGS907 software application prompts the user to 'press 1 and
'enter for an alternate rule', then the user does not choose the
'default rule, the user does choose the alternate rule. If the
'user does choose the alternate rule, then the BIGS907 software
'application prompts the user to do the following. 'Enter an
'integer to define a number of points as the lower limit of the
'user-defined set of hand totals and in so doing make the upper
'limit of the user-defined set of hand totals equal to twenty-
'seven points minus the lower limit of the user-defined set of
'hand totals. For example, enter 13, 12, 11, 10, or 9 for 13-14,
'12-15, 11-16, 10-17, or 9-18 only.' Here the phrase '13-14,
'12-15, 11-16, 10-17, or 9-18 only' is short for thirteen and
'fourteen points only, twelve through fifteen points only, eleven
'through sixteen points only, ten through seventeen points only,
'or nine through eighteen points only.

'In both cases, the BIGS907 software application is giving the
'user the opportunity to add a rule to the user-defined set of
'game rules. The rule disallows the player's use of the double
'down option on all hands except those wherein the dealer
'consults with the player for a decision on how to play the
'player's hand, and wherein the player's hand total is equal to
'one of the user-defined set of hand totals. If the player's hand
'is a soft hand, then the dealer will assign a value of one point
'to each ace when determining whether the player's hand total is
'equal to one of the user-defined set of hand totals. The user
'can enter any integer to specify a number of points as the lower
'limit of the user-defined set of hand totals. If the user enters
'an integer that makes the lower limit of the user-defined set of
'hand totals equal to at least fifteen points, then the lower
'limit will be greater than the preset upper limit. This will
'cause the user-defined set of hand totals to be a null set, and
'cause the user-defined set of game rules to disallow the
'player's use of the double down option in all games. If the user
'does simply press the 'enter' key in response to the above-
'described prompt, then the lower limit of the set of hand totals
'will be zero points.

'XXII. DOUBLE DOWN ON MORE THAN TWO CARDS

'After the user responds to the above-described group of prompts,
'the BIGS907 software application prompts the user to 'press 1
'and enter for double down on more than two cards, else press
'enter'. If the user does want to allow the player to double down
'in a game wherein the player's hand does consist of more than
'two cards, then the user should press the '1' key and the
''enter' key. Otherwise, the user should press the 'enter' key.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS907
'software application will begin the following group of prompts
'by prompting the user to 'press 1 and enter for double down on 3
'cards, else press enter'. Here the BIGS907 software application
'is giving the user an opportunity to add a rule to the user-
'defined set of game rules. The rule is. The player may double
'the game wager in a game wherein the dealer consults with the
'player for a decision on how to play the player's hand and
'wherein the player's hand consists of three playing cards
'provided the player does agree to draw only one additional card
'to the player's hand and afterward end the play of that hand.
'If the user does want to add this rule to the user-defined set
'of game rules then the user should press the '1' key and the
''enter' key. If the user does not want to add this rule to the
'user-defined set of game rules, then the user should press the
''enter' key.

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for double down on 4 cards, else press enter'. After the
'user responds to this prompt, the BIGS907 software application
'prompts the user to 'press 1 and enter for double down on 5
'cards, else press enter'. After the user responds to this
'prompt, the BIGS907 software application prompts the user to
''press 1 and enter for double down on 6 cards, else press
'enter'. After the user responds to this prompt, the BIGS907
'software application prompts the user to 'press 1 and enter for
'double down on 7 cards, else press enter'. After the user
'responds to this prompt, the BIGS907 software application
'prompts the user to 'press 1 and enter for double down on 8
'cards, else press enter'. In this way, the BIGS907 software
'application enables the user to designate rules to allow the
'player to double the game wager in a game wherein the dealer
'consults with the player for a decision on how to play the
'player's hand and wherein the player's hand consists of a user-
'defined number of cards provided the player agrees to draw only
'one additional card to the player's hand and afterward end the
'play of that hand.

'If the user does add rules to the user-defined set of game rules
'to allow the player to double down on more than two cards, then
'in most cases the effect on the outcome of the game wager is a
'decrease of the house edge. This decrease of the house edge will
'not show up in the calculations of the expected value of the
'game wager made by the BIGS907 software application, because the
'BIGS907 software application relies upon databases of player-
'finish probabilities saved to file by the BIGS903 software
'application. The BIGS903 software application uses a set of
'rules to build databases of player-finish probabilities. The set
'of rules does not include a rule to allow the player to double
'down on more than two cards.

'However, if the user does add rules to the user-defined set of
'game rules to allow the player to double down on more than two
'cards, then the effect on the expected value of the game wager
'will show up in the results of a game simulation. If the user
'would like to know the size of the decrease of the house edge
'caused by adding the rule, then the user should use the results
'of a game simulation conducted using the BIGS908 software
'application to measure it. The BIGS908 software application will
'cause a computer-controlled player to double down on more than
'two cards provided the set of strategy tables calls for the
'player to double down on two cards of an equal numerical sum
'value and provided the user does add a rule to allow the player
'to double down on the more than two cards in the player's hand.

'XXIII. SPLIT

'In any case, after the user responds to the above-described
'prompts, the BIGS907 software application prompts the user to
''press 1 and enter for allow the player to split, else press
'enter'.  Here the BIGS907 software application is enabling the
'user to add a rule to the user-defined set of game rules. The
'rule is.  If the dealer consults with the player for a decision
'on how to play the player's hand, if the player's hand consists
'of two cards, and if the two cards are assigned identical ranks,
'then the player may split the player's hand into two post-split
'hands. If the user does want to add this rule to the user-
'defined set of game rules, then the user should press the '1'
'key and the 'enter' key. If the user does not want to add this
'rule to the user-defined set of game rules, then the user should
'press the 'enter' key.

'XXIV. SPLIT EVERY PAIR

'If the user does allow the player to split, then after the user
'responds to the above-described prompt, the BIGS907 software
'application prompts the user to 'press 1 and enter to split
'every pair, else press enter'. Here the BIGS907 software
'application is enabling the user to add a rule to the user-
'defined set of game rules. The rule is. If the dealer consults
'with the player for a decision on how to play the player's hand,
'if the player's hand consists of two cards, and if the two cards
'are assigned identical ranks, then the player must split the
'player's hand into two post-split hands. Adding this rule causes
'the BIGS907 software application to choose the split option in
'all cases wherein the dealer consults with the player for a
'decision on how to play the player's hand, and wherein the card
'ranks assigned to the two cards in the player's initial hand are
'identical. If the user does want the player to split every pair,
'then the user should press the '1' key and the 'enter' key. If
'the user does not want the player to split every pair, then the
'user should press the 'enter' key.

'XXV. DOUBLE DOWN AFTER A SPLIT

'If the user does allow the player to split, and if the user does
'allow the player to double down, then, after the user responds
'to the above-described prompts, the BIGS907 software application
'prompts the user to 'press 1 and enter for allow the player to
'double down after a split, else press enter'. Here the BIGS907
'software application is giving the user the opportunity to add a
'rule to the user-defined set of game rules. The rule is. If the
'dealer consults with the player for a decision on how to play
'the player's post-split-initial hand, then the player has the
'option to double the game wager on the post-split-initial hand
'in exchange for agreeing to take exactly one additional card to
'the player's post-split-initial hand, and afterward end the play
'of that hand.  If the user does want to add this rule to the
'user-defined set of game rules, then the user should press the
''1' key and the 'enter' key. If the user does not want to add
'this rule to the user-defined  set of game rules, then the user
'should press the 'enter' key.

'If the user-defined set of game rules does restrict the players
'use of the double down option to those hands wherein the
'player's hand total is equal to one of a user-defined set of
'hand totals, then those rules apply equally to all hands
'including post-split hands. If the user-defined set of game
'rules does allow the player to double down on more than two
'cards, then those rules apply equally to all hands including
'post-split hands.

'XXVI. MAXIMUM NUMBER OF POST-SPLIT HANDS ALLOWED PER PLAYER
'POSITION PER ROUND

'If the user does allow the player to split, then after the user
'responds to the above-described prompt, the BIGS907 software
'application prompts the user to 'enter the maximum number of
'post-split hands allowed per player position per round.' Here
'the BIGS907 software application is enabling the user to add a
'rule to the user-defined set of game rules. The rule is: Further
'splitting of post-split hands is possible as long as further
'splitting of post-split hands does not result in the formation
'of more than a user-defined-maximum number of post-split hands
'per player position per round. To respond to the prompt, the
'user should press a number key corresponding to the user-
'defined-maximum number of post-split hands per player position
'per round, and press the enter key.

'XXVII. RE-SPLIT ACES

'If the user does press a number key that corresponds to greater
'than two post-split hands per player station per round, then the
'BIGS907 software application prompts the user to 'press 1 and
'enter for allow player to re-split aces, else press enter'. Here
'the BIGS907 software application is enabling the user to add a
'rule to the user-defined set of game rules. The rule is. If the
'player splits a pair of aces, and if at least one of the
'resulting post-split-initial hands consists of a pair of aces,
'then the rules allow the player to re-split the pair of aces. If
'the user does want to add this rule to the user-defined set of
'game rules, then the user should press the '1' key and the
''enter' key. If the user does not want to add this rule to the
'user-defined set of game rules, then the user should press the
''enter' key.

'If the user-defined set of game rules does not allow the player
'to re-split aces, then the player may split a pair of aces
'provided doing so does not result in the formation of more than
'two post-split hands per player position per round. If the user-
'defined set of game rules does allow the player to re-split
'aces, then the player may split a pair of aces provided doing so
'does not result in the formation of more than the user-defined-
'maximum number of post-split hands per player position per
'round.

'XXVIII. DRAW TO SPLIT ACES

'If the user does allow the player to split, then after the user
'responds to the above-described prompt, the BIGS907 software
'application prompts the user to 'press 1 and enter for allow
'player to draw to split aces, else press enter'. Here the
'BIGS907 software application is enabling the user to add a rule
'to the user-defined set of game rules. The rule is. If the
'player splits a pair of aces, then the dealer will deal one
'additional card to each ace of each post-split hand and the
'player may draw additional cards to the resulting post-split-
'initial hands provided the dealer consults with the player for a
'decision on how to play the player's post-split hand. If the
'user does want to add this rule to the user-defined set of game
'rules, then the user should press the '1' key and the 'enter'
'key. If the user does not want to add this rule to the user-
'defined set of game rules then the user should press the 'enter'
'key.

'If the user-defined set of game rules does not allow the player
'to draw to split aces, and if the player splits an initial-hand
'consisting of a pair of aces, then the dealer will deal one
'additional card to each ace to form each of the two post-split-
'complete hands. If the user-defined set of game rules does not
'allow the player to draw to split aces, if the user-defined set
'of game rules does allow the player to re-split aces, if the
'player splits a pair of aces, and if the player draws a post-
'split hand consisting of another pair of aces, then the dealer
'will permit the player to re-split the aces. Otherwise, the
'dealer will deal one additional card to each ace of each of two
'post-split hands and the player will have no other option but to
'stand with whatever two-card combinations result from the player
'splitting the pair of aces into two post-split hands.

'XXIX. BONUS PAID FOR A PREDETERMINED-WINNING-COMPLETE HAND THAT
'CONSISTS OF A PAIR OF JOKERS

'If the user does add a rule to specify that any initial hand
'that consists of a pair of jokers, has a value of twenty-seven
'points and in most cases is a predetermined-winning-complete
'hand, then, after the user responds to the above-described
'prompts, the BIGS907 software application prompts the user to
''input the odds on the game wager that the dealer will pay the
'player for a predetermined-winning-complete hand that consists
'of a pair of jokers'. Here the BIGS907 software application is
'giving the user the opportunity to add a rule to the user-
'defined set of game rules. The rule is. If the player draws a
'predetermined-winning-complete hand consisting of a pair of
'jokers, then the dealer will pay to the player the user-defined
'odds on the game wager.

'XXX. BONUS PAID FOR A PREDETERMINED-WINNING-COMPLETE HAND THAT
'CONSISTS OF AN ACE AND A KING

'If the user does add a rule to specify that any initial hand
'that consists of an ace and a king has a value of twenty-seven
'points and in most cases is a predetermined-winning-complete
'hand, then, after the user responds to the above-described
'prompt, the BIGS907 software application prompts the user to
''input the odds on the game wager that the dealer will pay the
'player for a predetermined-winning-complete hand that consists
'of an ace and a king'. Here the BIGS907 software application is
'giving the user the opportunity to add a rule to the user-
'defined set of game rules. The rule is. If the player draws a
'predetermined-winning-complete hand consisting of an ace and a
'king, then the dealer will pay to the player the user-defined
'odds on the game wager.

'XXXI. POST-SPLIT-INITIAL HAND CONSISTING OF AN ACE AND A KING

'If the user does allow the player to split pairs, then, after
'the user responds to the above-described prompt, the BIGS907
'software application prompts the user to 'press 1 and enter for
'a post-split-initial hand that consists of an ace and a king is
'a predetermined-winning-complete hand, else press enter'. Here
'the BIGS907 software application is giving the user the
'opportunity to add a rule to the user-defined set of game rules.
'The rule is. A post-split-initial hand consisting of an ace and
'a king is a predetermined-winning-complete hand.

'If the user does not add this rule to the user-defined set of
'game rules, then a post-split-initial hand consisting of an ace
'and a king is not a predetermined-winning-complete hand unless
'another user-defined rule makes that hand a predetermined-
'winning-complete hand. In that event, if the player's post-
'split-initial hand consists of an ace and a king, and if the
'outcome of the game is the player's hand wins, then the dealer
'pays to the player one to one odds on the game wager.

'If the user does add this rule to the user-defined set of game
'rules, then a post-split-initial hand consisting of an ace and a
'king is a predetermined-winning-complete hand. In that event,
'the dealer pays to the player the same odds on the game wager
'for a post-split-initial hand that consists of an ace and a
'king, as the odds on the game wager the dealer does pay the
'player for a initial hand that consists of an ace and a king.

'XXXII. BONUS PAID FOR A PREDETERMINED-WINNING-COMPLETE HAND THAT
'CONSISTS OF A JOKER AND A CARD OF ANY RANK OTHER THAN JOKER

'If the user does add a rule to specify that any initial hand
'that consists of a joker and a card of any rank other than
'joker, has a value of twenty-seven points and is in most cases a
'predetermined-winning-complete hand, then, after the user
'responds to the above-described prompt, the BIGS907 software
'application prompts the user to 'input the odds on the game
'wager the dealer will pay the player for a predetermined-
'winning-complete hand that consists of a joker and a card of any
'rank other than joker.  Here the BIGS907 software application is
'giving the user the opportunity to add a rule to the user-
'defined set of game rules. The rule is. If the player draws a
'predetermined-winning-complete hand consisting of a joker and a
'card of any rank other than joker, then the dealer will pay to
'the player the user-defined odds on the game wager.

'XXXIII. A POST-SPLIT-INITIAL HAND CONSISTING OF A JOKER AND A
'CARD OF ANY RANK OTHER THAN JOKER

'If the user does allow the player to split pairs, then, after
'the user responds to the above-described prompt, the BIGS907
'software application prompts the user to 'press 1 and enter for
'a post-split-initial hand that consists of a joker and a card of
'any rank other than joker is a predetermined-winning-complete
'hand, else press enter'. Here the BIGS907 software application
'is giving the user the opportunity to add a rule to the user-
'defined set of game rules. The rule is. A post-split-initial
'hand consisting of a joker and a card of any rank other than
'joker is a predetermined-winning-complete hand.

'If the user does not add this rule to the user-defined set of
'game rules, then a post-split-initial hand consisting of a joker
'and a card of any rank other than joker is not a predetermined-
'winning-complete hand unless another user-defined rule makes the
'hand a predetermined-winning-complete hand. In that event, if
'the player has a post-split-initial hand consisting of a joker
'and a card of any rank other than joker, and if the outcome of
'the game is the player's post-split-initial hand wins, then the
'dealer pays to the player one to one odds on the game wager.

'If the user does add this rule to the user-defined set of game
'rules, then a post-split-initial hand consisting of a joker and
'a card of any rank other than joker is a predetermined-winning-
'complete hand. In that event, the dealer pays to the player the
'same odds on the game wager for a post-split-initial hand that
'consists of a joker and a  card of any rank other than joker, as
'the odds on the game wager the dealer does pay to the player for
'an initial hand that consists of a joker and a card of any rank
'other than joker.

'XXXIV. THE USER CAN ENTER ANY OF A WIDE RANGE OF NUMBERS TO
'SPECIFY THE ODDS ON THE GAME WAGER THAT THE DEALER WILL PAY TO
'THE PLAYER FOR AN INITIAL HAND THAT IS A PREDETERMINED-WINNING-
'COMPLETE HAND.

'The user can enter any of a wide range of numbers to specify the
'odds on the game wager that the dealer will pay to the player
'for an initial hand that is a predetermined-winning-complete
'hand. If the user does enter negative one, then the dealer will
'pay the player are negative one times the game wager and this is
'the equivalent of the dealer collecting the game wager!  If the
'user does enter negative zero point five, then the dealer will
'pay to the player are negative zero point five times the game
'wager and this is the equivalent of the dealer collecting half
'of the game wager and returning the other half of the game wager
'to the player. If the user does not enter any integer, then the
'dealer will pay the player nothing on the game wager. This is
'the equivalent of the dealer returning the game wager to the
'player. If the user does enter zero point five, then the dealer
'will pay the player one to two odds on the game wager. This is
'the equivalent of the dealer paying the player half of the
'payout normally made for a winning-player hand. If the user does
'enter one, then the odds on the game wager the dealer will pay
'to the player will be one to one odds. This is the equivalent of
'the payout normally made for winning-player hand. If the user
'does enter a number and the value of the number is greater than
'one, then the odds on the game wager the dealer will pay to the
'player will be greater than one to one odds. This is the
'equivalent of a normal payout for a winning-player hand plus a
'bonus payout.

'XXXV. ANY PLAYER HAND WITH A NUMERICAL SUM VALUE OF TWENTY-SEVEN
'POINTS IS A PREDETERMINED-WINNING-COMPLETE HAND

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for n most cases any player hand with a numerical sum
'value of twenty-seven points is a predetermined-winning-complete
'hand, else press enter'. Here the BIGS907 software application
'is giving the user an opportunity to add a rule to the user-
'defined set of game rules. The rule is. If the player's hand
'total is equal to twenty-seven points, then in most cases the
'player's hand is a predetermined-winning-complete hand.

'Adding this rule to the user-defined set of game rules deprives
'the dealer of an opportunity to tie in the event that the player
'achieves a complete hand with a value of twenty-seven points.
'Not adding the rule gives the dealer an opportunity to tie in
'the event that the player draws a complete hand with a value of
'twenty-seven points provided that the player's complete hand
'does not otherwise consist of a predetermined-winning-complete
'hand.

'In some cases, both the player and the dealer draw an initial
'hand that has a numerical sum value of twenty-seven points. In
'that event, a rule added to specify that in most cases a
'particular type of initial hand is a predetermined-winning-
'complete hand takes precedence over a rule added to specify that
'in most cases any player hand that has a numerical sum value of
'twenty-seven points is a predetermined-winning-complete hand.

'XXXVI. IF THE player's HAND TOTAL IS EQUAL TO TWENTY-SEVEN
'POINTS, IF THE DEALER'S HAND TOTAL IS EQUAL TO TWENTY-SEVEN
'POINTS, AND IF NEITHER THE PLAYER'S HAND NOR THE DEALER'S HAND
'IS A PREDETERMINED-WINNING-COMPLETE HAND, THEN THE OUTCOME OF
'THE GAME IS A STALEMATE.

'If the user did not add a rule to specify that any player hand
'with a numerical-sum value of twenty-seven points is a
'predetermined-winning-complete hand, and if the user did add a
'rule selected from a group consisting of the dealer's hand wins
'ties, and the player's hand wins ties, then, after the user
'responds to the above-described prompts, the BIGS907 software
'application prompts the user to 'Press 1 and enter to add a rule
'to specify the following. If the player's hand total is equal to
'twenty-seven points, if the dealer's hand total is equal to
'twenty-seven points, and if neither the player's hand nor the
'dealer's hand is a predetermined-winning-complete hand, then the
'outcome of the game is a stalemate. Else press enter.'. If the
'dealer wins ties, then adding this rule produces a decrease in
'the house edge. If the player wins ties, then adding this rule
'produces an increase in the house edge.

'XXXVII. OUTCOME OF GAMES WHEREIN BOTH THE PLAYER AND THE DEALER
'DRAW AN INITIAL HAND WITH A VALUE OF TWENTY-SEVEN POINTS

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for a player's initial hand with a value of 27 points
'beats a dealer's initial hand with a value of 27 points, else
'press enter'. Here the BIGS907 software application is giving
'the user an opportunity to add a rule to the user-defined set of
'game rules. The rule is. If both the player and the dealer draw
'an initial hand with a value of twenty-seven points, then the
'player's hand is a predetermined-winning-complete hand, and the
'outcome of the game is the player's hand wins.

'XXXVIII. BONUS PAYOUTS FOR PLAYER HANDS THAT HAVE A NUMERICAL-
'SUM VALUE OF TWENTY-SEVEN POINTS AND THAT CONSIST OF A
'PREDETERMINED COMBINATION OF CARDS

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for bonus 27 payouts, else press enter'. Here the BIGS907
'software application is giving the user an opportunity to
'respond to a group of prompts. If the user does press the '1'
'key and the 'enter' key, then the BIGS907 software application
'responds by prompting the player to enter the bonus payout for
'each of a set of eleven combinations of cards. If the user does
'not press the '1' key and the 'enter' key, then the BIGS907
'software application skips this group of prompts. The sum of the
'point values assigned to the cards in each of the eleven
'combinations of cards is equal to twenty-seven points. The
'eleven combinations of cards are six-card hand, seven-card hand,
'eight-card hand, nine-card hand, 8-9-10 mixed suits, 8-9-10 same
'suit, 8-9-10 spades suit, 9-9-9 mixed suits, 9-9-9 same suit,
'9-9-9 mixed suits plus any dealer 9-9, and 9-9-9 same suit plus
'any dealer 9-9.

'Each time the BIGS907 software application prompts the user to
'enter the bonus payout for one of these eleven combinations of
'cards, the user has an opportunity to either choose to enter a
'bonus payout or choose not to enter a bonus payout. In this way,
'the user can select those combinations of cards that when drawn
'by the player will qualify the player for a bonus payout and
'those combinations of cards that when drawn by the player will
'not qualify the player for a bonus payout. If the user does not
'want drawing a particular one of these eleven combinations of
'cards to qualify the player for a bonus payout, then the user
'should press the 'enter' key when the BIGS907 software
'application prompts the user to enter a bonus payout for that
'particular combination of cards. Doing so will set the bonus
'payout for that particular combination of cards to zero. If the
'user does want drawing a particular one of these eleven
'combinations of cards to qualify the player for a bonus payout,
'then the user should enter a positive non-zero number. Doing so
'will set the bonus payout for that particular combination of
'cards to the user-defined number times the game wager.

'If a particular combination of cards does qualify the player for
'a bonus payout, then the dealer pays the player a total payout
'that is equal to the bonus payout plus the regular payout. For
'example, if the user wants the user-defined set of game rules to
'specify a total payout of 3 to 2 odds on the game wager for a
'particular one of these eleven combinations of cards, then the
'user should enter the number 0.5 when the BIGS907 software
'application prompts the user to enter the bonus payout for the
'particular combination of cards. Doing so will set the bonus
'payout for that particular combination of cards to 1 to 2 odds.
'A bonus payout of 1 to 2 odds plus a regular payout of 2 to 2
'odds equals a total payout of 3 to 2 odds. If the user wants the
'user-defined set of game rules to specify a total payout of 2 to
'1 odds on the game wager for a particular one of these eleven
'combinations of cards, then the user should enter the number 1
'when the BIGS907 software application prompts the user to enter
'the bonus payout for that particular combination of cards. Doing
'so will set the bonus payout for that particular combination of
'cards to 1 to 1 odds. A bonus payout of 1 to 1 odds plus a
'regular payout of 1 to 1 odds equals a total payout of 2 to 1
'odds. If the user wants the user-defined set of game rules to
'specify a total payout of 3 to 1 odds on the game wager for a
'particular one of these eleven combinations of cards, then the
'user should enter the number 2 when the BIGS907 software
'application prompts the user to enter the bonus payout for that
'particular combination of cards. Doing so will set the bonus
'payout for that particular combination of cards to 2 to 1 odds.
'A bonus payout of 2 to 1 odds plus a regular payout of 1 to 1
'odds equals a total payout of 3 to 1 odds.

'If the BIGS907 software application prompts the user to enter a
'bonus payout for a particular one of these eleven combinations
'of cards and the user does, then that particular combination of
'cards also becomes a predetermined-winning-complete hand. If the
'user does not enter a bonus payout for a particular one of the
'eleven combinations of cards, then that combination of cards
'does not become a predetermined-winning-complete hand unless
'another user-defined rule makes that combination of cards a
'predetermined-winning-complete hand. For example, if the user
'does add to the user-defined set of game rules a rule to specify
'that in most cases a player hand that has a numerical sum value
'of twenty-seven points is a predetermined-winning-complete hand,
'then each of the eleven combinations of cards would be a
'predetermined-winning-complete hand. This would be true even if
'the user were not to enter a bonus payout for any of these
'eleven combinations of cards. If the user does not want to add a
'rule to specify that the dealer pays a bonus to the player for a
'particular one of the eleven combinations of cards, if another
'user-defined rule does not otherwise make that combination of
'cards a predetermined-winning-complete hand, and if the user
'does want that particular one of the eleven combinations of
'cards to be a predetermined-winning-complete hand, then the user
'can enter a tiny number such as 0.0000001 as the bonus payout
'for that particular combination of cards. If the user does so,
'then that particular combination of cards will be a
'predetermined-winning-complete hand and the dealer will pay a
'negligible bonus to the player for that particular combination
'of cards.

'The group of prompts begins with the following four prompts.

''Enter bonus payout for 6 card 27, else press enter'
''Enter bonus payout for 7 card 27, else press enter'
''Enter bonus payout for 8 card 27, else press enter'
''Enter bonus payout for 9 card 27, else press enter'

'A 6 card 27 is a player's hand consisting of six cards with a
'numerical-sum value of twenty-seven points. A 7 card 27 is a
'player's hand consisting of seven cards with a numerical-sum
'value of twenty-seven points. An 8 card 27 is a player's hand
'consisting of eight cards with a numerical sum value of twenty-
'seven points. A 9 card 27 is a player's hand consisting of nine
'cards with a numerical-sum value of twenty-seven points.

'If the user responds to the above-described prompts by adding at
'least one bonus payout, then the user-defined set of game rules
'calls for the dealer to pay a bonus to the player for drawing a
'six, seven, eight, and/or nine-card hand valued at twenty-seven
'points.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a six, seven, eight, and/
'or nine-card hand valued at twenty-seven points, and if the user
'previously added a rule to specify that the player can split a
'hand consisting of a pair of cards assigned identical ranks,
'then the BIGS907 software application prompts the user to do the
'following.

''Press 1 and enter for bonuses for six, seven, eight, and or
'nine card hands valued at twenty-seven points pay off on split
'hands, else press enter'.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a six, seven, eight, and/
'or nine-card hand valued at twenty-seven points, and if the user
'previously added a rule to specify that the player can double
'down on any number of cards including double down on a hand
'consisting of five, six, seven, and or eight cards, then the
'BIGS907 software application prompts the user to do the
'following.

''Press 1 and enter for bonuses for six, seven, eight, and or
'nine card hands valued at twenty-seven points pay off on double
'down hands, else press enter'.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a six, seven, eight, and/
'or nine-card hand valued at twenty-seven points, then the
'BIGS907 software application also prompts the user to do the
'following.

''Press 1 and enter for the dealer makes bonus payouts a multiple
'of the table minimum on six, seven, eight, and or nine-card
'hands valued at twenty-seven points, else press enter.'

'The group of prompts continues with the following three prompts.

''Enter bonus payout for 8-9-10 mixed suits, else press enter'
''Enter bonus payout for 8-9-10 same suit, else press enter'
''Enter bonus payout for 8-9-10 spades suit, else press enter'

'An 8-9-10 hand is a player's hand consisting of a card bearing
'indicia representative of the rank of eight, a card bearing
'indicia representative of the rank of nine, and a card bearing
'indicia representative of the rank of ten. An 8-9-10 mixed suits
'is an 8-9-10 hand consisting of cards that are not all of the
'same suit. An 8-9-10 same suit is an 8-9-10 hand consisting of
'cards that are all of the same suit and that are not of the
'spades suit. An 8-9-10 spade suit is an 8-9-10 hand consisting
'of cards that are all of the spades suit.

'If the user responds to the above-described prompts by adding at
'least one bonus payout, then the user-defined set of game rules
'calls for the dealer to pay a bonus to the player for an 8-9-10
'hand.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for an 8-9-10 hand, and if the user
'previously added a rule to specify that the player can split a
'hand consisting of a pair of cards assigned identical ranks into
'two post-split hands, then the BIGS907 software application
'prompts the user to do the following.

''Press 1 and enter for bonuses for 8-9-10 hands pay off on split
'hands, else press enter.'

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for an 8-9-10 hand, and if the user
'previously added a rule to specify that the player can double
'down, then the BIGS907 software application prompts the user to
'do the following.

''Press 1 and enter for bonuses for 8-9-10 hands pay off on
'double down hands, else press enter'

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for an 8-9-10 hand, then the BIGS907
'software application prompts the user to do the following.

''Press 1 and enter for the dealer makes bonus payouts a multiple
'of the table minimum on 8-9-10 hands, else press enter'.

'After the user responds to the above-described set of prompts,
'the group of prompts continues with the following prompt.

''Enter bonus payout for 9-9-9 mixed suits, else press enter'

'If the user did previously add a rule to specify that the player
'and the dealer play the game using at least three decks of
'cards, then the BIGS907 software application prompts the user as
'follows.

''Enter bonus payout for 9-9-9 same suit, else press enter'

'If the user did previously add a rule to specify that the player
'and the dealer play the game using at least two decks of cards,
'then the BIGS907 software application prompts the user as
'follows.

''Enter jackpot for 9-9-9 mixed suits and any dealer 9-9, else
'press enter'

'If the user did previously add a rule to specify that the player
'and the dealer play the game using at least three decks of
'cards, then the BIGS907 software application prompts the user as
'follows.

''Enter jackpot for 9-9-9 same suit and any dealer 9-9, else
'press enter'

'A 9-9-9 hand is a player's hand consisting of three cards with
'each card bearing indicia representative of the rank of nine. A
'9-9-9 mixed suits is a 9-9-9 hand consisting of cards that are
'not all of the same suit. A 9-9-9 same suit is a 9-9-9 hand
'consisting of cards that are all of the same suit. A 9-9-9 mixed
'suits and any dealer 9-9 is a 9-9-9 mixed suits and any dealer's
'initial hand consisting of a pair of nines. A 9-9-9 same suit
'and any dealer 9-9 is a 9-9-9 same suit and any dealer's initial
'hand consisting of a pair of nines.

'If the user responds to the above-described prompts by adding at
'least one bonus payout, then the user-defined set of game rules
'calls for the dealer to pay a bonus to the player for drawing a
'9-9-9 hand.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a 9-9-9 hand, and if the
'user previously added a rule to specify that the player can
'split a hand consisting of a pair of cards assigned identical
'point values into two post-split hands, then the BIGS907
'software application prompts the user to do the following.

''Press 1 and enter for bonuses for 9-9-9 hands pay off on split
'hands, else press enter.'

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a 9-9-9 hand, and if the
'user previously added a rule to specify that the player can
'double down, then the BIGS907 software application prompts the
'user to do the following.

''Press 1 and enter for bonuses for 9-9-9 hands pay off on double
'down hands, else press enter'

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a 9-9-9 hand, then the
'BIGS907 software application also prompts the user to do the
'following.

''Press 1 and enter for the dealer makes bonus payouts a multiple
'of the table minimum on 9-9-9 hands, else press enter'.

'Paying a given bonus as a multiple of the table minimum rather
'than as a multiple of the game wager is useful in thwarting
'efforts by card counters to turn the odds of the game in their
'own favor. Because just about every card-counting scheme in
'existence requires the card counter to raise the game wager
'whenever the card count indicates the average-stack composition
'is favorable to the player. If any player does raise the game
'wager, and if the size of the bonus payout is a multiple of the
'table minimum, then the size of the bonus payout in relation to
'the size of the regular payout will shrink. If the size of the
'bonus payout in relation to the size of the regular payout
'shrinks, then the size of the decrease in the house edge caused
'by the bonus payout will shrink. As the size of the decrease in
'the house edge caused by the bonus payout shrinks, the overall
'house edge approaches that of a game with no bonus payout. The
'higher that the house edge would be if there were no bonus
'payout at all, the less likely the card counter will encounter
'an average-stack composition that is favorable to the player. If
'the user does not make a given bonus payout a multiple of the
'table minimum, then the bonus payout will be paid as a multiple
'of the game wager.

'XXXIX. PROCEDURE FOR USING GAME SIMULATION RESULTS TO GO BEYOND
'THE LIMITATIONS OF ABBREVIATED-COMBINATORIAL ANALYSIS

'Abbreviated combinatorial analysis yields data about the
'expected value of the game wager based on the probabilities of
'the occurrence of each of a set of hand totals that are possible
'for the player's complete hand and based on the probabilities of
'the occurrence of each of a set of hand totals that a possible
'for the dealer's complete hand. The probabilities of the
'occurrence of each of a set of hand totals that are possible for
'the player's complete hand are calculated by the BIGS903
'software application and do not include the probabilities of the
'occurrence of five-card-poker hands. The probabilities of the
'occurrence of each of a set of hand totals that are possible for
'the dealer's complete hand are calculated by the BIGS906
'software application and do not include the probabilities of the
'occurrence of five-card-poker hands. However, game simulators
'can provide data about the probabilities of the occurrence of
'five-card-poker hands.

'If an optional embodiment of the double-exposure game of the
'present invention is subject to a predetermined set of game
'rules that specifies any of the following, then data about the
'probabilities of the occurrence of each category of five-card-
'poker hand is needed in order to be able to calculate the
'expected value of the game wager and find the set of
'combination-dependent-playing-strategy tables for the optional
'embodiment. The user-defined set of game rules specifies that
'the dealer pays the player bonuses for winning-player hands that
'make qualifying-five-card-poker hands. The user-defined set of
'game rules specifies that if the player's complete hand includes
'the five cards of a qualifying-five-card-poker hand, and if the
'player's hand total is less than hard twenty-eight, then a
'predetermined outcome does occur. The user-defined set of game
'rules specifies that if the dealer's complete hand includes the
'five cards of a qualifying-five-card-poker hand, and if the
'dealer's hand total is less than hard twenty-eight, then a
'predetermined outcome does occur.

'If data about the probabilities of the occurrence of each
'category of five-card-poker hand is needed to calculate the
'expected value of the game wager and find the set of
'combination-dependent-playing-strategy tables for an optional
'embodiment, then the steps of the following procedure enable the
'user to program the BIGS907 software application to calculate
'the expected value of the game wager and find the set of
'combination-dependent-playing-strategy tables for the optional
'embodiment.

'The first step is: Program the BIGS907 software application to
'calculate the expected value of the game wager and find the set
'of combination-dependent-playing-strategy tables for a first
'version of the optional embodiment of the game of the present
'invention. To do so, make the following modifications to the
'user-defined set of game rules. Omit all rules made for complete
'hands that also make qualifying-five-card-poker hands.

'The second step is: Program the BIGS907 software application to
'calculate the expected value of the game wager and find the set
'of combination-dependent-playing-strategy tables for a second
'version of the optional embodiment of the game of the present
'invention. To do so, make the following modifications to the
'user-defined set of game rules. Modify the user-defined set of
'game rules so that the player only has the option to hit and the
'option to stand. Omit all rules made for complete hands that
'make qualifying-five-card-poker hands.

'If the user-defined set of game rules does allow the player to
'split, then the second step also includes: Program the BIGS907
'software application to calculate the expected value of the game
'wager and find the combination-dependent-basic-strategy table
'for a third version of the optional embodiment of the game of
'the present invention. To do so, make the following
'modifications to the user-defined set of game rules. Modify the
'user-defined set of game rules so that if the player does not
'have a pair, then the player only has the option to hit and the
'option to stand. Modify the user-defined set of game rules so
'that if the player does have a pair, then the player must split
'unless doing so would result in the formation of more than the
'allowed number of post-split hands per player station per round.
'Omit all rules made for complete hands that make qualifying-
'five-card-poker hands.

'The BIGS921 software application enables users to enter manually
'a single strategy for the use of the hit option consisting of a
'combination of a target-numerical sum for the play of the
'player's hard hands and a target-numerical sum for the play of
'the player's soft hands. In response, the BIGS921 software
'application inserts the user-defined strategy for the player's
'use of the hit option into the total-dependent-basic-strategy
'table as the strategy for the play of all player hands and saves
'data about the resulting total-dependent-basic-strategy table to
'a data file. See the comments added to the source code of the
'BIGS921 software application for more details.

'The third step is repeated for each set of combination-
'dependent-playing-strategy tables of the second step. Use the
'BIGS921 software application to generate a set of total-
'dependent-basic-strategy tables. The set of total-dependent-
'basic-strategy tables consists of a total-dependent-basic-
'strategy table for each of the eighty-one-supported strategies
'for the player's use of the hit option that have a reasonable
'chance of being found by the BIGS907 software application to be
'the optimal strategy for the player's use of the hit option for
'at least one of the combinations of card ranks that the user-
'defined set of game rules might assign to the combination of
'cards removed from the stack and dealt face up to form the set
'of hands consisting of the player's initial hand and the
'dealer's initial hand.

'The fourth step is repeated for each total-dependent-basic
'strategy table of each set of total-dependent-basic-strategy
'tables.  The user loads data about the total-dependent-basic-
'strategy table into program memory of the BIGS908 software
'application. The data about the total-dependent-basic-strategy
'table enables the computer-controlled player to play all hands
'using only one of the eighty-one-supported strategies for the
'use of the hit option. The user programs the BIGS908 software
'application to run a simulation of the game of the optional
'embodiment including all of the rules made for complete hands
'that make qualifying-five-card-poker hands.

'The BIGS908 software application sorts data about the
'probabilities of the occurrence of each category of five-card-
'poker hand by the combination of card ranks assigned to the
'combination of cards removed from the stack and dealt face up to
'form the set of hands consisting of the player's initial hand
'and the dealer's initial hand. The user-defined number of rounds
'of play must be large enough so that the BIGS908 software
'application is able to collect many thousands of game simulation
'results for each combination of cards. At the conclusion of the
'game simulation, The BIGS908 software application saves this
'data to a file named with a 'k' character as the file name
'suffix. The BIGS907 software application uses this data to
'calculate the probability of the occurrence of each category of
'five-card-poker hand.

'The fifth step is repeated for each of the game simulations of
'the fourth step: Load data about the game simulation results
'contained in the data file named with a 'k' character as the
'file name suffix into the program memory of the BIGS907 software
'application. Thereby, the user enables the BIGS907 software
'application to calculate the expected value of the game wager
'and find the set of combination-dependent-playing-strategy
'tables for the optional embodiment of the game of the present
'invention.

'XL. ADD RULES MADE FOR COMPLETE HANDS THAT MAKE QUALIFYING-FIVE-
'CARD-POKER HANDS

'In some optional embodiments, the specific set of game rules does
'include rules made for complete hands that include the five cards
'of a qualifying-five-card-poker hand wherein: The qualifying-
'five-card-poker hand is a five-card-poker hand of a rank that is
'at least equal to a minimum rank specified by the specific set of
'game rules, and wherein: The qualifying-five-card-poker hand
'consists of any example of the highest-ranking-five-card-poker
'hand that can be made from any selection of five of the at least
'five cards in a complete hand selected from a group consisting of
'the player's complete hand and the dealer's complete hand.

'In order for the player's complete hand to make a qualifying-
'five-card-poker hand, the player's complete hand must meet the
'following qualifications. The player's complete hand must consist
'of at least five cards. The highest-ranking-five-card-poker hand
'that can be made from any selection of five of the at least five
'cards in the player's complete hand must be of a rank that is at
'least equal to a minimum rank specified by the specific set of
'game rules. If the above-described qualifications are met, then
'the player's complete hand makes a qualifying-five-card-poker
'hand consisting of the player's highest-ranking-five-card-poker
'hand.

'In order for the dealer's complete hand to make a qualifying-
'five-card-poker hand, the dealer's complete hand must meet the
'following qualifications. The dealer's complete hand must consist
'of at least five cards. The highest-ranking-five-card-poker hand
'that can be made from any selection of five of the at least five
'cards in the dealer's complete hand must be of a rank that is at
'least equal to a minimum rank specified by the specific set of
'game rules. If the above-described qualifications are met, then
'the dealer's complete hand makes a qualifying-five-card-poker
'hand consisting of the dealer's highest-ranking-five-card-poker
'hand.

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'Press 1 and
'enter for add rules made for complete hands that make qualifying-
'five-card-poker hands, else press enter'.

'If the user does not intend to add any rules made for complete
'hands that make qualifying-five-card-poker hands, then the user
'should simply press the 'enter' key. In that event, the BIGS907
'software application will skip the following group of prompts and
'the user can skip reading chapters XLI through LI.

'If the user does intend to add at least one rule made for
'complete hands that make qualifying-five-card-poker hands, and
'if the user has not previously programmed the BIGS908 software
'application to run the series of game simulations necessary to
'quantify the probabilities of the occurrence of each category of
'five-card-poker hand, then the user should simply press the
''enter' key and the BIGS907 software application will skip the
'following group of prompts.

'If the user does intend to add at least one rule made for
'complete hands that make qualifying-five-card-poker hands, and
'if the user has previously programmed the BIGS908 software
'application to run the series of game simulations necessary to
'quantify the probabilities of the occurrence of each category of
'five-card-poker hand, then the user should press the '1' key and
'the 'enter' key. If the user does press the '1' key and the
''enter' key, then the BIGS907 software application initiates the
'following group of prompts.

'XLI. A PREDETERMINED SET OF HAND-RANKING RULES

'If the user does add at least one rule made for complete hands
'that make qualifying-five-card-poker hands, then the user-
'defined set of game rules includes a predetermined set of hand-
'ranking rules. Hands are ranked first by category and second by
'individual cards.

'The predetermined set of hand-ranking rules does specify ten
'categories of five-card-poker hand. The ten categories of five-
'card-poker hand are high card, one pair, two pair, three-of-a-
'kind, straight, flush, full-house, four-of-a-kind, straight-
'flush, and five-of-a-kind. A user-defined subset of the
'predetermined set of hand-ranking rules does specify the rank
'assigned to each of the ten categories of five-card-poker hand.

'The predetermined set of hand-ranking rules does rank individual
'cards, so that when arranged from lowest ranking to highest
'ranking the individual cards of each suit are 2, 3, 4, 5, 6, 7,
'8, 9, 10, Jack, Queen, King, and Ace. The predetermined-set of
'hand-ranking rules does specify that an ace can appear as the
'lowest ranking card as when part of a hand selected from a group
'consisting of an Ace-2-3-4-5 straight and an Ace-2-3-4-5
'straight-flush. The predetermined set of hand-ranking rules
'specifies the use of individual card ranks to rank hands in the
'same category. The predetermined set of hand-ranking rules
'specifies the use of suits to determine whether a hand belongs
'to a category of five-card-poker hand selected from a group
'consisting of a flush and a straight-flush.

'The predetermined set of hand-ranking rules does specify the
'step of assigning a wild card value to each joker in a hand, so
'that the point value of said each joker remains the same as
'before, and so that each joker becomes an individual card
'capable of performing a user-defined function. The function
'performed by each joker is specified by a rule selected by the
'user from a group of rules consisting of the bug rule and the
'fully wild rule. If the bug rule is selected, then each joker
'can be used to perform a function selected from a group
'consisting of represent an ace, complete a straight, and
'complete a straight-flush. If the fully wild rule is selected,
'then each joker can represent the rank and suit of any card.

'XLII.  CHOOSE BETWEEN TWO RULES TO SPECIFY THE FUNCTION EACH
'JOKER WILL PERFORM

'If the user-defined set of game rules does specify that the
'composition of each deck includes at least one joker, then the
'above-described group of prompts begins with the BIGS907
'software application prompting the user to "Press 1 and enter
'for (fully wild rule) enables the holder of a hand that consists
'of at least five playing cards to use each joker included in the
'hand to represent the suit and rank of any other card. Else
'press enter for (bug rule) enables the holder of a hand that
'consists of at least five cards to use each joker included in
'the hand to perform a function selected from a group consisting
'of represent an ace, complete a straight, complete a flush, and
'complete a straight-flush."

'The predetermined set of hand-ranking rules does specify the
'step of assigning a wild card value to each joker so that the
'point value assigned to each joker remains the same as before,
'and so that each joker present in a hand consisting of at least
'five cards becomes an individual card capable of performing a
'function. Here the BIGS907 software application is giving the
'user an opportunity to choose between two rules specifying the
'function each joker will perform.

'XLIII. INPUT THE RANK ASSIGNED TO EACH OF NINE CATEGORIES OF
'FIVE-CARD-POKER HAND

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'press enter to
'input the rank of each of nine categories of poker hand. Press 1
'and enter to use default hand-ranking rules'.

'If the user does press the 'enter' key in response to the above-
'described prompt, then the BIGS907 software application
'initiates a series of prompts. The series of prompts enables the
'user to add a subset of rules to the predetermined set of hand
'ranking rules. The subset of rules specifies the rank assigned
'to each of the ten-supported categories of five-card-poker hand.
'The high card category of five-card-poker hand is preset as the
'lowest ranking category. The series of prompts enables the user
'to input the rank of the nine-remaining categories of five-card-
'poker hand.

'The BIGS907 software application begins the series of prompts by
'prompting the user to 'input the rank (1-9) assigned to one
'pair'. Here the BIGS907 software application is prompting the
'user to input the rank of the one pair category of five-card-
'poker hand. Numbers represent ranks. The lower the number is the
'lower the rank.

'The BIGS907 software application continues in a like manner
'until the user has assigned a rank to all of the nine-remaining
'categories of five-card-poker hand. In this way, the BIGS907
'software application provides the user with a software means for
'adding the subset of rules to the predetermined set of hand
'ranking rules.

'If the user does press the '1' key and the 'enter' key, then the
'BIGS907 software application uses the default-hand- ranking
'rules to assign a rank to the ten-supported categories of five-
'card-poker hand. If the user did add the bug rule to specify the
'function each joker will perform, then the default-hand-ranking
'rules assign a rank to each of the ten-supported categories of
'five-card-poker hand so that the order of the ten-supported
'categories of five-card-poker hand from lowest ranking to
'highest ranking is high card, one pair, two pair, three-of-a-
'kind, straight, full-house, flush, four-of-a-kind, straight-
'flush, and five-of-a-kind. If the user did add the fully wild
'rule to specify the function each joker will perform, then the
'default-hand- ranking rules assign a rank to each of the ten-
'supported categories of five-card-poker hand so that the order
'of the ten-supported categories from lowest ranking to highest
'ranking is high card, one pair, two pair, three-of-a-kind,
'straight, full-house, four-of-a-kind, flush, straight-flush, and
'five-of-a-kind.

'If the user-defined set of game rules does not specify that the
'composition of each deck includes at least one joker, and if the
'user does press '1' and 'enter' in response to the above-
'described prompt, then the default-hand-ranking rules used will
'be the same as those given for games wherein the user-defined
'set of game rules does specify that at least one joker is
'included in each deck, and wherein the bug rule applies.

'XLIV. INPUT THE MINIMUM RANK

'After the user responds to the above-described prompts, the
'BIGS907 software application prints the following text to the
'application window. A qualifying-five-card-poker hand is a five-
'card-poker hand of a rank that is at least equal to a minimum
'rank specified by the user-defined set of game rules.
'Subsequently, the BIGS907 software application prompts the user
'to 'input the minimum rank specified by the user-defined set of
'game rules'.

'To help the user respond to the above-described prompt, the
'BIGS907 software application lists the ten-supported categories
'of five-card-poker hand in ascending order from lowest ranking to
'highest ranking in accordance with the user-defined set of hand-
'ranking rules. Each of the ten-supported categories of five-card-
'poker hand is assigned a number from zero to nine. Zero is
'assigned to the lowest ranking category of five-card-poker hand.
'Nine is assigned to the highest ranking category.

'To respond to the above-described prompt, input the number that
'corresponds the rank of the category of five-card-poker hand that
'is equal to the minimum rank specified by the user-defined set of
'game rules.

'XLV. INPUT SIZE OF THE BONUS PAYOUT FOR EACH OF A SET OF
'CATEGORIES OF FIVE-CARD-POKER HAND

'After the user responds to the above-described prompt, the
'BIGS907 software application initiates a series of prompts. The
'series of prompts enables the user to add a subset of rules to
'the user-defined set of game rules. The subset of rules specifies
'the size of the bonus payout made for each of the ten-supported
'categories of five-card-poker hand that have a rank that is at
'least equal to the minimum rank specified by the user-defined set
'of game rules.

'If the prediction made by the player about the uncertain outcome
'of the game is the player's hand wins, if the outcome of the game
'is the player's hand wins, if the player's complete hand includes
'the five cards of a qualifying-five-card-poker hand, and if the
'qualifying-five-card-poker hand is a predetermined combination of
'cards that qualifies the player to receive a bonus payout, then
'the dealer pays the player a bonus.

'XLVI. ANY PLAYER HAND WITH A NUMERICAL SUM VALUE OF LESS THAN
'TWENTY-EIGHT POINTS THAT ALSO MAKES A QUALIFYING-FIVE-CARD-POKER
'HAND

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for any player hand with a numerical sum value of less
'than twenty-eight points that also makes a qualifying-five-card-
'poker hand is a predetermined-winning-complete hand, else press
'enter'. Here the BIGS907 software application is giving the user
'an opportunity to add a rule to the user-defined set of game
'rules. The rule is. Any player hand with a numerical-sum value
'of less than twenty-eight points that also makes a qualifying-
'five-card-poker hand is a predetermined-winning-complete hand.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS907
'software application uses memory elements in array dimension aw
'(81, 104, 104, 2) and memory elements in array dimension aw(81,
'104, 104, 3) to store data about the frequency of the occurrence
'of a player hand with a numerical-sum value of less than twenty-
'eight points that also makes a qualifying-five-card-poker hand.
'With this data, it is possible to calculate the change in the
'expected value of the game wager caused by the addition of a
'rule to specify that any player hand with a numerical-sum value
'of less than twenty-eight points that also makes a qualifying-
'five-card-poker hand is a predetermined-winning-complete hand.

'XLVII. ANY DEALER HAND WITH A NUMERICAL SUM VALUE OF LESS THAN
'TWENTY-EIGHT POINTS THAT ALSO MAKES A QUALIFYING-FIVE-CARD-POKER
'HAND

'After the user responds to the above-described prompts, the
'BIGS907 software application prompts the user to 'press 1 and
'enter for any dealer hand with a numerical sum value of less
'than twenty-eight points that also makes a qualifying-five-card-
'poker hand is a predetermined-winning-complete hand, else press
'enter'. Here the BIGS907 software application is giving the user
'an opportunity to add a rule to the user-defined set of game
'rules. The rule is. If the dealer's hand consists of at least
'five cards with a numerical sum value of less than twenty-eight
'points, and if a qualifying-five-card-poker hand can be made
'from a selection of five of the at least five cards in the
'dealer's hand, then the dealer has a predetermined-winning-
'complete hand.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS907
'software application uses memory elements in array dimension aw
'(81, 104, 104, 0) and memory elements in array dimension aw(81,
'104, 104, 1) to store data about the frequency of the occurrence
'of a dealer hand with a numerical-sum value of less than twenty-
'eight points that also makes a qualifying-five-card-poker hand.
'With this data, it is possible to calculate the change in the
'expected value of the game wager caused by the addition of a
'rule to specify that any dealer hand with a numerical sum value
'of less than twenty-eight points that also makes a qualifying-
'five-card-poker hand is a predetermined-winning-complete hand.

'XLVIII. ANY PLAYER HAND WITH A NUMERICAL SUM VALUE OF TWENTY-
'SEVEN POINTS THAT ALSO MAKES A QUALIFYING-FIVE-CARD-POKER HAND

'If the user does not add a rule to specify that any player hand
'with a numerical sum value of less than twenty-eight points that
'also makes a qualifying-five-card-poker hand is a predetermined-
'winning-complete hand, then the BIGS907 software application
'prompts the user to do the following. 'Press 1 and enter for any
'player hand with a numerical-sum value of twenty-seven points
'that also makes a qualifying-five-card-poker hand is a
'predetermined-winning-complete hand, else press enter'. Here the
'BIGS907 software application is giving the user an opportunity
'to add a rule to the user-defined set of game rules. The rule
'is. If the player's hand consists of at least five cards with a
'numerical sum value of twenty-seven points, and if a qualifying-
'five-card-poker hand can be made from any selection of five of
'the at least five cards in the player's hand, then the player
'has a predetermined-winning-complete hand.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS907
'software application uses memory elements in array dimension aw
'(81, 104, 104, 0) and memory elements in array dimension aw(81,
'104, 104, 1) to store data about the frequency of the occurrence
'of a player hand with a numerical sum value of twenty-seven
'points that also makes a qualifying-five-card-poker hand. With
'this data, it is possible to calculate the change in the
'expected value of the game wager caused by the addition of a
'rule to specify that any player hand with a numerical sum value
'of twenty-seven points that also makes a qualifying-five-card-
'poker hand is a predetermined-winning-complete hand.

'L. THE PLAYER'S POKER HAND MUST OUTRANK THE DEALER'S POKER HAND

'After the user responds to the above-described prompt, the
'BIGS907 software application prompts the user to 'Press 1 and
'enter for player's poker hand must outrank dealer's poker hand,
'else press enter'. Here the BIGS907 software application is
'giving the user the opportunity to add subset of rules to the
'user-defined set of game rules. The subset of rules specifies the
'following. If the dealer's complete hand consists of at least
'five cards, then the player's highest-ranking-five-card-poker
'hand must outrank the dealer's highest-ranking-five-card-poker
'hand is an additional qualification that the player's complete
'hand must meet in order to make a qualifying-five-card-poker
'hand. If the player's complete hand consists of at least five
'cards, then the player's highest-ranking-five-card-poker hand
'must not outrank the dealer's highest-ranking-five-card-poker
'hand is an additional qualification that the dealer's complete
'hand must meet in order to make a qualifying-five-card-poker
'hand.

'L.FOLDER/FILENAME PREFIX OF FILES CONTAINING DATA ABOUT THE
'FREQUENCY OF OCCURRENCE OF EACH CATEGORY OF FIVE-CARD-POKER HAND
'IN A SIMULATED GAME WHEREIN THE COMPUTER-CONTROLLED PLAYER HITS
'AND STANDS

'After the user responds to the above-described series of
'prompts, the BIGS907 software application prompts the user to
''enter the folder/file name prefix of the set of files
'containing data about the frequency of occurrence of each
'category of five-card-poker-hand in a simulated game wherein the
'computer-controlled player only hits and stands'. Here the
'BIGS907 software application is giving the user an opportunity
'to load data about game-simulation results saved to a set of
'data files by the BIGS908 software application. Each data file
'in the set contains the game-simulation results for a different
'one of the eighty-one strategies for the player's use of the hit
'option that have a reasonable chance of being selected by the
'BIGS907 software application as being the best-strategy for at
'least one of the thousands of combinations of card ranks that
'the user-defined set of game rules could assign to the
'combination of cards removed from the stack and dealt face up to
'form the set of hands consisting of the player's initial hand
'and the dealer's initial hand.

'LI.FOLDER/FILENAME PREFIX OF FILES CONTAINING DATA ABOUT THE
'FREQUENCY OF OCCURRENCE OF EACH CATEGORY OF FIVE-CARD-POKER HAND
'IN A SIMULATED GAME WHEREIN THE COMPUTER-CONTROLLED PLAYER
'ALWAYS SPLITS PAIRS, HITS AND STANDS

'If the user did add rules to specify that the player has the
'option to split an initial hand consisting of two playing cards
'assigned identical point values, then after the user responds to
'the above-described prompts, the BIGS907 software application
'prompts the user to 'enter the folder/file name prefix of the
'file containing data about the frequency of occurrence of
'complete hands that make qualifying five-card-poker-hands in a
'simulated game wherein the computer-controlled player always
'splits pairs'. Here the BIGS907 software application is giving
'the user an opportunity to load another set of files containing
'simulation results saved by the BIGS908 software application.
'Each file in the set contains the game-simulation results saved
'by the BIGS908 software application for a different one of the
'eighty-one strategies for the player's use of the hit option
'that have a reasonable chance of being found by the BIGS907
'software application to be the best-strategy for at least one of
'the thousands of combinations of point values that the user-
'defined set of game rules could assign to the combination of
'playing cards removed from the stack and dealt face up to form
'the set of hands consisting of the player's post-split-initial
'hand and the dealer's initial hand.

'LII. PROCEDURE FOR LOADING THE SET OF FILES CONTAINING DATA ABOUT
'THE FREQUENCY OF OCCURRENCE OF EACH CATEGORY OF FIVE-CARD-POKER
'HAND

'After the user responds to the above-described prompts, the
'BIGS907 software application begins to cycle through the eighty-
'one strategies for the player's use of the hit option. For each
'of the eighty-one strategies for the player's use of the hit
'option, the BIGS907 software application prompts the user to
''press 1 and enter to load a file containing data about the
'frequency of occurrence of each rank of five-card-poker hand in
'a simulated game wherein the computer-controlled player stands'
'at a set of target-numerical sums. If the user does press the
''1' key and the 'enter' key in response to the above-described
'prompt, then the BIGS907 software application loads the database
'of game-simulation results contained in the above-described file
'into program memory.

'For each of the eleven-thousand-twenty-five unique combinations
'of card ranks that could be assigned to the cards removed from
'the stack and dealt face up to form the set of hands consisting
'of the player's initial hand and the dealer's initial hand and
'for each of the above-described strategies for the player's use
'of the hit option, the BIGS907 software application calculates
'the expected value of bonuses paid to the player. The BIGS907
'software application uses the memory elements provided by the
'three dimensions of array ns(81, 104, 104) to store the expected
'value of bonuses paid to the player for winning-non-split-player
'hands that make qualifying-five-card-poker hands. The BIGS907
'software application also calculates the expected value of the
'predetermined-winning-complete hands.

'In the user-defined set of game rules allow the player to split
'a pair of cards assigned two identical ranks into two post-split
'hand, then for each of the eleven-thousand-twenty-five unique
'combinations of card ranks that could be assigned to the cards
'removed from the stack and dealt face up to form the set of
'hands consisting of the player's post-split-initial hand and the
'dealer's initial hand and for each of the above-described
'strategies for the player's use of the hit option, the BIGS907
'software application calculates the expected value of bonuses
'paid to the player. The BIGS907 software application uses the
'memory elements provided by the three dimensions of array s(81,
'104, 104) to store the expected value of bonuses paid to the
'player for winning-post-split-player hands that make qualifying-
'five-card-poker hands. The BIGS907 software application also
'calculates the expected value of the predetermined-winning-
'complete hands. The expected value of the game wager is equal to
'the sum of all calculated values.

'LIII. OUTPUT

'After the user responds to the above-described group of prompts,
'the BIGS907 software application automatically creates a brief
'description of the game rules using the following format. 'Open
'(folder/file name prefix + 'i.txt') to see a list of user
'defined game rules'. For example, suppose the user made 'game1'
'the file name prefix. Furthermore, suppose the user made
'J23h23s8d the folder name wherein the BIGS907 software
'application will save files containing application output.  In
'that case, the BIGS907 software application automatically makes
'the following brief description of the game rules. 'Open
'J23h23s8d/game1i.txt to see a list of user defined game rules'.

'After the BIGS907 software application automatically creates a
'brief description of the game rules, the BIGS907 software
'application finishes saving to a first text file all of the text
'appearing in the application window while the user input the set
'of game rules into the BIGS907 software application. The first
'text file is named with an 'i' character as the file name
'suffix. If the user input 'J21h24s8d/game1' as the folder/file
'name prefix to be used to store application output, then the
'BIGS907 software application places a text file named
''game1i.txt' in the folder named J21h24s8d. Afterward, the user
'can open this text file to review the set of game rules input by
'the user.

'After the BIGS907 software application places the first text
'file in the folder, the BIGS907 software application saves a
'first data file. The first data file contains data about the
'user-defined set of game rules. The first data file is named
'with an 'a' character as the file name suffix. For example, if
'the file name prefix is 'game1', then the name of the first data
'file will be 'game1a.dat'. If the user input 'J21h24s8d/game1'
'as the folder/file name prefix to be used to store application
'output, then the BIGS907 software application places the data
'file named 'game1i.txt' in the folder named J21h24s8d. The user
'can load the data stored in this first data file into other
'applications as a means of communicating data about the user-
'defined set of game rules. Other applications will also display
'the brief description of the game rules to enable the user to
'verify that the contents of the correct data file have been
'loaded into program memory.

'After the BIGS907 software application saves the first data
'file, the BIGS907 software application calculates the expected
'value of the game wager and finds the set of combination-
'dependent-playing-strategy tables for an optional embodiment of
'the game of the present invention that is subject to the user-
'defined set of game rules. The BIGS907 software application
'takes about one minute to do so.

'Afterward, the BIGS907 software application saves the set
'combination-dependent-playing-strategy tables for an optional
'embodiment of the game of the present invention that is subject
'to the user-defined set of game rules to a second text file.
'The second text file is named with an 'o' character as the file
'name suffix. For example, if the file name prefix is 'game1',
'then the name of  the second text file will be 'game1o.txt'. If
'the user input J21h24s8d/game1' as the folder/file name prefix
'to be used to store application output, then the BIGS907
'software application places the text file named 'game1o.txt' in
'the folder named J21h24s8d.

'Afterward, the user can open this second text file and review
'the contents. The contents consists of a set of tables. The set
'of tables displays the best strategy for the play of the
'player's hand and the corresponding expected value of the game
'wager for each combination of ranks that could be the ranks of
'the cards removed from the stack and dealt face up to form the
'set of hands consisting of the player's initial hand and the
'dealer's initial hand.
'
'The BIGS907 software application also saves a second data file.
'The second data file is named with a 'b' character as the file
'name suffix. For example, if the file name prefix is 'game1',
'then the name of the data file will be 'game1b.dat'. If the user
'input 'J21h24s8d/game1' as the folder/file name prefix to be
'used to store application output, then the BIGS907 software
'application places the data file named 'game1b.dat' in the
'folder named J21h24s8d. The user can load this file into other
'applications as a means of communicating data about the best
'strategy for the play of the player's hand and the corresponding
'expected value of the game wager for each combination of ranks
'that could be the ranks of the cards removed from the stack and
'dealt face up to form a set of hands consisting of the player's
'initial hand and the dealer's initial hand.

'The user-defined set of game rules assigns card ranks to the
'combination of cards removed from the stack and dealt face up to
'form the set of hands consisting of the player's initial hand
'and the dealer's initial hand. Thousands of combinations of card
'ranks are possible. For each possible combination of point
'values, the BIGS907 software application performs an abbreviated
'combinatorial analysis to calculate the expected value of the
'game wager for each of the strategies for the play of the
'player's hand that has at least a chance of being optimal, and
'saves the results to a third data file. The third data file is
'named with a 't' character as the file name suffix. For example,
'if the file name prefix is 'game1', then the name of the data
'file will be 'game1t.dat'. If the user input 'J21h24s8d/game1'
'as the folder/file name prefix to be used to store application
'output, then the BIGS907 software application places the data
'file named 'game1t.dat' in the folder named J21h24s8d.

'The BIGS907 software application calculates the probability of
'the occurrence of each of the possible combinations of card
'ranks and saves the results to a fourth data file. The fourth
'data file is named with a 'p' character as the file name suffix.
'For example, if the file name prefix is 'game1', then the name
'of the data file will be 'game1p.dat'. If the user input
''J21h24s8d/game1' as the folder/file name prefix to be used to
'store application output, then the BIGS907 software application
'places the data file named 'game1p.dat' in the folder named
'J21h24s8d.

'The BIGS921 software application is capable of using the data
'contained in the first, third and fourth data files to produce a
'set of files containing data about the total-dependent-basic-
'strategy table for an optional embodiment of the game of the
'present invention that is subject to the user-defined set of
'game rules. See the comments added to the source code of the
'BIGS921 software application for more information.

_TITLE "BIGS907 software application"
TYPE bsrules
    c0 AS INTEGER
    c1 AS INTEGER
    c2 AS INTEGER
    c3 AS INTEGER
    c4 AS INTEGER
    c5 AS INTEGER
    c6 AS INTEGER
    c7 AS INTEGER
    c8 AS INTEGER
    c9 AS INTEGER
    cT AS INTEGER
    cJ AS INTEGER
    cQ AS INTEGER
    cK AS INTEGER
    jojo AS INTEGER
    jojopo AS SINGLE
    joanca AS INTEGER
    joancash AS INTEGER
    joancapo AS SINGLE
    jowi AS INTEGER
    d28p AS INTEGER
    bshw AS INTEGER
    dhf AS INTEGER
    j AS INTEGER
    dwt AS INTEGER
    dbc AS INTEGER
    hole AS INTEGER
    nchw AS INTEGER
    ls AS INTEGER
    early AS INTEGER
    splt AS INTEGER
    nsh AS INTEGER
    rsa AS INTEGER
    das AS INTEGER
    dh AS INTEGER
    ld AS INTEGER
    ins AS INTEGER
    bigslick AS SINGLE
    dsa AS INTEGER
    bssh AS INTEGER
    deck AS INTEGER
    shf AS INTEGER
    immed AS INTEGER
    pbd AS INTEGER
    b27po AS INTEGER
    ms999 AS SINGLE
    ss999 AS SINGLE
    sp999 AS SINGLE
    jp999 AS SINGLE
    po6c27 AS SINGLE
    po7c27 AS SINGLE
    po8c27 AS SINGLE
    po9c27 AS SINGLE
    ms89T AS SINGLE
    ss89T AS SINGLE
    sp89T AS SINGLE
    dd AS INTEGER
    dd3 AS INTEGER
    dd4 AS INTEGER
    dd5 AS INTEGER
    dd6 AS INTEGER
    dd7 AS INTEGER
    dd8 AS INTEGER
    description AS STRING * 80
END TYPE
TYPE bs
    far AS INTEGER
    sar AS INTEGER
    r AS INTEGER
    hit AS SINGLE
END TYPE
TYPE qbase
    dat0 AS SINGLE
    dat1 AS SINGLE
    dat2 AS SINGLE
    dat3 AS SINGLE
    dat4 AS SINGLE
    dat5 AS SINGLE
    dat6 AS SINGLE
    dat7 AS SINGLE
    dat8 AS SINGLE
    dat9 AS SINGLE
    dat10 AS SINGLE
    dat11 AS SINGLE
    dat12 AS SINGLE
    dat13 AS SINGLE
    dat14 AS SINGLE
END TYPE
TYPE ibase
    idat AS LONG
END TYPE
DIM g(84) AS INTEGER
DIM h(84) AS INTEGER
DIM splithands(13, 104) AS SINGLE
DIM sd AS bsrules
DIM num AS bs
DIM database AS qbase
DIM idatabase AS ibase
DIM hit(104, 104) AS SINGLE
DIM sar(104, 104) AS INTEGER
DIM far(104, 104) AS INTEGER
DIM br(104, 104) AS INTEGER
DIM dmult(23) AS INTEGER
DIM dadd(23) AS INTEGER
DIM dp(23) AS SINGLE
DIM f(81, 32) AS SINGLE
DIM card(28) AS INTEGER
DIM aq(104, 104, 84) AS SINGLE
DIM dd(3 TO 8) AS INTEGER
DIM ptm(3) AS INTEGER
DIM pbr(104, 104, 81, 32) AS SINGLE
DIM pfar(104, 104, 81, 32) AS SINGLE
DIM psar(104, 104, 81, 32) AS SINGLE
DIM dbr(104, 104, 27, 14) AS SINGLE
DIM dfar(104, 104, 27, 14) AS SINGLE
DIM dsar(104, 104, 27, 14) AS SINGLE
DIM mc(48) AS SINGLE
DIM df(14) AS SINGLE
DIM mv(5) AS INTEGER
DIM mc27po(11) AS SINGLE
DIM prob(104, 104) AS SINGLE
DIM pc1 AS INTEGER
DIM pc2 AS INTEGER
DIM dc1 AS INTEGER
DIM dc2 AS INTEGER
DIM iphr(104, 104, 11, 2) AS LONG
DIM phpo(9) AS SINGLE
DIM s(81, 104, 104) AS SINGLE
DIM ns(81, 104, 104) AS SINGLE
DIM aw(81, 104, 104, 3) AS SINGLE
DIM pshc(7, 2) AS DOUBLE
DIM x(5) AS DOUBLE
DIM y(5) AS DOUBLE
GOTO 226
888 IF pc1 <= pc2 THEN
    pn% = pc1 / 2 * (27 - pc1) + pc2
END IF
IF pc1 > pc2 THEN
    pn% = pc2 / 2 * (27 - pc2) + pc1
END IF
x = 0
IF split% <> 1 THEN hit(pn%, dn%) = -3
IF split% = 1 THEN splithands(pc2, dn%) = -3
IF dc1 <> 9 OR dc2 <> 9 THEN
    po999 = ms999 * mc27po(1) + ss999 * mc27po(2)
    IF po999 <> 0 THEN
        po999 = po999 / (mc27po(1) + mc27po(2))
    END IF
END IF
IF dc1 = 9 AND dc2 = 9 THEN
    po999 = jp999 * mc27po(3) + sp999 * mc27po(11)
    IF po999 <> 0 THEN
        po999 = po999 / (mc27po(3) + mc27po(11))
    END IF
END IF
po89T = ms89T * mc27po(8) + ss89T * mc27po(9) + sp89T * mc27po(10)
IF po89T <> 0 THEN
    po89T = po89T / (mc27po(8) + mc27po(9) + mc27po(10))
END IF
FOR v = 15 TO 27
    FOR w = 5 TO 13
        IF w + 14 < v THEN w = v - 14
        x = x + 1
        q# = 0: q1# = 0: q2# = 0
        IF immed% <> 1 AND jowi% <> 1 THEN
            f(x, 12) = f(x, 12) + f(x, 25)
            f(x, 25) = 0
        END IF
        IF po999 = 0 OR (split% = 1 AND sh999% <> 1) THEN
            IF dc1 <> 9 OR dc2 <> 9 THEN
                f(x, 12) = f(x, 12) + f(x, 26) * (mc27po(1) + mc27po(2))
                f(x, 26) = f(x, 26) - f(x, 26) * (mc27po(1) + mc27po(2))
            END IF
            IF dc1 = 9 OR dc2 = 9 THEN
                f(x, 12) = f(x, 12) + f(x, 26) * (mc27po(3) + mc27po(11))
                f(x, 26) = f(x, 26) - f(x, 26) * (mc27po(3) + mc27po(11))
            END IF
        END IF
        IF po89T = 0 OR (split% = 1 AND sh89T% <> 1) THEN
            f(x, 12) = f(x, 12) + f(x, 27) * (mc27po(8) + mc27po(9) + mc27po(10))
            f(x, 27) = f(x, 27) - f(x, 27) * (mc27po(8) + mc27po(9) + mc27po(10))
        END IF
        IF mc27po(4) = 0 OR (split% = 1 AND shmc27% <> 1) THEN
            f(x, 12) = f(x, 12) + f(x, 28)
            f(x, 28) = 0
        END IF
        IF mc27po(5) = 0 OR (split% = 1 AND shmc27% <> 1) THEN
            f(x, 12) = f(x, 12) + f(x, 29)
            f(x, 29) = 0
        END IF
        IF mc27po(6) = 0 OR (split% = 1 AND shmc27% <> 1) THEN
            f(x, 12) = f(x, 12) + f(x, 30)
            f(x, 30) = 0
        END IF
        IF mc27po(7) = 0 OR (split% = 1 AND shmc27% <> 1) THEN
            f(x, 12) = f(x, 12) + f(x, 31)
            f(x, 31) = 0
        END IF
        FOR y = 0 TO 24
            IF y > 12 THEN
                FOR z = 0 TO 27 - dhf%
                    IF pbc% <> 1 AND pbc% <> 2 THEN
                        q# = q# - f(x, y) * df(z)
                    END IF
                    IF pbc% = 1 OR pbc% = 2 THEN
                        IF 27 - dhf% - z < y - 12 THEN
                            q# = q# - f(x, y) * df(z)
                        END IF
                        IF 27 - dhf% - z = y - 12 THEN
                            IF dwt% = 1 THEN
                                q# = q# - f(x, y) * df(z)
                            END IF
                            IF dwt% = 2 AND pbc% = 2 THEN
                                q# = q# + f(x, y) * df(z)
                            END IF
                        END IF
                        IF 27 - dhf% - z > y - 12 AND pbc% = 2 THEN
                            q# = q# + f(x, y) * df(z)
                        END IF
                    END IF
                NEXT z
                FOR z = 1 TO dhf% - 15
                    IF dbc% <> 1 AND dbc% <> 2 THEN
                        q# = q# - f(x, y) * df(27 - dhf% + z)
                    END IF
                    IF dbc% = 1 OR dbc% = 2 THEN
                        IF z + 27 < y + 15 THEN
                            q# = q# - f(x, y) * df(27 - dhf% + z)
                        END IF
                        IF z + 27 = y + 15 THEN
                            IF dwt% = 1 THEN
                                q# = q# - f(x, y) * df(27 - dhf% + z)
                            END IF
                            IF dwt% = 2 AND dbc% = 2 THEN
                                q# = q# + f(x, y) * df(27 - dhf% + z)
                            END IF
                        END IF
                        IF z + 27 > y + 15 AND dbc% = 2 THEN
                            q# = q# + f(x, y) * df(27 - dhf% + z)
                        END IF
                    END IF
                NEXT z
            END IF
            IF y < 13 THEN
                FOR z = 2 TO dhf% - 15
                    IF debc% <> 1 AND debc% <> 2 THEN
                        q# = q# + f(x, y) * df(27 - dhf% + z)
                    END IF
                    IF debc% = 1 OR debc% = 2 THEN
                        IF z < 12 - y AND debc% = 2 THEN
                            q# = q# - f(x, y) * df(27 - dhf% + z)
                        END IF
                        IF z = 12 - y THEN
                            IF dwt% = 1 AND debc% = 2 THEN
                                q# = q# - f(x, y) * df(27 - dhf% + z)
                            END IF
                            IF dwt% = 2 THEN
                                q# = q# + f(x, y) * df(27 - dhf% + z)
                            END IF
                        END IF
                        IF z > 12 - y THEN
                            q# = q# + f(x, y) * df(27 - dhf% + z)
                        END IF
                    END IF
                NEXT z
                FOR z = 0 TO 28 - dhf%
                    IF z = 28 - dhf% THEN
                        IF y = 12 THEN
                            IF immed% = 1 THEN q# = q# + f(x, y) * df(z)
                            IF immed% <> 1 THEN
                                q# = q# + f(x, y) * (df(z) - df(z) * (d28p% + d28w%))
                            END IF
                        END IF
                        IF y < 12 THEN
                            IF debc% <> 1 AND debc% <> 2 THEN
                                q# = q# + f(x, y) * (df(z) - df(z) * (d28p% + d28w%))
                            END IF
                            IF debc% = 1 OR debc% = 2 THEN
                                IF d28p% = 1 THEN
                                    IF z + dhf% - 27 < 12 - y THEN
                                        q# = q# - f(x, y) * (df(z) - df(z) * (d28p% - d28w%))
                                    END IF
                                    IF z + dhf% - 27 = 12 - y THEN
                                        IF dwt% = 1 THEN
                                            q# = q# - f(x, y) * (df(z) - df(z) * (d28p% - d28w%))
                                        END IF
                                        IF dwt% = 2 THEN
                                            q# = q# + f(x, y) * (df(z) - df(z) * (d28p% + d28w%))
                                        END IF
                                    END IF
                                END IF
                                IF d28p% = 0 THEN
                                    IF z + dhf% - 27 < 12 - y AND debc% = 2 THEN
                                        q# = q# - f(x, y) * df(z)
                                    END IF
                                    IF z + dhf% - 27 = 12 - y THEN
                                        IF dwt% = 1 AND debc% = 2 THEN
                                            q# = q# - f(x, y) * df(z)
                                        END IF
                                        IF dwt% = 2 THEN
                                            q# = q# + f(x, y) * df(z)
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                    IF z < 28 - dhf% THEN
                        IF z < y + 15 - dhf% THEN q# = q# + f(x, y) * df(z)
                        IF z > y + 15 - dhf% THEN q# = q# - f(x, y) * df(z)
                    END IF
                    IF z < 27 - dhf% AND z = y + 15 - dhf% THEN
                        IF dwt% = 1 THEN q# = q# - f(x, y) * df(z)
                        IF dwt% = 2 THEN q# = q# + f(x, y) * df(z)
                    END IF
                    IF z = 27 - dhf% AND y = 12 THEN
                        IF immed% = 1 THEN q# = q# + f(x, y) * df(z)
                        IF immed% <> 1 THEN
                            IF dwt% = 1 AND p27d27push% <> 1 THEN
                                q# = q# - f(x, y) * df(z)
                            END IF
                            IF dwt% = 2 AND p27d27push% <> 1 THEN
                                q# = q# + f(x, y) * df(z)
                            END IF
                        END IF
                    END IF
                NEXT z
            END IF
        NEXT y
        q# = q# + f(x, 25) + f(x, 26) * (po999 + 1) + f(x, 27) * (po89T + 1)
        q# = q# + f(x, 28) * (mc27po(4) + 1) + f(x, 29) * (mc27po(5) + 1)
        q# = q# + f(x, 30) * (mc27po(6) + 1) + f(x, 31) * mc27po(7)
        IF nchw% = 1 THEN q# = q# + f(x, 32) ELSE q# = q# + f(x, 32) * q#

        ' The BIGS907 software application takes into account the
        ' change in the expected value of the player's use of the hit
        ' option caused by the addition of rules to specify that if player's
        ' hand consists of at least five playing cards with a
        ' numerical sum value of less than twenty-eight points and
        ' a qualifying-five-card-poker hand can be made from a selection of
        ' five of the at least five playing cards, then the player's hand
        ' is a predetermined-winning-complete hand.

        ' However, the player both less likely to bust and more like to make
        ' a qualifying-five-card-poker hand when playing cards assigned low
        ' point values are relatively abundant and playing cards assigned
        ' high point values are relatively scarce. These facts suggests that
        ' the expected value of the complete hand that would have been built
        ' had the rules not made the player's hand into a
        ' predetermined-winning-complete hand is actually higher than the expect
        ' value of any other hand built from the same combination of point
        ' values using the same strategy for the player's use of the hit
        ' option.

        IF split% <> 1 THEN
            IF qph27wa% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 0)
                q# = q# + q1# * (1 - q#)
            END IF
            IF qfcphw% = 1 AND dqfcphw% <> 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 2)
                q# = q# + q1# * (1 - q#)
            END IF
            IF qfcphw% <> 1 AND qph27wa% <> 1 AND dqfcphw% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 0)
                q# = q# + q1# * (-1 - q#)
            END IF
            IF qfcphw% = 1 AND dqfcphw% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 0)
                q2# = q2# + aw(x, pn%, dn%, 2)
                q# = q# + q1# * (-1 - q#) + q2# * (1 - q#)
            END IF
            q# = q# + ns(x, pn%, dn%)
            IF dn% > 13 AND dn% < 27 THEN
                IF dc1 + dc2 < j + 2 THEN
                    IF pn% < 14 OR pn% > 26 THEN
                        IF pc1 + pc2 < hu% THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                    IF pn% > 13 AND pn% < 27 THEN
                        IF pc1 + pc2 < su% - 14 THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF dn% < 14 OR dn% > 26 THEN
                IF dc1 + dc2 < dhf% THEN
                    IF pn% < 14 OR pn% > 26 THEN
                        IF pc1 + pc2 < hu% THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                    IF pn% > 13 AND pn% < 27 THEN
                        IF pc1 + pc2 < su% - 14 THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            aq(pn%, dn%, x) = q#
            IF q# >= hit(pn%, dn%) AND v > pc1 + pc2 - 1 THEN
                hit(pn%, dn%) = q#
                br(pn%, dn%) = x
            END IF
        END IF
        IF split% = 1 THEN
            IF qph27wa% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 1)
                q# = q# + q1# * (1 - q#)
            END IF
            IF qfcphw% = 1 AND dqfcphw% <> 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 3)
                q# = q# + q1# * (1 - q#)
            END IF
            IF qfcphw% <> 1 AND qph27wa% <> 1 AND dqfcphw% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 1)
                q# = q# + q1# * (-1 - q#)
            END IF
            IF qfcphw% = 1 AND dqfcphw% = 1 THEN
                q1# = q1# + aw(x, pn%, dn%, 3)
                q2# = q1# + aw(x, pn%, dn%, 1)
                q# = q# + q1# * (-1 - q#) + q2# * (1 - q#)
            END IF
            q# = q# + s(x, pn%, dn%)
            IF dn% > 13 AND dn% < 27 THEN
                IF dc1 + dc2 < j + 2 THEN
                    IF pn% < 14 OR pn% > 26 THEN
                        IF pc1 + pc2 < hu% THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                    IF pn% > 13 AND pn% < 27 THEN
                        IF pc1 + pc2 < su% - 14 THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF dn% < 14 OR dn% > 26 THEN
                IF dc1 + dc2 < dhf% THEN
                    IF pn% < 14 OR pn% > 26 THEN
                        IF pc1 + pc2 < hu% THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                    IF pn% > 13 AND pn% < 27 THEN
                        IF pc1 + pc2 < su% - 14 THEN
                            IF v > hu% OR w > su% - 14 THEN
                                q# = -1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF pc2 < pc1 THEN
                IF q# > splithands(pc2, dn%) THEN
                    splithands(pc2, dn%) = q#
                    far(pn%, dn%) = x
                END IF
            END IF
            IF pc2 = pc1 THEN
                IF q# > splithands(pc2, dn%) THEN
                    splithands(pc2, dn%) = q#
                    far(pn%, dn%) = x
                    sar(pn%, dn%) = x
                END IF
            END IF
            IF pc1 < pc2 THEN
                IF q# > splithands(pc2, dn%) THEN
                    splithands(pc2, dn%) = q#
                    sar(pn%, dn%) = x
                END IF
            END IF
        END IF
        IF (pc1 - 1) * (pc2 - 1) = 0 THEN
            IF pc1 + pc2 > 6 AND w < 6 THEN
                IF x < 46 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 7 AND w < 7 THEN
                IF x < 54 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 8 AND w < 8 THEN
                IF x < 61 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 9 AND w < 9 THEN
                IF x < 67 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 10 AND w < 10 THEN
                IF x < 72 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 11 AND w < 11 THEN
                IF x < 76 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 12 AND w < 12 THEN
                IF x < 79 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 13 AND w < 13 THEN
                IF x < 81 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
        END IF
        IF (pc1 - 1) * (pc2 - 1) <> 0 THEN
            IF pc1 + pc2 > 5 AND w < 6 THEN
                IF x < 46 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 6 AND w < 7 THEN
                IF x < 54 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 7 AND w < 8 THEN
                IF x < 61 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 8 AND w < 9 THEN
                IF x < 67 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 9 AND w < 10 THEN
                IF x < 72 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 10 AND w < 11 THEN
                IF x < 76 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 11 AND w < 12 THEN
                IF x < 79 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
            IF pc1 + pc2 > 12 AND w < 13 THEN
                IF x < 81 THEN
                    x = x + 1
                    w = w + 1
                    IF split% <> 1 THEN aq(pn%, dn%, x) = q#
                END IF
            END IF
        END IF
NEXT w: NEXT v: account# = 0: q# = 0
IF split% <> 1 THEN
    standr% = br(pn%, dn%): stand = hit(pn%, dn%)
END IF
RETURN
222 FOR x = 0 TO 13
    dadd(0) = pc1 + pc2 + x: dmult(0) = (pc1 - 1) * (pc2 - 1) * (x - 1)
    IF jo27% = 1 AND x = 0 THEN f(0, 25) = f(0, 25) + mc(x) / mc(14)
    IF jo27% <> 1 OR x <> 0 THEN
        IF dmult(0) <> 0 THEN
            IF dadd(0) > 14 THEN
                f(0, dadd(0) - 15) = f(0, dadd(0) - 15) + mc(x) / mc(14)
            END IF
            IF dadd(0) < 15 THEN
                f(0, 0) = f(0, 0) + mc(x) / mc(14)
            END IF
        END IF
        IF dmult(0) = 0 THEN
            IF dadd(0) > 1 THEN
                IF dadd(0) < 15 THEN
                    f(0, dadd(0) - 2) = f(0, dadd(0) - 2) + mc(x) / mc(14)
                END IF
                IF dadd(0) > 14 THEN
                    f(0, dadd(0) - 15) = f(0, dadd(0) - 15) + mc(x) / mc(14)
                END IF
            END IF
        END IF
        IF dmult(0) = 0 THEN
            IF dadd(0) < 2 THEN
                f(0, 0) = f(0, 0) + mc(x) / mc(14)
            END IF
        END IF
    END IF
    IF dadd(0) = 27 THEN
        IF dd89T% = 1 THEN
            IF pc1 * pc2 * x = 720 THEN
                po89T = ms89T * mc27po(8) + ss89T * mc27po(9)
                po89T = po89T + sp89T * mc27po(10)
                q1# = mc27po(8) + mc27po(9) + mc27po(10)
                IF po89T <> 0 THEN
                    po89T = po89T / q1#
                END IF
                po89T = po89T / (ptm(2) + 1)
                f(0, 26) = (po89T + 1) * mc(x) / mc(14)
                f(0, 26) = f(0, 26) * q1#
                f(0, dadd(0) - 15) = mc(x) / mc(14) * (1 - q1#)
            END IF
        END IF
        IF dd999% = 1 THEN
            IF pc1 * pc2 * x = 729 THEN
                IF dc1 <> 9 OR dc2 <> 9 THEN
                    po999 = ms999 * mc27po(1) + ss999 * mc27po(2)
                    q1# = mc27po(1) + mc27po(2)
                    IF po999 <> 0 THEN
                        po999 = po999 / q1#
                    END IF
                    po999 = po999 / (ptm(3) + 1)
                    f(0, 27) = (po999 + 1) * mc(x) / mc(14) * q1#
                    f(0, dadd(0) - 15) = mc(x) / mc(14) * (1 - q1#)
                END IF
                IF dc1 = 9 AND dc2 = 9 THEN
                    po999 = jp999 * mc27po(3) + sp999 * mc27po(11)
                    q1# = mc27po(3) + mc27po(11)
                    IF po999 <> 0 THEN
                        po999 = po999 / q1#
                    END IF
                    po999 = po999 / (ptm(3) + 1)
                    f(0, 27) = (po999 + 1) * mc(x) / mc(14) * q1#
                    f(0, dadd(0) - 15) = mc(x) / mc(14) * (1 - q1#)
                END IF
            END IF
        END IF
    END IF
NEXT x
FOR y = 0 TO 24
    IF y > 12 THEN
        FOR z = 0 TO 27 - dhf%
            IF pbc% <> 1 AND pbc% <> 2 THEN
                q# = q# - f(0, y) * df(z)
            END IF
            IF pbc% = 1 OR pbc% = 2 THEN
                IF 27 - dhf% - z < y - 12 THEN
                    q# = q# - f(0, y) * df(z)
                END IF
                IF 27 - dhf% - z = y - 12 THEN
                    IF dwt% = 1 THEN
                        q# = q# - f(0, y) * df(z)
                    END IF
                    IF dwt% = 2 AND pbc% = 2 THEN
                        q# = q# + f(0, y) * df(z)
                    END IF
                END IF
                IF 27 - dhf% - z > y - 12 AND pbc% = 2 THEN
                    q# = q# + f(0, y) * df(z)
                END IF
            END IF
        NEXT z
        FOR z = 1 TO dhf% - 15
            IF dbc% <> 1 AND dbc% <> 2 THEN
                q# = q# - f(0, y) * df(27 - dhf% + z)
            END IF
            IF dbc% = 1 OR dbc% = 2 THEN
                IF z + 27 < y + 15 THEN
                    q# = q# - f(0, y) * df(27 - dhf% + z)
                END IF
                IF z + 27 = y + 15 THEN
                    IF dwt% = 1 THEN
                        q# = q# - f(0, y) * df(27 - dhf% + z)
                    END IF
                    IF dwt% = 2 AND dbc% = 2 THEN
                        q# = q# + f(0, y) * df(27 - dhf% + z)
                    END IF
                END IF
                IF z + 27 > y + 15 AND dbc% = 2 THEN
                    q# = q# + f(0, y) * df(27 - dhf% + z)
                END IF
            END IF
        NEXT z
    END IF
    IF y < 13 THEN
        FOR z = 2 TO dhf% - 15
            IF debc% <> 1 AND debc% <> 2 THEN
                q# = q# + f(0, y) * df(27 - dhf% + z)
                IF jo27% = 1 AND y = 12 THEN
                    q# = q# + f(0, 25) * df(27 - dhf% + z)
                END IF
            END IF
            IF debc% = 1 OR debc% = 2 THEN
                IF z < 12 - y AND debc% = 2 THEN
                    q# = q# - f(0, y) * df(27 - dhf% + z)
                END IF
                IF z = 12 - y THEN
                    IF dwt% = 1 AND debc% = 2 THEN
                        q# = q# - f(0, y) * df(27 - dhf% + z)
                    END IF
                    IF dwt% = 2 THEN
                        q# = q# + f(0, y) * df(27 - dhf% + z)
                    END IF
                END IF
                IF z > 12 - y THEN
                    q# = q# + f(x, y) * df(27 - dhf% + z)
                    IF jo27% = 1 AND y = 12 THEN
                        q# = q# + f(0, 25) * df(27 - dhf% + z)
                    END IF
                END IF
            END IF
        NEXT z
        FOR z = 0 TO 28 - dhf%
            IF z = 28 - dhf% THEN
                IF y = 12 THEN
                    IF immed% = 1 THEN
                        q# = q# + f(0, y) * df(z)
                    END IF
                    IF immed% <> 1 THEN
                        q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                    END IF
                    IF jo27% = 1 THEN
                        IF immed% = 1 OR jowi% = 1 THEN
                            q# = q# + f(0, 25) * df(z)
                        END IF
                        IF immed% <> 1 AND jowi% <> 1 THEN
                            q# = q# + f(0, 25) * (df(z) - df(z) * (d28p% + d28w%))
                        END IF
                    END IF
                END IF
                IF y < 12 THEN
                    IF debc% <> 1 AND debc% <> 2 THEN
                        q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                    END IF
                    IF debc% = 1 OR debc% = 2 THEN
                        IF d28p% = 1 THEN
                            IF z + dhf% - 27 < 12 - y THEN
                                q# = q# - f(0, y) * (df(z) - df(z) * (d28p% - d28w%))
                            END IF
                            IF z + dhf% - 27 = 12 - y THEN
                                IF dwt% = 1 THEN
                                    q# = q# - f(0, y) * (df(z) - df(z) * (d28p% - d28w%))
                                END IF
                                IF dwt% = 2 THEN
                                    q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                                END IF
                            END IF
                        END IF
                        IF d28p% = 0 THEN
                            IF z + dhf% - 27 < 12 - y AND debc% = 2 THEN
                                q# = q# - f(0, y) * df(z)
                            END IF
                            IF z + dhf% - 27 = 12 - y THEN
                                IF dwt% = 1 AND debc% = 2 THEN
                                    q# = q# - f(0, y) * df(z)
                                END IF
                                IF dwt% = 2 THEN
                                    q# = q# + f(0, y) * df(z)
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF z < 28 - dhf% THEN
                IF z < y + 15 - dhf% THEN
                    q# = q# + f(0, y) * df(z)
                    IF y = 12 AND jo27% = 1 THEN
                        q# = q# + f(0, 25) * df(z)
                    END IF
                END IF
            END IF
            IF z < 28 - dhf% THEN
                IF z > y + 15 - dhf% THEN
                    q# = q# - f(0, y) * df(z)
                END IF
            END IF
            IF z < 27 - dhf% AND z = y + 15 - dhf% THEN
                IF dwt% = 1 THEN q# = q# - f(0, y) * df(z)
                IF dwt% = 2 THEN q# = q# + f(0, y) * df(z)
            END IF
            IF z = 27 - dhf% AND y = 12 THEN
                IF immed% = 1 THEN q# = q# + f(0, y) * df(z)
                IF immed% <> 1 THEN
                    IF dwt% = 1 AND p27d27push% <> 1 THEN
                        q# = q# - f(0, y) * df(z)
                    END IF
                    IF dwt% = 2 AND p27d27push% <> 1 THEN
                        q# = q# + f(0, y) * df(z)
                    END IF
                END IF
                IF jo27% = 1 THEN
                    IF immed% = 1 OR jowi% = 1 THEN
                        q# = q# + f(0, 25) * df(z)
                    END IF
                    IF immed% <> 1 AND jowi% <> 1 THEN
                        IF dwt% = 1 AND p27d27push% <> 1 THEN
                            q# = q# - f(0, 25) * df(z)
                        END IF
                        IF dwt% = 2 AND p27d27push% <> 1 THEN
                            q# = q# + f(0, 25) * df(z)
                        END IF
                    END IF
                END IF
            END IF
        NEXT z
    END IF
NEXT y
q# = q# + f(0, 26) + f(0, 27)
IF split% = 1 THEN q# = 2 * q#
IF split% <> 1 THEN
    q# = 2 * q#: aq(pn%, dn%, 84) = q#
    IF q# > hit(pn%, dn%) THEN
        hit(pn%, dn%) = q#: br(pn%, dn%) = 84
    END IF
    ddown = q#
END IF
IF split% = 1 THEN
    IF q# * splitprob# > splithands(pc2, dn%) THEN
        IF pc1 > pc2 THEN
            splithands(pc2, dn%) = q# * splitprob#
            far(pn%, dn%) = 84
        END IF
        IF pc2 = pc1 THEN
            splithands(pc2, dn%) = q# * splitprob#
            far(pn%, dn%) = 84
            sar(pn%, dn%) = 84
        END IF
        IF pc2 > pc1 THEN
            splithands(pc2, dn%) = q# * splitprob#
            sar(pn%, dn%) = 84
        END IF
    END IF
END IF
RETURN
234 IF (split% <> 1 AND ls% = 1) THEN
    q# = -.5
    aq(pn%, dn%, 83) = q#
    IF q# > hit(pn%, dn%) THEN
        hit(pn%, dn%) = q#
        br(pn%, dn%) = 83
    END IF
    srndr = q#
END IF
RETURN
1111 ERASE pshc
REM calculates average number of post-split-hands and average number of pairs
REM that occur after the player finishes splitting pairs in a game wherein;
REM the rules allow the player to split to a maximum of two post-split hands.
FOR x = 0 TO 1
    x(x) = mc(pc1) - x
    IF x(x) < 0 THEN x(x) = 0
NEXT x
FOR y = 0 TO 1
    y(y) = mc(14) - y
NEXT y
pshc(1, 0) = (1 - x(0) / y(0)) * (1 - x(0) / y(1))
pshc(1, 1) = 2 * pshc(1, 0)
pshc(2, 0) = 2 * (1 - x(0) / y(0)) * x(0) / y(1)
pshc(2, 1) = 2 * pshc(2, 0)
pshc(2, 2) = pshc(2, 0) * 1
pshc(3, 0) = x(0) / y(0) * x(1) / y(1)
pshc(3, 1) = 2 * pshc(3, 0)
pshc(3, 2) = pshc(3, 0) * 2
FOR z = 1 TO 3
    pshc(0, 1) = pshc(0, 1) + pshc(z, 1)
    pshc(0, 2) = pshc(0, 2) + pshc(z, 2)
NEXT z
RETURN
1313 ERASE pshc
REM calculates average number of post-split-hands and average number of pairs
REM that occur after the player finishes splitting pairs in a game wherein;
REM the rules allow the player to split to a maximum of three post-split hands.
FOR x = 0 TO 3
    x(x) = mc(pc1) - x
    IF x(x) < 0 THEN x(x) = 0
NEXT x
FOR y = 0 TO 3
    y(y) = mc(14) - y
NEXT y
pshc(1, 0) = (1 - x(0) / y(0)) * (1 - x(0) / y(1))
pshc(1, 1) = 2 * pshc(1, 0)
pshc(2, 0) = 2 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * (1 - x(0) / y(2)) * x(0) / y(3)
pshc(2, 1) = 3 * pshc(2, 0)
pshc(3, 0) = 5 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * x(0) / y(2) * x(1) / y(3)
pshc(3, 1) = 3 * pshc(3, 0)
pshc(3, 2) = pshc(3, 0) * 1
pshc(4, 0) = 4 * (1 - x(0) / y(0)) * x(0) / y(1) * x(1) / y(2) * x(2) / y(3)
pshc(4, 1) = 3 * pshc(4, 0)
pshc(4, 2) = pshc(4, 0) * 2
pshc(5, 0) = x(0) / y(0) * x(1) / y(1) * x(2) / y(2) * x(3) / y(3)
pshc(5, 1) = 3 * pshc(5, 0)
pshc(5, 2) = pshc(5, 0) * 3
FOR z = 1 TO 5
    pshc(0, 1) = pshc(0, 1) + pshc(z, 1)
    pshc(0, 2) = pshc(0, 2) + pshc(z, 2)
NEXT z
RETURN
4343 ERASE pshc
REM calculates average number of post-split-hands and average number of pairs
REM that occur after the player finishes splitting pairs in a game wherein;
REM the rules allow the player to split to a maximum of four post-split hands.
FOR x = 0 TO 5
    x(x) = mc(pc1) - x
    IF x(x) < 0 THEN x(x) = 0
NEXT x
FOR y = 0 TO 5
    y(y) = mc(14) - y
NEXT y
pshc(1, 0) = (1 - x(0) / y(0)) * (1 - x(0) / y(1))
pshc(1, 1) = 2 * pshc(1, 0)
pshc(2, 0) = 2 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * (1 - x(0) / y(2)) * x(0) / y(3)
pshc(2, 1) = 3 * pshc(2, 0)
pshc(3, 0) = 5 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * (1 - x(0) / y(2))
pshc(3, 0) = pshc(3, 0) * (1 - x(0) / y(3)) * x(0) / y(4) * x(1) / y(5)
pshc(3, 1) = 4 * pshc(3, 0)
pshc(4, 0) = 14 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * (1 - x(0) / y(2))
pshc(4, 0) = pshc(4, 0) * x(0) / y(3) * x(1) / y(4) * x(2) / y(5)
pshc(4, 1) = 4 * pshc(4, 0)
pshc(4, 2) = pshc(4, 0) * 1
pshc(5, 0) = 14 * (1 - x(0) / y(0)) * (1 - x(0) / y(1)) * x(0) / y(2)
pshc(5, 0) = pshc(5, 0) * x(1) / y(3) * x(2) / y(4) * x(3) / y(5)
pshc(5, 1) = 4 * pshc(5, 0)
pshc(5, 2) = pshc(5, 0) * 2
pshc(6, 0) = 6 * (1 - x(0) / y(0)) * x(0) / y(1) * x(1) / y(2) * x(2) / y(3)
pshc(6, 0) = pshc(6, 0) * x(3) / y(4) * x(4) / y(5)
pshc(6, 1) = 4 * pshc(6, 0)
pshc(6, 2) = pshc(6, 0) * 3
pshc(7, 0) = x(0) / y(0) * x(1) / y(1) * x(2) / y(2) * x(3) / y(3) * x(4) / y(4) * x(5) / y(5)
pshc(7, 1) = 4 * pshc(7, 0)
pshc(7, 2) = pshc(7, 0) * 4
FOR z = 1 TO 7
    pshc(0, 0) = pshc(0, 0) + pshc(z, 0)
    pshc(0, 1) = pshc(0, 1) + pshc(z, 1)
    pshc(0, 2) = pshc(0, 2) + pshc(z, 2)
    REM PRINT pshc(0, 0); pshc(0, 1); pshc(0, 2) / pshc(0, 1): SLEEP 2
NEXT z
RETURN
226 CLS:
PRINT "The BIGS907 software application enables ";
PRINT "the user to do the following."
PRINT "Load into program memory databases of player-";
PRINT "finish probabilities saved to a"
PRINT "set of data files by the BIGS903 software ";
PRINT "application. Load into program"
PRINT "memory databases of dealer-finish probabilities ";
PRINT "saved to a set of files by"
PRINT "the BIGS906 software application. Load into ";
PRINT "program memory data about the"
PRINT "user-defined subset of game rules saved to a ";
PRINT "data file by the BIGS903"
PRINT "software application. Input a user-defined ";
PRINT "set of game rules consisting of"
PRINT "all of the remaining game rules required to ";
PRINT "play a double exposure game."
PRINT "Perform an abbreviated combinatorial analysis ";
PRINT "based on the user-defined set"
PRINT "of game rules. Thereby, calculate the expected ";
PRINT "value of the game wager and"
PRINT "find the set of combination-dependent-playing-";
PRINT "strategy-tables for a"
PRINT "double exposure game that is subject to the ";
PRINT "user-defined set of game"
PRINT "rules. In a double exposure game, the dealer ";
PRINT "forms the dealer's"
PRINT "initial hand by dealing two cards face up."
PRINT " "

p$ = "     15/A515/A615/A715/A815/A915/AT15/AJ15/AQ15/AK16/A516/A616/A7"
p$ = p$ + "16/A816/A916/AT16/AJ16/AQ16/AK17/A517/A617/A717/A817/A917/AT"
p$ = p$ + "17/AJ17/AQ17/AK18/A518/A618/A718/A818/A918/AT18/AJ18/AQ18/AK"
p$ = p$ + "19/A519/A619/A719/A819/A919/AT19/AJ19/AQ19/AK20/A620/A720/A8"
p$ = p$ + "20/A920/AT20/AJ20/AQ20/AK21/A721/A821/A921/AT21/AJ21/AQ21/AK"
p$ = p$ + "22/A822/A922/AT22/AJ22/AQ22/AK23/A923/AT23/AJ23/AQ23/AK24/AT"
p$ = p$ + "24/AJ24/AQ24/AK25/AJ25/AQ25/AK26/AQ26/AK27/AKSplitSrndrDDown"

o$ = "     Stand15/A615/A715/A815/A915/AT15/AJ15/AQ15/AK16/A516/A616/A7"
o$ = o$ + "16/A816/A916/AT16/AJ16/AQ16/AK17/A517/A617/A717/A817/A917/AT"
o$ = o$ + "17/AJ17/AQ17/AK18/A518/A618/A718/A818/A918/AT18/AJ18/AQ18/AK"
o$ = o$ + "19/A519/A619/A719/A819/A919/AT19/AJ19/AQ19/AK20/A620/A720/A8"
o$ = o$ + "20/A920/AT20/AJ20/AQ20/AK21/A721/A821/A921/AT21/AJ21/AQ21/AK"
o$ = o$ + "22/A822/A922/AT22/AJ22/AQ22/AK23/A923/AT23/AJ23/AQ23/AK24/AT"
o$ = o$ + "24/AJ24/AQ24/AK25/AJ25/AQ25/AK26/AQ26/AK27/AKSplitSrndrDDown"

n$ = "     Stand15   15   15   15   15   15   15   15   16   16   16   "
n$ = n$ + "16   16   16   16   16   16   17   17   17   17   17   17   "
n$ = n$ + "17   17   17   18   18   18   18   18   18   18   18   18   "
n$ = n$ + "19   19   19   19   19   19   19   19   19   20   20   20   "
n$ = n$ + "20   20   20   20   20   21   21   21   21   21   21   21   "
n$ = n$ + "22   22   22   22   22   22   23   23   23   23   23   24   "
n$ = n$ + "24   24   24   25   25   25   26   26   27   SplitSrndrDDown"

999 PRINT "enter the 'folder/filename prefix' of the files"
PRINT "to be used to store application output."
INPUT files$
PRINT " "
69 PRINT "enter the 'folder/filename prefix' of the files"
PRINT "containing the databases of player finish probabilities "
PRINT "to be loaded into program memory."
INPUT fp$
PRINT " "
PRINT "enter the 'folder/filename prefix' of the files"
PRINT "containing the databases of dealer finish probabilities "
PRINT "to be loaded into program memory."
INPUT dfp$
PRINT " "
' START OF A SOFTWARE MEANS FOR LOADING A USER-DEFINED
' SUBSET OF GAME RULES SAVED BY THE BIGS903 SOFTWARE APPLICATION
v$ = fp$ + "a.dat"
OPEN v$ FOR RANDOM AS #1 LEN = LEN(sd)
GET #1, , sd
card(0) = sd.c0
card(1) = sd.c1
card(2) = sd.c2
card(3) = sd.c3
card(4) = sd.c4
card(5) = sd.c5
card(6) = sd.c6
card(7) = sd.c7
card(8) = sd.c8
card(9) = sd.c9
card(10) = sd.cT
card(11) = sd.cJ
card(12) = sd.cQ
card(13) = sd.cK
jojo% = sd.jojo
jojopo = sd.jojopo
joanca% = sd.joanca
joancash% = sd.joancash
joancapo = sd.joancapo
jo27% = sd.jowi
d28p% = sd.d28p
bshw% = sd.bshw
dhf% = sd.dhf
j = sd.j
dwt% = sd.dwt
dbc% = sd.dbc
nchw% = sd.nchw
ls% = sd.ls
splt% = sd.splt
most% = sd.nsh
rsa% = sd.rsa
das% = sd.das
dh% = sd.dh
ld% = sd.ld
bigslick = sd.bigslick
dsa% = sd.dsa
bssh% = sd.bssh
deck% = sd.deck
shf = sd.shf
immed% = sd.immed
pbd% = sd.pbd
b27po% = sd.b27po
ms999 = sd.ms999
ss999 = sd.ss999
sp999 = sd.sp999
jp999 = sd.jp999
mc27po(4) = sd.po6c27
mc27po(5) = sd.po7c27
mc27po(6) = sd.po8c27
mc27po(7) = sd.po9c27
ms89T = sd.ms89T
ss89T = sd.ss89T
sp89T = sd.sp89T
dd% = sd.dd
dd(3) = sd.dd3
dd(4) = sd.dd4
dd(5) = sd.dd5
dd(6) = sd.dd6
dd(7) = sd.dd7
dd(8) = sd.dd8
q$ = sd.description
CLOSE #1
card(14) = card(0) + card(1) + card(2) + card(3)
card(14) = card(14) + card(4) + card(5) + card(6)
card(14) = card(14) + card(7) + card(8) + card(9)
card(14) = card(14) + card(10) + card(11) + card(12) + card(13)
PRINT "the description of the databases reads as follows:"
PRINT q$
PRINT "if this is acceptable type 'y' and press enter,";
PRINT " else press enter "
INPUT ans$
IF ans$ <> "y" THEN
    GOTO 69
END IF
' END OF A SOFTWARE MEANS FOR LOADING A SET OF GAME RULES
' SAVED BY THE BIGS903 SOFTWARE APPLICATION.
OPEN files$ + "i.txt" FOR OUTPUT AS #1
PRINT #1, "BIGS907 enables users to study a subset of ";
PRINT #1, "Finnish 27 games wherein"
PRINT #1, "the dealer forms the dealer's initial hand by ";
PRINT #1, "dealing two playing cards"
PRINT #1, "face up."
PRINT #1, " "
PRINT #1, "This text file provides a record of the user's responses "
PRINT #1, "to prompts for user input made by the";
PRINT #1, "BIGS907 software application."
PRINT #1, " "
PRINT #1, "enter the 'folder/filename prefix' of the files"
PRINT #1, "to be used to store application output."
PRINT #1, files$
PRINT #1, " "
PRINT #1, "enter the 'folder/filename prefix' of the files"
PRINT #1, "containing the databases of player finish probabilities "
PRINT #1, "to be loaded into program memory."
PRINT #1, fp$
PRINT #1, " "
PRINT #1, "enter the 'folder/filename prefix' of the files"
PRINT #1, "containing the databases of dealer finish probabilities "
PRINT #1, "to be loaded into program memory."
PRINT #1, dfp$
PRINT #1, " "
PRINT #1, "the description of the databases reads as follows: "
PRINT #1, q$
PRINT #1, " "
PRINT #1, "if this is acceptable type 'y' and press enter,";
PRINT #1, " else press enter "
PRINT #1, ans$
PRINT #1, " "
CLOSE #1
v$ = dfp$ + "e.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 27
            FOR f = 0 TO 14
                w = w + 1
                GET #1, w, database
                dbr(x * 15 + 0, y, r, f) = database.dat0
                dbr(x * 15 + 1, y, r, f) = database.dat1
                dbr(x * 15 + 2, y, r, f) = database.dat2
                dbr(x * 15 + 3, y, r, f) = database.dat3
                dbr(x * 15 + 4, y, r, f) = database.dat4
                dbr(x * 15 + 5, y, r, f) = database.dat5
                dbr(x * 15 + 6, y, r, f) = database.dat6
                dbr(x * 15 + 7, y, r, f) = database.dat7
                dbr(x * 15 + 8, y, r, f) = database.dat8
                dbr(x * 15 + 9, y, r, f) = database.dat9
                dbr(x * 15 + 10, y, r, f) = database.dat10
                dbr(x * 15 + 11, y, r, f) = database.dat11
                dbr(x * 15 + 12, y, r, f) = database.dat12
                dbr(x * 15 + 13, y, r, f) = database.dat13
                dbr(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
v$ = fp$ + "q.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 81
            FOR f = 0 TO 32
                w = w + 1
                GET #1, w, database
                pbr(x * 15 + 0, y, r, f) = database.dat0
                pbr(x * 15 + 1, y, r, f) = database.dat1
                pbr(x * 15 + 2, y, r, f) = database.dat2
                pbr(x * 15 + 3, y, r, f) = database.dat3
                pbr(x * 15 + 4, y, r, f) = database.dat4
                pbr(x * 15 + 5, y, r, f) = database.dat5
                pbr(x * 15 + 6, y, r, f) = database.dat6
                pbr(x * 15 + 7, y, r, f) = database.dat7
                pbr(x * 15 + 8, y, r, f) = database.dat8
                pbr(x * 15 + 9, y, r, f) = database.dat9
                pbr(x * 15 + 10, y, r, f) = database.dat10
                pbr(x * 15 + 11, y, r, f) = database.dat11
                pbr(x * 15 + 12, y, r, f) = database.dat12
                pbr(x * 15 + 13, y, r, f) = database.dat13
                pbr(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
v$ = dfp$ + "f.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 27
            FOR f = 0 TO 14
                w = w + 1
                GET #1, w, database
                dfar(x * 15 + 0, y, r, f) = database.dat0
                dfar(x * 15 + 1, y, r, f) = database.dat1
                dfar(x * 15 + 2, y, r, f) = database.dat2
                dfar(x * 15 + 3, y, r, f) = database.dat3
                dfar(x * 15 + 4, y, r, f) = database.dat4
                dfar(x * 15 + 5, y, r, f) = database.dat5
                dfar(x * 15 + 6, y, r, f) = database.dat6
                dfar(x * 15 + 7, y, r, f) = database.dat7
                dfar(x * 15 + 8, y, r, f) = database.dat8
                dfar(x * 15 + 9, y, r, f) = database.dat9
                dfar(x * 15 + 10, y, r, f) = database.dat10
                dfar(x * 15 + 11, y, r, f) = database.dat11
                dfar(x * 15 + 12, y, r, f) = database.dat12
                dfar(x * 15 + 13, y, r, f) = database.dat13
                dfar(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
v$ = fp$ + "r.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 81
            FOR f = 0 TO 32
                w = w + 1
                GET #1, w, database
                pfar(x * 15 + 0, y, r, f) = database.dat0
                pfar(x * 15 + 1, y, r, f) = database.dat1
                pfar(x * 15 + 2, y, r, f) = database.dat2
                pfar(x * 15 + 3, y, r, f) = database.dat3
                pfar(x * 15 + 4, y, r, f) = database.dat4
                pfar(x * 15 + 5, y, r, f) = database.dat5
                pfar(x * 15 + 6, y, r, f) = database.dat6
                pfar(x * 15 + 7, y, r, f) = database.dat7
                pfar(x * 15 + 8, y, r, f) = database.dat8
                pfar(x * 15 + 9, y, r, f) = database.dat9
                pfar(x * 15 + 10, y, r, f) = database.dat10
                pfar(x * 15 + 11, y, r, f) = database.dat11
                pfar(x * 15 + 12, y, r, f) = database.dat12
                pfar(x * 15 + 13, y, r, f) = database.dat13
                pfar(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
v$ = dfp$ + "g.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 27
            FOR f = 0 TO 14
                w = w + 1
                GET #1, w, database
                dsar(x * 15 + 0, y, r, f) = database.dat0
                dsar(x * 15 + 1, y, r, f) = database.dat1
                dsar(x * 15 + 2, y, r, f) = database.dat2
                dsar(x * 15 + 3, y, r, f) = database.dat3
                dsar(x * 15 + 4, y, r, f) = database.dat4
                dsar(x * 15 + 5, y, r, f) = database.dat5
                dsar(x * 15 + 6, y, r, f) = database.dat6
                dsar(x * 15 + 7, y, r, f) = database.dat7
                dsar(x * 15 + 8, y, r, f) = database.dat8
                dsar(x * 15 + 9, y, r, f) = database.dat9
                dsar(x * 15 + 10, y, r, f) = database.dat10
                dsar(x * 15 + 11, y, r, f) = database.dat11
                dsar(x * 15 + 12, y, r, f) = database.dat12
                dsar(x * 15 + 13, y, r, f) = database.dat13
                dsar(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
v$ = fp$ + "s.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR r = 0 TO 81
            FOR f = 0 TO 32
                w = w + 1
                GET #1, w, database
                psar(x * 15 + 0, y, r, f) = database.dat0
                psar(x * 15 + 1, y, r, f) = database.dat1
                psar(x * 15 + 2, y, r, f) = database.dat2
                psar(x * 15 + 3, y, r, f) = database.dat3
                psar(x * 15 + 4, y, r, f) = database.dat4
                psar(x * 15 + 5, y, r, f) = database.dat5
                psar(x * 15 + 6, y, r, f) = database.dat6
                psar(x * 15 + 7, y, r, f) = database.dat7
                psar(x * 15 + 8, y, r, f) = database.dat8
                psar(x * 15 + 9, y, r, f) = database.dat9
                psar(x * 15 + 10, y, r, f) = database.dat10
                psar(x * 15 + 11, y, r, f) = database.dat11
                psar(x * 15 + 12, y, r, f) = database.dat12
                psar(x * 15 + 13, y, r, f) = database.dat13
                psar(x * 15 + 14, y, r, f) = database.dat14
            NEXT f
        NEXT r
    NEXT y
NEXT x
CLOSE #1
PRINT " "
' START OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT "input the maximum percentage of the stack of cards"
PRINT "remaining in the shoe when the dealer reshuffles (15-99) "
INPUT shf
PRINT " "
PRINT "input hard total that the dealer must stand at (19 - 24) "
INPUT dhf%
PRINT "input soft total that the dealer must stand at (";
PRINT USING "##"; dhf%;: PRINT " - 25) "
INPUT j: j = j - 15
PRINT " "
PRINT "input the hard total that the player must stand at ";
PRINT "in games wherein,"
PRINT "upon the dealer's turn, the dealer will draw at least ";
PRINT "one additional card"
PRINT "to the dealer's-initial hand, else press enter."
INPUT hu%
PRINT " "
PRINT "input the soft total that the player must stand at ";
PRINT "in games wherein,"
PRINT "upon the dealer's turn, the dealer will draw at least ";
PRINT "one additional card"
PRINT "to the dealer's-initial hand, else press enter."
INPUT su%
PRINT " "
PRINT "add one of three rules to specify the outcome of games wherein"
PRINT "a tie-score contest does occur."
PRINT " "
PRINT "press enter to add a rule to specify ";
PRINT "a nobody-wins-ties contest occurs."
PRINT "press 1 and enter to add a rule to specify ";
PRINT "a dealer-wins ties contest occurs."
PRINT "press 2 and enter to add a rule to specify ";
PRINT "a player-wins-ties contest occurs."
INPUT dwt%
PRINT " "
PRINT "add one of three rules to specify the outcome of games wherein"
PRINT "a player-bust contest does occur."
PRINT " "
PRINT "press enter to add a rule to specify ";
PRINT "a player-bust-loss contest occurs."
PRINT "press 1 and enter to add a rule to specify ";
PRINT "a player-bust-push contest occurs."
PRINT "press 2 and enter to add a rule to specify ";
PRINT "a player-bust-win contest occurs."
INPUT pbc%
PRINT " "
PRINT "add one of three rules to specify the outcome of games wherein"
PRINT "a dealer-bust contest does occur."
PRINT " "
PRINT "press enter to add a rule to specify ";
PRINT "a dealer-bust-loss contest occurs."
PRINT "press 1 and enter to add a rule to specify ";
PRINT "a dealer-bust-push contest occurs."
PRINT "press 2 and enter to add a rule to specify ";
PRINT "a dealer-bust-win contest occurs."
INPUT debc%
PRINT " "
PRINT "add one of three rules to specify the outcome of games wherein"
PRINT "a double-bust contest does occur."
PRINT " "
PRINT "press enter to add a rule to specify ";
PRINT "a double-bust-loss contest occurs."
PRINT "press 1 and enter to add a rule to specify ";
PRINT "a double-bust-push contest occurs."
PRINT "press 2 and enter to add a rule to specify ";
PRINT "a double-bust-win contest occurs."
INPUT dbc%
PRINT " "
PRINT "add one of three rules to specify the outcome of games wherein"
PRINT "the dealer's hand total does equal twenty-eight points,"
PRINT "and wherein the dealer bust does occur."
PRINT ""
PRINT "press enter to add a rule to specify the outcome ";
PRINT "conforms to normal rules"
PRINT "press 1 and enter to add a rule to specify the outcome ";
PRINT "is a stalemate."
PRINT "press 2 and enter to add a rule to specify the outcome ";
PRINT "is the dealer's hand wins."
INPUT d28p%
IF d28p% <> 1 AND d28p% <> 2 THEN
    d28p% = 0
    d28w% = 0
END IF
IF d28p% = 1 THEN
    d28p% = 1
    d28w% = 0
END IF
IF d28p% = 2 THEN
    d28p% = 1
    d28w% = 1
END IF
PRINT " "
IF card(0) > 0 THEN
    PRINT "press 1 and enter for an initial hand ";
    PRINT "that consists of"
    PRINT "a pair of jokers ";
    PRINT "has a value of twenty-seven points,"
    PRINT "and in most cases ";
    PRINT "is a predetermined-winning-complete hand,"
    PRINT "else press enter "
    INPUT jojo%
    PRINT " "
END IF
PRINT "press 1 and enter for an initial hand ";
PRINT "that consists of "
PRINT "an ace and a king ";
PRINT "has a value of twenty-seven points,"
PRINT "and in most cases ";
PRINT "is a predetermined-winning-complete hand, "
PRINT "else press enter "
INPUT bshw%
PRINT " "
IF card(0) > 0 THEN
    PRINT "press 1 and enter for an initial hand ";
    PRINT "that consists of "
    PRINT "a joker and a card of any rank other than joker"
    PRINT "has a value of twenty-seven points, ";
    PRINT "and, in most cases, "
    PRINT "is a predetermined-winning-complete hand,"
    PRINT "else press enter "
    INPUT joanca%
    PRINT " "
END IF
IF jo27% = 1 AND card(0) > 0 THEN
    PRINT "press 1 and enter for in most cases any ";
    PRINT "player hand that includes"
    PRINT "at least one joker is a ";
    PRINT "predetermined-winning-complete hand,"
    PRINT "else press enter "
    INPUT jowi%
    PRINT " "
END IF
PRINT "press 1 and enter for any player hand consisting of nine cards "
PRINT "with numerical sum value of less than twenty-eight points"
PRINT "is a predetermined-winning-complete hand, else press enter "
INPUT nchw%
PRINT " "
PRINT "press 1 and enter for allow the player to surrender,";
PRINT " else press enter "
INPUT ls%
PRINT " "
PRINT "press 1 and enter for allow the player to double down,";
PRINT " else press enter"
INPUT dbl%
PRINT " "
IF dbl% <> 1 THEN
    dh% = 1
    ld% = 15
END IF
ERASE dd
dd% = 0
IF dbl% = 1 THEN
    PRINT "press 1 and enter to restrict";
    PRINT " the player's use of double down option"
    PRINT "to those hands wherein the player's";
    PRINT " hand total is equal to one of"
    PRINT "a user-defined set of hand totals, "
    PRINT "else press enter "
    INPUT dh%
    PRINT ""
    IF dh% = 1 THEN
        PRINT "press enter to use default restrictions "
        PRINT "press 1 and enter to use alternate restrictions "
        INPUT alr%
        PRINT ""
    END IF
    IF alr% = 1 THEN dh% = 2
    IF dh% = 1 THEN
        PRINT "enter an integer to define a number of ";
        PRINT "points as the lower limit"
        PRINT "of the user-defined set of hand totals and";
        PRINT " in so doing make the upper limit"
        PRINT "of the user-defined set of hand totals equal";
        PRINT " to fourteen points. For example,"
        PRINT "enter 12 for 12/13/14 only, enter 13 for 13/14 only "
        INPUT ld%
        PRINT ""
    END IF
    IF dh% = 2 THEN
        PRINT "enter an integer to define a number";
        PRINT " of points as the lower limit"
        PRINT "of the user-defined set of hand totals and";
        PRINT " in so doing make the upper limit"
        PRINT "of the user-defined set of hand totals equal";
        PRINT " to twenty-seven points minus"
        PRINT "the lower limit of the user-defined set";
        PRINT " of hand totals. For example,"
        PRINT "enter 13, 12, 11, 10, or 9 for 13-14,"
        PRINT " 12-15, 11-16, 10-17, or 9-18 only "
        dh% = 2
        INPUT ld%
        PRINT " "
    END IF
    IF dh% = 0 OR ld% < 15 THEN
        PRINT "press 1 and enter for double down on ";
        PRINT "more than two cards, else press enter "
        INPUT dd%
        PRINT " "
    END IF
    IF dd% = 1 THEN
        FOR x = 3 TO 8
            PRINT "press 1 and enter for double down on ";
            PRINT x; " cards, else press enter "
            INPUT dd(x)
            PRINT " "
        NEXT x
    END IF
END IF
IF dh% < 1 OR dh% > 2 THEN dh% = 0: ld% = 1
PRINT "press 1 and enter for allow the player to split,";
PRINT " else press enter "
INPUT splt%
PRINT ""
IF splt% = 1 THEN
    PRINT "press 1 and enter to split every pair,";
    PRINT " else press enter "
    INPUT ep%
    PRINT " "
    IF dbl% = 1 THEN
        PRINT "press 1 and enter for allow the player to";
        PRINT " double down after a split,"
        PRINT "else press enter "
        INPUT das%
        PRINT " "
    END IF
    PRINT "enter the maximum number of post-split hands";
    PRINT " per player position per round "
    INPUT most%
    PRINT " "
    IF most% > 2 THEN
        PRINT "press 1 and enter for allow player to";
        PRINT " re-split aces,"
        PRINT "else press enter "
        INPUT rsa%
        PRINT " "
    END IF
    PRINT "press 1 and enter for allow player to draw to split aces,"
    PRINT "else press enter "
    INPUT dsa%
    PRINT ""
END IF
IF jojo% = 1 THEN
    PRINT "input the odds on the game wager that the dealer will ";
    PRINT "pay the player for"
    PRINT "a predetermined-winning-complete hand that consists of "
    PRINT "a pair of jokers. "
    INPUT jojopo
    PRINT " "
END IF
IF bshw% = 1 THEN
    PRINT "input the odds on the game wager that the dealer will ";
    PRINT "pay the player for"
    PRINT "an predetermined-winning-complete hand that consists of "
    PRINT "an ace and a king. "
    INPUT bigslick
    PRINT " "
    IF splt% = 1 THEN
        PRINT "press 1 and enter for ";
        PRINT "a post-split-initial hand that consists of "
        PRINT "an ace and a king ";
        PRINT "is a predetermined-winning-complete hand, "
        PRINT "else press enter "
        INPUT bssh%
        PRINT " "
    END IF
END IF
IF joanca% = 1 THEN
    PRINT "input the odds on the game wager that the dealer will ";
    PRINT "pay the player for"
    PRINT "a predetermined-winning-complete hand that consists of "
    PRINT "a joker and a card of any rank."
    INPUT joancapo
    PRINT " "
    IF splt% = 1 THEN
        PRINT "press 1 and enter for ";
        PRINT "a post-split-initial hand that consists of "
        PRINT "a joker and a card of any rank other than joker"
        PRINT "is a predetermined-winning-complete hand, "
        PRINT "else press enter "
        INPUT joancash%
        PRINT " "
    END IF
END IF
IF splt% = 0 THEN
    bssh% = 0
    joancash% = 0
END IF
PRINT "press 1 and enter for in most cases any player hand "
PRINT "that has a numerical sum value of twenty-seven points"
PRINT "is a predetermined-winning-complete hand, "
PRINT "else press enter "
INPUT immed%
PRINT " "
IF dwt% <> 0 AND immed% <> 1 THEN
    PRINT "Press 1 and enter to add a rule to specify ";
    PRINT "the following."
    PRINT "If the player's-hand total ";
    PRINT "is equal to twenty-seven points"
    PRINT "if the dealer's-hand total ";
    PRINT "is equal to twenty-seven points,"
    PRINT "and if neither the player's hand nor ";
    PRINT "the dealer's hand "
    PRINT "is a predetermined-winning-complete hand,"
    PRINT "then the outcome of the game is a statemate."
    PRINT "Else press enter."
    INPUT p27d27push%
    PRINT " "
END IF
PRINT "press 1 and enter for a player's initial hand ";
PRINT "with a value of 27 points"
PRINT "beats a dealer's initial hand ";
PRINT "with a value of 27 points,"
PRINT "else press enter "
INPUT pbd%
PRINT " "
PRINT "press 1 and enter for bonus 27 payouts, else press enter "
INPUT b27po%
PRINT " "
IF b27po% = 1 THEN
    FOR x = 6 TO 9
        PRINT "enter bonus payout for"; x; " card 27, else press enter "
        INPUT mc27po(x - 2)
        PRINT " "
    NEXT x
    IF mc27po(4) + mc27po(5) + mc27po(6) + mc27po(7) <> 0 THEN
        IF splt% = 1 THEN
            PRINT "press 1 and enter for bonuses for ";
            PRINT "six, seven, eight, and or nine-card hands"
            PRINT "valued at twenty-seven points ";
            PRINT "pay off on split hands, else press enter."
            INPUT shmc27%
            PRINT " "
        END IF
        IF dd(6) + dd(7) + dd(8) <> 0 AND dbl% = 1 THEN
            PRINT "press 1 and enter for bonuses for ";
            PRINT "six, seven, eight, and or nine-card hands"
            PRINT "valued at twenty-seven points ";
            PRINT "pay off on double down hands, else press enter."
            INPUT ddmc27%
            PRINT " "
        END IF
        PRINT " "
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on six, seven, eight, and or nine-card hands ";
        PRINT "valued at twenty-seven points,"
        PRINT "else press enter"
        INPUT ptbm%
        PRINT " "
        ptm(1) = ptbm%
    END IF
    PRINT "enter bonus payout for 8-9-10 mixed suits, ";
    PRINT "else press enter "
    INPUT ms89T
    PRINT " "
    PRINT "enter bonus payout for 8-9-10 same suit, ";
    PRINT "else press enter "
    INPUT ss89T
    PRINT " "
    PRINT "enter bonus payout for 8-9-10 spades suit, ";
    PRINT "else press enter "
    INPUT sp89T
    PRINT " "
    IF ms89T + ss89T + sp89T <> 0 THEN
        IF splt% = 1 THEN
            PRINT "press 1 and enter for bonuses for 8-9-10 ";
            PRINT "hands pay off on split hands,"
            PRINT "else press enter."
            INPUT sh89T%
            PRINT " "
        END IF
        IF dbl% = 1 THEN
            PRINT "press 1 and enter for bonuses for 8-9-10 ";
            PRINT "hands pay off on double down hands,"
            PRINT "else press enter."
            INPUT dd89T%
            PRINT " "
        END IF
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on 8-9-10 hands, else press enter "
        INPUT ptbm%
        PRINT " "
        ptm(2) = ptbm%
    END IF
    PRINT "enter bonus payout for 9-9-9 mixed suits, ";
    PRINT "else press enter "
    INPUT ms999
    PRINT " "
    IF deck% > 2 THEN
        PRINT "enter bonus payout for 9-9-9 same suit, ";
        PRINT "else press enter "
        INPUT ss999
        PRINT " "
    END IF
    IF deck% > 1 THEN
        PRINT "enter jackpot for 9-9-9 mixed suit ";
        PRINT "and any dealer 9-9,"
        PRINT "else press enter"
        INPUT sp999
        PRINT " "
        IF sp999 = 0 AND ms999 <> 0 THEN
            sp999 = ms999
        END IF
    END IF
    IF deck% > 2 THEN
        PRINT "enter jackpot for 9-9-9 same suit ";
        PRINT "and any dealer 9-9,"
        PRINT "else press enter"
        INPUT jp999
        PRINT " "
        IF jp999 = 0 AND ss999 <> 0 THEN
            jp999 = ss999
        END IF
    END IF
    IF ss999 + sp999 + jp999 <> 0 THEN
        IF splt% = 1 THEN
            PRINT "press 1 and enter for bonuses for 9-9-9 hands ";
            PRINT "pay off on split hands,"
            PRINT "else press enter."
            INPUT sh999%
            PRINT " "
        END IF
        IF dbl% = 1 THEN
            PRINT "press 1 and enter for bonuses for 9-9-9 hands ";
            PRINT "pay off on double down hands,"
            PRINT "else press enter."
            INPUT dd999%
            PRINT " "
        END IF
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on 9-9-9 hands, else press enter "
        INPUT ptbm%
        PRINT " "
        ptm(3) = ptbm%
    END IF
    IF card(9) <> 0 THEN
        q# = (card(9) * deck%) * (card(9) * deck% - 1)
        q# = q# * (card(9) * deck% - 2)
        q1# = deck% * (deck% - 1) * (deck% - 2) * 4
        IF ms999 <> 0 THEN
            mc27po(1) = (q# - q1#) / q#
        END IF
        IF ss999 <> 0 THEN
            mc27po(2) = q1# / q#
        END IF
        IF jp999 <> 0 THEN
            mc27po(3) = (q# - q1#) / q#
        END IF
        IF sp999 <> 0 THEN
            mc27po(11) = q1# / q#
        END IF
    END IF
    IF card(8) * card(9) * card(10) <> 0 THEN
        q# = card(8) * card(9) * card(10) * deck% ^ 3
        q1# = deck% ^ 3
        IF ms89T <> 0 THEN
            mc27po(8) = (q# - q1# * 4) / q#
        END IF
        IF ss89T <> 0 THEN
            mc27po(9) = q1# * 3 / q#
        END IF
        IF sp89T <> 0 THEN
            mc27po(10) = q1# / q#
        END IF
    END IF
END IF
IF b27po% <> 1 THEN
    FOR x = 6 TO 9
        mc27po(x - 2) = 0
    NEXT x
    ms89T = 0
    ss89T = 0
    sp89T = 0
    ms999 = 0
    ss999 = 0
    sp999 = 0
    jp999 = 0
END IF
PRINT " "
q$ = "open " + files$ + "i.txt to see a list of user-defined game rules"
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "the number of decks used "
PRINT #1, deck%
PRINT #1, " "
PRINT #1, "input the maximum percentage of the stack of cards"
PRINT #1, "remaining in the shoe when the dealer reshuffles (15-99) "
PRINT #1, shf
PRINT #1, " "
PRINT #1, "input the hard total that the dealer must stand at "
PRINT #1, dhf%
PRINT #1, " "
PRINT #1, "input the soft total that the dealer must stand at "
PRINT #1, j + 15
PRINT #1, " "
PRINT #1, "input the hard total that the player must stand at ";
PRINT #1, "in games wherein,"
PRINT #1, "upon the dealer's turn, the dealer will draw at least ";
PRINT #1, "one additional card"
PRINT #1, "to the dealer's-initial hand, else press enter."
PRINT #1, hu%
PRINT #1, " "
PRINT #1, "input the soft total that the player must stand at ";
PRINT #1, "in games wherein,"
PRINT #1, "upon the dealer's turn, the dealer will draw at least ";
PRINT #1, "one additional card"
PRINT #1, "to the dealer's-initial hand, else press enter."
PRINT #1, su%
PRINT #1, " "
PRINT #1, "add one of three rules to specify ";
PRINT #1, "the outcome of games wherein"
PRINT #1, "a tie-score contest does occur."
PRINT #1, " "
PRINT #1, "press enter to add a rule to specify ";
PRINT #1, "a nobody-wins-ties contest occurs."
PRINT #1, "press 1 and enter to add a rule to specify ";
PRINT #1, "a dealer-wins ties contest occurs."
PRINT #1, "press 2 and enter to add a rule to specify ";
PRINT #1, "a player-wins-ties contest occurs."
PRINT #1, dwt%
PRINT #1, " "
PRINT #1, "add one of three rules to specify ";
PRINT #1, "the outcome of games wherein"
PRINT #1, "a player-bust contest does occur."
PRINT #1, " "
PRINT #1, "press enter to add a rule to specify ";
PRINT #1, "a player-bust-loss contest occurs."
PRINT #1, "press 1 and enter to add a rule to specify ";
PRINT #1, "a player-bust-push contest occurs."
PRINT #1, "press 2 and enter to add a rule to specify ";
PRINT #1, "a player-bust-win contest occurs."
PRINT #1, pbc%
PRINT #1, " "
PRINT #1, "add one of three rules to specify ";
PRINT #1, "the outcome of games wherein"
PRINT #1, "a dealer-bust contest does occur."
PRINT #1, " "
PRINT #1, "press enter to add a rule to specify ";
PRINT #1, "a dealer-bust-loss contest occurs."
PRINT #1, "press 1 and enter to add a rule to specify ";
PRINT #1, "a dealer-bust-push contest occurs."
PRINT #1, "press 2 and enter to add a rule to specify ";
PRINT #1, "a dealer-bust-win contest occurs."
PRINT #1, debc%
PRINT #1, " "
PRINT #1, "add one of three rules to specify ";
PRINT #1, "the outcome of games wherein"
PRINT #1, "a double-bust contest does occur."
PRINT #1, " "
PRINT #1, "press enter to add a rule to specify ";
PRINT #1, "a double-bust-loss contest occurs."
PRINT #1, "press 1 and enter to add a rule to specify ";
PRINT #1, "a double-bust-push contest occurs."
PRINT #1, "press 2 and enter to add a rule to specify ";
PRINT #1, "a double-bust-win contest occurs."
PRINT #1, dbc%
PRINT #1, " "
PRINT #1, "add one of three rules to specify ";
PRINT #1, "the outcome of games wherein"
PRINT #1, "the dealer's hand total does equal twenty-eight points,"
PRINT #1, "and wherein the dealer bust does occur."
PRINT #1, ""
PRINT #1, "press enter to add a rule to specify the outcome ";
PRINT #1, "conforms to normal rules"
PRINT #1, "press 1 and enter to add a rule to specify the outcome ";
PRINT #1, "is a stalemate."
PRINT #1, "press 2 and enter to add a rule to specify the outcome ";
PRINT #1, "is the dealer's hand wins."
PRINT #1, d28p% + d28w%
PRINT #1, " "
IF card(0) > 0 THEN
    PRINT #1, "press 1 and enter for an initial hand ";
    PRINT #1, "that consists of"
    PRINT #1, "a pair of jokers ";
    PRINT #1, "has a value of twenty-seven points,"
    PRINT #1, "and in most cases ";
    PRINT #1, "is a predetermined-winning-complete hand,"
    PRINT #1, "else press enter "
    PRINT #1, jojo%
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for an initial hand ";
PRINT #1, "that consists of "
PRINT #1, "an ace and a king ";
PRINT #1, "has a value of twenty-seven points,"
PRINT #1, "and in most cases ";
PRINT #1, "is a predetermined-winning-complete hand, "
PRINT #1, "else press enter "
PRINT #1, bshw%
PRINT #1, " "
IF card(0) > 0 THEN
    PRINT #1, "press 1 and enter for an initial hand ";
    PRINT #1, "that consists of "
    PRINT #1, "a joker and a card of any rank other than joker"
    PRINT #1, "has a value of twenty-seven points, ";
    PRINT #1, "and in most cases "
    PRINT #1, "is a predetermined-winning-complete hand,"
    PRINT #1, "else press enter "
    PRINT #1, joanca%
    PRINT #1, " "
END IF
IF jo27% = 1 AND card(0) > 0 THEN
    PRINT #1, "press 1 and enter for in most cases any ";
    PRINT #1, "player hand that includes"
    PRINT #1, "at least one joker is a ";
    PRINT #1, "predetermined-winning-complete hand,"
    PRINT #1, "else press enter "
    PRINT #1, jowi%
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for any player hand ";
PRINT #1, "consisting of nine cards "
PRINT #1, "with numerical sum value of less than twenty-eight points"
PRINT #1, "is a predetermined-winning-complete hand, else press enter "
PRINT #1, nchw%
PRINT #1, " "
PRINT #1, "press 1 and enter to allow the player to surrender,";
PRINT #1, " else press enter "
PRINT #1, ls%
PRINT #1, " "
PRINT #1, "press 1 and enter for allow the player to double down,";
PRINT #1, " else press enter"
PRINT #1, dbl%
PRINT #1, " "
IF dbl% = 1 THEN
    PRINT #1, "press 1 and enter to restrict";
    PRINT #1, " the player's use of double down option"
    PRINT #1, "to those hands wherein the player's";
    PRINT #1, " hand total is equal to one of"
    PRINT #1, "a user-defined set of hand totals, "
    PRINT #1, "else press enter "
    PRINT #1, dh% - alr%
    PRINT #1, ""
    IF dh% = 1 THEN
        PRINT #1, "enter an integer to define a number of";
        PRINT #1, " points as the lower limit"
        PRINT #1, "of the user-defined set of hand totals and in";
        PRINT #1, " so doing make the upper limit"
        PRINT #1, "of the user-defined set of hand totals equal";
        PRINT #1, " to fourteen points. For example,"
        PRINT #1, "enter 12 for 12/13/14 only, ";
        PRINT #1, "enter 13 for 13/14 only "
        PRINT #1, ld%
        PRINT #1, ""
    END IF
    IF dh% = 2 THEN
        PRINT #1, "enter an integer to define a number of";
        PRINT #1, " points as the lower limit"
        PRINT #1, "of the user-defined set of hand totals and";
        PRINT #1, " in so doing make the upper limit"
        PRINT #1, "of the user-defined set of hand totals equal";
        PRINT #1, " to twenty-seven points minus"
        PRINT #1, "the lower limit of the user-defined set";
        PRINT #1, " of hand totals. For example,"
        PRINT #1, "enter 13, 12, 11, 10, or 9 for 13-14,";
        PRINT #1, " 12-15, 11-16, 10-17, or 9-18 only "
        PRINT #1, ld%
        PRINT #1, " "
    END IF
    IF dh% = 0 OR ld% < 15 THEN
        PRINT #1, "press 1 and enter for double down on ";
        PRINT #1, "more than two cards, else press enter "
        PRINT #1, dd%
        PRINT #1, " "
    END IF
    IF dd% = 1 THEN
        FOR x = 3 TO 8
            PRINT #1, "press 1 and enter for double down on ";
            PRINT #1, x; " cards, else press enter "
            PRINT #1, dd(x)
            PRINT #1, " "
        NEXT x
    END IF
END IF
PRINT #1, "press 1 and enter to allow the player to split,";
PRINT #1, " else press enter "
PRINT #1, splt%
PRINT #1, " "
IF splt% = 1 THEN
    PRINT #1, "press 1 and enter for split every pair,";
    PRINT #1, " else press enter "
    PRINT #1, ep%
    PRINT #1, " "
    IF dbl% = 1 THEN
        PRINT #1, "press 1 and enter for allow the player";
        PRINT #1, " to double down after a split,"
        PRINT #1, "else press enter "
        PRINT #1, das%
        PRINT #1, " "
    END IF
    PRINT #1, "enter the maximum number of post-split hands";
    PRINT #1, " allowed per player player per round "
    PRINT #1, most%
    PRINT #1, " "
    IF most% > 2 THEN
        PRINT #1, "press 1 and enter for allow player to";
        PRINT #1, " re-split aces, else press enter "
        PRINT #1, rsa%
        PRINT #1, " "
    END IF
    PRINT #1, "press 1 and enter for allow the player to draw";
    PRINT #1, " to split aces, else press enter "
    PRINT #1, dsa%
    PRINT #1, " "
END IF
IF jojo% = 1 THEN
    PRINT #1, "input the odds on the game wager that the dealer will ";
    PRINT #1, "pay the player for"
    PRINT #1, "a predetermined-winning-complete hand that consists of "
    PRINT #1, "a pair of jokers. "
    PRINT #1, jojopo
    PRINT #1, " "
END IF
IF bshw% = 1 THEN
    PRINT #1, "input the odds on the game wager that the dealer will ";
    PRINT #1, "pay the player for"
    PRINT #1, "an predetermined-winning-complete hand that consists of "
    PRINT #1, "an ace and a king. "
    PRINT #1, bigslick
    PRINT #1, " "
    IF splt% = 1 THEN
        PRINT #1, "press 1 and enter for ";
        PRINT #1, "a post-split-initial hand that consists of "
        PRINT #1, "an ace and a king ";
        PRINT #1, "is a predetermined-winning-complete hand, "
        PRINT #1, "else press enter "
        PRINT #1, bssh%
        PRINT #1, " "
    END IF
END IF
IF joanca% = 1 THEN
    PRINT #1, "input the odds on the game wager that the dealer will ";
    PRINT #1, "pay the player for"
    PRINT #1, "a predetermined-winning-complete hand that consists of "
    PRINT #1, "a joker and a card of any rank other than joker."
    PRINT #1, joancapo
    PRINT #1, " "
    IF splt% = 1 THEN
        PRINT #1, "press 1 and enter for ";
        PRINT #1, "a post-split-initial hand that consists of "
        PRINT #1, "a joker and a card of any rank other than joker "
        PRINT #1, "is a predetermined-winning-complete hand, "
        PRINT #1, "else press enter "
        PRINT #1, joancash%
        PRINT #1, " "
    END IF
END IF
PRINT #1, "press 1 and enter for in most cases any player hand "
PRINT #1, "that has a numerical sum value of twenty-seven points"
PRINT #1, "is a predetermined-winning-complete hand, "
PRINT #1, "else press enter "
PRINT #1, immed%
PRINT #1, " "
IF dwt% <> 0 AND immed% <> 1 THEN
    PRINT #1, "Press 1 and enter to add a rule to specify ";
    PRINT #1, "the following."
    PRINT #1, "If the player's-hand total ";
    PRINT #1, "is equal to twenty-seven points"
    PRINT #1, "if the dealer's-hand total ";
    PRINT #1, "is equal to twenty-seven points,"
    PRINT #1, "and if neither the player's hand nor ";
    PRINT #1, "the dealer's hand"
    PRINT #1, "is a predetermined-winning-complete hand,"
    PRINT #1, "then the outcome of the game is a stalemate."
    PRINT #1, "Else press enter."
    PRINT #1, p27d27push%
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for a player's initial hand ";
PRINT #1, "with a value of 27 points"
PRINT #1, "beats a dealer's initial hand ";
PRINT #1, "with a value of 27 points,"
PRINT #1, "else press enter "
PRINT #1, pbd%
PRINT #1, " "
PRINT #1, "press 1 and enter for bonus 27 payouts, else press enter "
PRINT #1, b27po%
PRINT #1, " "
IF b27po% = 1 THEN
    FOR x = 6 TO 9
        PRINT #1, "enter bonus payout for"; x; " card 27,";
        PRINT #1, " else press enter "
        PRINT #1, mc27po(x - 2)
        PRINT #1, " "
    NEXT x
    IF mc27po(4) + mc27po(5) + mc27po(6) + mc27po(7) <> 0 THEN
        IF splt% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for ";
            PRINT #1, "six, seven, eight, and or nine-card hands"
            PRINT #1, "valued at twenty-seven points ";
            PRINT #1, "pay off on split hands, else press enter."
            PRINT #1, shmc27%
            PRINT #1, " "
        END IF
        IF dd(6) + dd(7) + dd(8) <> 0 AND dbl% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for ";
            PRINT #1, "six, seven, eight, and or nine-card hands"
            PRINT #1, "valued at twenty-seven points ";
            PRINT #1, "pay off on double down hands, else press enter."
            PRINT #1, ddmc27%
            PRINT #1, " "
        END IF
        PRINT #1, "Press 1 and enter for dealer makes ";
        PRINT #1, "bonus payouts a multiple of the table minimum"
        PRINT #1, "on six, seven, eight, and or nine-card hands ";
        PRINT #1, "valued at twenty-seven points,"
        PRINT #1, "else press enter"
        PRINT #1, ptm(1)
        PRINT #1, " "
    END IF
    PRINT #1, "enter bonus payout for 8-9-10 mixed suits, ";
    PRINT #1, "else press enter "
    PRINT #1, ms89T
    PRINT #1, " "
    PRINT #1, "enter bonus payout for 8-9-10 same suit, ";
    PRINT #1, "else press enter "
    PRINT #1, ss89T
    PRINT #1, " "
    PRINT #1, "enter bonus payout for 8-9-10 spades suit, ";
    PRINT #1, "else press enter "
    PRINT #1, sp89T
    PRINT #1, " "
    IF ms89T + ss89T + sp89T <> 0 THEN
        IF splt% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for 8-9-10 ";
            PRINT #1, "hands pay off on split hands,"
            PRINT #1, "else press enter."
            PRINT #1, sh89T%
            PRINT #1, " "
        END IF
        IF dbl% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for 8-9-10 ";
            PRINT #1, "hands pay off on double down hands,"
            PRINT #1, "else press enter."
            PRINT #1, dd89T%
            PRINT #1, " "
        END IF
        PRINT #1, "Press 1 and enter for dealer makes ";
        PRINT #1, "bonus payouts a multiple of the table minimum"
        PRINT #1, "on 8-9-10 hands, else press enter "
        PRINT #1, ptm(2)
        PRINT #1, " "
    END IF
    PRINT #1, "enter bonus payout for 9-9-9 mixed suits, ";
    PRINT #1, "else press enter "
    PRINT #1, ms999
    PRINT #1, " "
    IF deck% > 2 THEN
        PRINT #1, "enter bonus payout for 9-9-9 same suit, ";
        PRINT #1, "else press enter "
        PRINT #1, ss999
        PRINT #1, " "
    END IF
    IF deck% > 1 THEN
        PRINT #1, "enter jackpot for 9-9-9 mixed suit and ";
        PRINT #1, "any dealer 9-9,"
        PRINT #1, "else press enter "
        PRINT #1, sp999
        PRINT #1, " "
    END IF
    IF deck% > 2 THEN
        PRINT #1, "enter jackpot for 9-9-9 same suit ";
        PRINT #1, "and any dealer 9-9,"
        PRINT #1, "else press enter "
        PRINT #1, jp999
        PRINT #1, " "
    END IF
    IF ss999 + sp999 + jp999 <> 0 THEN
        IF splt% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for 9-9-9 ";
            PRINT #1, "hands pay off on split hands,"
            PRINT #1, "else press enter."
            PRINT #1, sh999%
            PRINT #1, " "
        END IF
        IF dbl% = 1 THEN
            PRINT #1, "press 1 and enter for bonuses for 9-9-9 ";
            PRINT #1, "hands pay off on double down hands,"
            PRINT #1, "else press enter."
            PRINT #1, dd999%
            PRINT #1, " "
        END IF
        PRINT #1, "Press 1 and enter for dealer makes ";
        PRINT #1, "bonus payouts a multiple of the table minimum"
        PRINT #1, "on 9-9-9 hands, else press enter "
        PRINT #1, ptm(3)
        PRINT #1, " "
    END IF
END IF
PRINT #1, " "
PRINT #1, "a brief description of the game rules reads as follows: "
PRINT #1, q$
PRINT #1, ""
CLOSE #1
ERASE s: ERASE ns
PRINT " "
PRINT "Press 1 and enter to add rules for complete hands that"
PRINT "make qualifying-five-card-poker-hands, else press enter"
INPUT pbonus%
PRINT " "
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "Press 1 and enter to add rules for complete hands that"
PRINT #1, "make qualifying-five-card-poker-hands, else press enter."
PRINT #1, pbonus%
PRINT #1, " "
CLOSE #1
IF pbonus% = 1 THEN
    IF card(0) > 0 THEN
        PRINT "Press 1 and enter for (fully wild rule) ";
        PRINT "enables the holder of"
        PRINT "a winning hand that consists of at least five playing cards"
        PRINT "to use each joker included in the winning hand to represent"
        PRINT "the suit and rank of any other playing card."
        PRINT " "
        PRINT "Else press enter for (bug rule) enables the holder of"
        PRINT "a winning hand that consists of at least five playing cards"
        PRINT "to use each joker included in the winning hand to perform a"
        PRINT "function selected from a group ";
        PRINT "consisting of represent an ace,"
        PRINT "complete a straight, complete a flush, ";
        PRINT "and complete a straight-flush."
        PRINT " "
        INPUT wildcardrules%
        PRINT " "
        PRINT "Press enter to input the rank of each of ";
        PRINT "nine categories of poker hands."
        PRINT "Press 1 and enter to use default hand ranking rules "
        INPUT x
        PRINT " "
        phrank(0) = 0
        IF x = 1 AND wildcardrules% = 0 THEN
            phrank(1) = 1
            phrank(2) = 2
            phrank(3) = 3
            phrank(4) = 4
            phrank(5) = 5
            phrank(6) = 6
            phrank(7) = 7
            phrank(8) = 9
            phrank(9) = 8
        END IF
        IF x = 1 AND wildcardrules% = 1 THEN
            phrank(1) = 1
            phrank(2) = 2
            phrank(3) = 3
            phrank(4) = 4
            phrank(5) = 7
            phrank(6) = 5
            phrank(7) = 6
            phrank(8) = 9
            phrank(9) = 8
        END IF
        PRINT " "
    END IF
    IF x <> 1 THEN
        PRINT "a set of user-defined poker-hand-ranking ";
        PRINT "rules create a hierarchy"
        PRINT "wherein poker hands of the high card category ";
        PRINT "are assigned the lowest rank,"
        PRINT "and wherein poker hands of each ";
        PRINT "category assigned a higher rank"
        PRINT "outrank poker hands of all categories ";
        PRINT "assigned lower ranks."
        PRINT ""
        PRINT "input the rank (1-9) assigned to one pair "
        INPUT phrank(1)
        PRINT " "
        PRINT "input the rank (1-9) assigned to two pair "
        INPUT phrank(2)
        PRINT " "
        PRINT "input the rank (1-9) assigned to three of a kind "
        INPUT phrank(3)
        PRINT " "
        PRINT "input the rank (1-9) assigned to a straight "
        INPUT phrank(4)
        PRINT " "
        PRINT "input the rank (1-9) assigned to a flush "
        INPUT phrank(5)
        PRINT " "
        PRINT "input the rank (1-9) assigned to a full house "
        INPUT phrank(6)
        PRINT " "
        PRINT "input the rank (1-9) assigned to four of a kind "
        INPUT phrank(7)
        PRINT " "
        PRINT "input the rank (1-9) assigned to five of a kind "
        INPUT phrank(8)
        PRINT " "
        PRINT "input the rank (1-9) assigned to a straight flush "
        INPUT phrank(9)
        PRINT " "
    END IF
    PRINT "a qualifying-five-card-poker hand is ";
    PRINT "a five-card-poker hand of a rank that"
    PRINT "is at least equal to a minimum rank ";
    PRINT "specified by the user-defined set of ";
    PRINT "game rules."
    PRINT " "
    PRINT "input the minimum rank specified by ";
    PRINT "the user-defined set of game rules"
    PRINT " "
    FOR y = 0 TO 9
        IF y = 0 THEN
            PRINT "input "; y; "for high card."
        END IF
        IF y = phrank(1) THEN
            PRINT "input "; y; "for one pair."
        END IF
        IF y = phrank(2) THEN
            PRINT "input "; y; "for two pair."
        END IF
        IF y = phrank(3) THEN
            PRINT "input "; y; "for three-of-a-kind."
        END IF
        IF y = phrank(4) THEN
            PRINT "input "; y; "for straight."
        END IF
        IF y = phrank(5) THEN
            PRINT "input "; y; "for flush."
        END IF
        IF y = phrank(6) THEN
            PRINT "input "; y; "for full house."
        END IF
        IF y = phrank(7) THEN
            PRINT "input "; y; "for four-of-a-kind."
        END IF
        IF y = phrank(8) THEN
            PRINT "input "; y; "for five-of-a-kind."
        END IF
        IF y = phrank(9) THEN
            PRINT "input "; y; "for straight-flush."
        END IF
    NEXT y
    PRINT " "
    INPUT a
    PRINT " "
    minrank% = a
    PRINT "for each category of poker hand input ";
    PRINT "the bonus the dealer pays to a player"
    PRINT " "
    FOR y = 0 TO 9
        IF y = 0 AND y >= minrank% THEN
            PRINT "input bonus paid for a high card hand "
            INPUT a
            PRINT " "
            phpo(0) = a
        END IF
        IF y = phrank(1) AND y >= minrank% THEN
            PRINT "input bonus paid for a pair hand "
            INPUT a
            PRINT " "
            phpo(1) = a
        END IF
        IF y = phrank(2) AND y >= minrank% THEN
            PRINT "input bonus paid for a two pair hand "
            INPUT a
            PRINT " "
            phpo(2) = a
        END IF
        IF y = phrank(3) AND y >= minrank% THEN
            PRINT "input bonus paid for a three of a kind hand "
            INPUT a
            PRINT " "
            phpo(3) = a
        END IF
        IF y = phrank(4) AND y >= minrank% THEN
            PRINT "input bonus paid for a straight hand "
            INPUT a
            PRINT " "
            phpo(4) = a
        END IF
        IF y = phrank(5) AND y >= minrank% THEN
            PRINT "input bonus paid for a flush hand "
            INPUT a
            PRINT " "
            phpo(5) = a
        END IF
        IF y = phrank(6) AND y >= minrank% THEN
            PRINT "input bonus paid for a full house hand "
            INPUT a
            PRINT " "
            phpo(6) = a
        END IF
        IF y = phrank(7) AND y >= minrank% THEN
            PRINT "input bonus paid for a four of a kind hand "
            INPUT a
            PRINT " "
            phpo(7) = a
        END IF
        IF y = phrank(8) AND y >= minrank% THEN
            PRINT "input bonus paid for a five of a kind hand "
            INPUT a
            PRINT " "
            phpo(8) = a
        END IF
        IF y = phrank(9) AND y >= minrank% THEN
            PRINT "input bonus paid for a straight flush hand "
            INPUT a
            PRINT " "
            phpo(9) = a
        END IF
    NEXT y
    OPEN files$ + "i.txt" FOR APPEND AS #1
    IF card(0) > 0 THEN
        PRINT #1, "Press 1 and enter for (fully wild rule) ";
        PRINT #1, "enables the holder of"
        PRINT #1, "a winning hand that consists ";
        PRINT #1, "of at least five playing cards"
        PRINT #1, "to use each joker included ";
        PRINT #1, "in the winning hand to represent"
        PRINT #1, "the suit and rank of any other playing card."
        PRINT #1, " "
        PRINT #1, "Else press enter for (bug rule) ";
        PRINT #1, "enables the holder of"
        PRINT #1, "a winning hand that consists ";
        PRINT #1, "of at least five playing cards"
        PRINT #1, "to use each joker included ";
        PRINT #1, "in the winning hand to perform a"
        PRINT #1, "function selected from a group ";
        PRINT #1, "consisting of represent an ace,"
        PRINT #1, "complete a straight, complete a flush, ";
        PRINT #1, "and complete a straight-flush."
        PRINT #1, " "
        PRINT #1, wildcardrules%
        PRINT #1, " "
    END IF
    PRINT #1, "Press enter to input the rank of each of ";
    PRINT #1, "nine categories of poker hands."
    PRINT #1, "Press 1 and enter to use default hand ranking rules "
    PRINT #1, x
    PRINT #1, " "
    IF x <> 1 THEN
        PRINT #1, "a set of user-defined poker-hand-ranking ";
        PRINT #1, "rules create a hierarchy"
        PRINT #1, "wherein poker hands of the high card category ";
        PRINT #1, "are assigned the lowest rank,"
        PRINT #1, "and wherein poker hands of each ";
        PRINT #1, "category assigned a higher rank"
        PRINT #1, "outrank poker hands of all categories ";
        PRINT #1, "assigned lower ranks."
        PRINT #1, ""
        FOR y = 1 TO 9
            IF y = phrank(1) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to one pair "
                PRINT #1, phrank(1)
                PRINT #1, " "
            END IF
            IF y = phrank(2) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to two pair "
                PRINT #1, phrank(2)
                PRINT #1, " "
            END IF
            IF y = phrank(3) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to three of a kind "
                PRINT #1, phrank(3)
                PRINT #1, " "
            END IF
            IF y = phrank(4) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a straight "
                PRINT #1, phrank(4)
                PRINT #1, " "
            END IF
            IF y = phrank(5) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a flush "
                PRINT #1, phrank(5)
                PRINT #1, " "
            END IF
            IF y = phrank(6) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a full house "
                PRINT #1, phrank(6)
                PRINT #1, " "
            END IF
            IF y = phrank(7) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to four of a kind "
                PRINT #1, phrank(7)
                PRINT #1, " "
            END IF
            IF y = phrank(8) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to five of a kind "
                PRINT #1, phrank(8)
                PRINT #1, " "
            END IF
            IF y = phrank(9) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a straight flush "
                PRINT #1, phrank(9)
                PRINT #1, " "
            END IF
        NEXT y
    END IF
    PRINT #1, "a qualifying-five-card-poker hand is ";
    PRINT #1, "a five-card-poker hand of a rank that"
    PRINT #1, "is at least equal to a minimum rank ";
    PRINT #1, "specified by the user-defined set of ";
    PRINT #1, "game rules."
    PRINT #1, " "
    PRINT #1, "input the minimum rank specified by ";
    PRINT #1, "the user-defined set of game rules"
    PRINT #1, " "
    FOR y = 0 TO 9
        IF y = 0 THEN
            PRINT #1, "input "; y; "for high card."
        END IF
        IF y = phrank(1) THEN
            PRINT #1, "input "; y; "for one pair."
        END IF
        IF y = phrank(2) THEN
            PRINT #1, "input "; y; "for two pair."
        END IF
        IF y = phrank(3) THEN
            PRINT #1, "input "; y; "for three-of-a-kind."
        END IF
        IF y = phrank(4) THEN
            PRINT #1, "input "; y; "for straight."
        END IF
        IF y = phrank(5) THEN
            PRINT #1, "input "; y; "for flush."
        END IF
        IF y = phrank(6) THEN
            PRINT #1, "input "; y; "for full house."
        END IF
        IF y = phrank(7) THEN
            PRINT #1, "input "; y; "for four-of-a-kind."
        END IF
        IF y = phrank(8) THEN
            PRINT #1, "input "; y; "for five-of-a-kind."
        END IF
        IF y = phrank(9) THEN
            PRINT #1, "input "; y; "for straight-flush."
        END IF
    NEXT y
    PRINT #1, " "
    PRINT #1, minrank%
    PRINT #1, " "
    PRINT #1, "for each category of poker hand input the bonus ";
    PRINT #1, "the dealer pays to the player"
    PRINT #1, " "
    FOR y = 0 TO 9
        IF y = 0 AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a high card hand "
            PRINT #1, phpo(0)
            PRINT #1, " "
        END IF
        IF y = phrank(1) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a pair hand "
            PRINT #1, phpo(1)
            PRINT #1, " "
        END IF
        IF y = phrank(2) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a two pair hand "
            PRINT #1, phpo(2)
            PRINT #1, " "
        END IF
        IF y = phrank(3) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a three of a kind hand "
            PRINT #1, phpo(3)
            PRINT #1, " "
        END IF
        IF y = phrank(4) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a straight hand "
            PRINT #1, phpo(4)
            PRINT #1, " "
        END IF
        IF y = phrank(5) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a flush hand "
            PRINT #1, phpo(5)
            PRINT #1, " "
        END IF
        IF y = phrank(6) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a full house hand "
            PRINT #1, phpo(6)
            PRINT #1, " "
        END IF
        IF y = phrank(7) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a four of a kind hand "
            PRINT #1, phpo(7)
            PRINT #1, " "
        END IF
        IF y = phrank(8) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a five of a kind hand "
            PRINT #1, phpo(8)
            PRINT #1, " "
        END IF
        IF y = phrank(9) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a straight flush hand "
            PRINT #1, phpo(9)
            PRINT #1, " "
        END IF
    NEXT y
    CLOSE #1
    PRINT "Press 1 and enter for any player hand with ";
    PRINT "a numerical sum value of less than"
    PRINT "twenty-eight points that also makes ";
    PRINT "a qualifying-five-card-poker hand"
    PRINT "is a predetermined-winning-complete hand,";
    PRINT " else press enter "
    INPUT qfcphw%
    PRINT " "
    PRINT "Press 1 and enter for any dealer hand with ";
    PRINT "a numerical sum value of less than"
    PRINT "twenty-eight points that also makes ";
    PRINT "a qualifying-five-card-poker hand"
    PRINT "is a predetermined-winning-complete hand, ";
    PRINT "else press enter "
    INPUT dqfcphw%
    PRINT " "
    IF qfcphw% <> 1 THEN
        PRINT "Press 1 and enter for any player hand with ";
        PRINT "a numerical sum value of"
        PRINT "twenty-seven points that also makes ";
        PRINT "a qualifying-five-card-poker hand"
        PRINT "is a predetermined-winning complete hand, ";
        PRINT "else press enter "
        INPUT qph27wa%
        PRINT " "
    END IF
    PRINT " "
    PRINT "Press 1 and enter for player's poker hand must outrank";
    PRINT " dealer's poker hand "
    PRINT "else press enter "
    INPUT pcomp%
    PRINT " "
    OPEN files$ + "i.txt" FOR APPEND AS #1
    PRINT #1, "Press 1 and enter for any player hand with ";
    PRINT #1, "a numerical sum value of less than"
    PRINT #1, "twenty-eight points that also makes ";
    PRINT #1, "a qualifying-five-card-poker hand"
    PRINT #1, "is a predetermined-winning-complete hand,";
    PRINT #1, " else press enter "
    PRINT #1, qfcphw%
    PRINT #1, " "
    PRINT #1, "Press 1 and enter for any dealer hand with ";
    PRINT #1, "a numerical sum value of less than"
    PRINT #1, "twenty-eight points that also makes ";
    PRINT #1, "a qualifying-five-card-poker hand"
    PRINT #1, "is a predetermined-winning-complete hand, ";
    PRINT #1, "else press enter "
    PRINT #1, dqfcphw%
    PRINT #1, " "
    IF qfcphw% <> 1 THEN
        PRINT #1, "Press 1 and enter for any player hand with ";
        PRINT #1, "a numerical sum value of"
        PRINT #1, "twenty-seven points that also makes ";
        PRINT #1, "a qualifying-five-card-poker hand"
        PRINT #1, "is a predetermined-winning complete hand, ";
        PRINT #1, "else press enter "
        PRINT #1, qph27wa%
        PRINT #1, " "
    END IF
    PRINT #1, "Press 1 and enter for player's poker hand ";
    PRINT #1, "must outrank dealer's poker hand "
    PRINT #1, "else press enter "
    PRINT #1, pcomp%
    PRINT #1, " "
    CLOSE #1
    PRINT "enter the 'folder/filename prefix' of the ";
    PRINT "set of files containing data"
    PRINT "about the frequency of occurrence of each category ";
    PRINT "of five-card-poker hand"
    PRINT "in a simulated game wherein the ";
    PRINT "computer-controlled player only"
    PRINT "hits and stands"
    INPUT iphr1$
    PRINT " "
    OPEN files$ + "i.txt" FOR APPEND AS #1
    PRINT #1, "enter the 'folder/filename prefix' of the ";
    PRINT #1, "set of files containing data"
    PRINT #1, "about the frequency of occurrence of each category ";
    PRINT #1, "of five-card-poker hand"
    PRINT #1, "in a simulated game wherein the ";
    PRINT #1, "computer-controlled player only"
    PRINT #1, "hits and stands"
    PRINT #1, iphr1$
    PRINT #1, " "
    CLOSE #1
    IF splt% = 1 THEN
        PRINT "enter the 'folder/filename prefix of the ";
        PRINT "set of files containing data"
        PRINT "about the frequency of occurrence of each category ";
        PRINT "of five-card-poker hand"
        PRINT "in a simulated game wherein the ";
        PRINT "computer-controlled player"
        PRINT "splits all pairs, hits and stands."
        INPUT iphr2$
        PRINT " "
        OPEN files$ + "i.txt" FOR APPEND AS #1
        PRINT #1, "enter the 'folder/filename prefix of the ";
        PRINT #1, "set of files containing data"
        PRINT #1, "about the frequency of occurrence of each category ";
        PRINT #1, "of five-card-poker hand"
        PRINT #1, "in a simulated game wherein the ";
        PRINT #1, "computer-controlled player"
        PRINT #1, "splits all pairs, hits and stands."
        PRINT #1, iphr2$
        PRINT #1, " "
        CLOSE #1
    END IF
    FOR u = 1 TO 81
        PRINT " "
        PRINT "Press 1 and enter to load a file containing data ";
        PRINT "about the frequency"
        PRINT "of occurrence of each rank of ";
        PRINT "five-card-poker hand "
        PRINT "in a simulated ";
        PRINT "game wherein the computer-controlled player stands at ";
        PRINT MID$(p$, u * 5 + 1, 5)
        PRINT "else press enter."
        INPUT t
        PRINT " "
        OPEN files$ + "i.txt" FOR APPEND AS #1
        PRINT #1, " "
        PRINT #1, "Press 1 and enter to load a file containing data ";
        PRINT #1, "about the frequency"
        PRINT #1, "of occurrence of each rank of ";
        PRINT #1, "five-card-poker hand "
        PRINT #1, "in a simulated ";
        PRINT #1, "game wherein the computer-controlled player stands at ";
        PRINT #1, MID$(p$, u * 5 + 1, 5)
        PRINT #1, "else press enter."
        PRINT #1, t
        PRINT #1, " "
        CLOSE #1
        IF t = 0 THEN
            FOR v = 0 TO 104
                FOR w = 0 TO 104
                    ns(u, v, w) = -1
                    s(u, v, w) = -1
                NEXT w
            NEXT v
        END IF
        IF t = 1 THEN
            v$ = iphr1$ + MID$(p$, u * 5 + 1, 2)
            v$ = v$ + MID$(p$, u * 5 + 4, 2) + "k.dat"
            OPEN v$ FOR RANDOM AS #1 LEN = LEN(idatabase)
            z = 0
            FOR v = 0 TO 104
                FOR w = 0 TO 104
                    FOR x = 0 TO 11
                        FOR y = 0 TO 2
                            z = z + 1
                            GET #1, z, idatabase
                            iphr(v, w, x, y) = idatabase.idat
            NEXT y: NEXT x: NEXT w: NEXT v
            CLOSE #1
            FOR v = 0 TO 104
                FOR w = 0 TO 104
                    FOR x = 0 TO 9
                        IF phpo(x) > 0 THEN
                            q4# = iphr(v, w, x, 1) * phpo(x) / (iphr(v, w, 11, 2) + 1E-09)
                            ns(u, v, w) = ns(u, v, w) + q4#
                            IF pcomp% <> 1 THEN
                                q4# = iphr(v, w, x, 0) * phpo(x) / (iphr(v, w, 11, 2) + 1E-09)
                                ns(u, v, w) = ns(u, v, w) + q4#
                            END IF
                        END IF
                        IF phrank(x) >= minrank% AND qfcphw% = 1 THEN
                            q4# = iphr(v, w, x, 1) / (iphr(v, w, 11, 2) + 1E-09)
                            aw(u, v, w, 2) = aw(u, v, w, 2) + q4#
                            IF pcomp% <> 1 THEN
                                q4# = iphr(v, w, x, 0) / (iphr(v, w, 11, 2) + 1E-09)
                                aw(u, v, w, 2) = aw(u, v, w, 2) + q4#
                            END IF
                        END IF
                    NEXT x
                    q4# = iphr(v, w, 10, 2) / (iphr(v, w, 11, 2) + 1E-09)
                    aw(u, v, w, 0) = aw(u, v, w, 0) + q4#
            NEXT w: NEXT v
            ERASE iphr
            IF splt% = 1 THEN
                v$ = iphr2$ + MID$(p$, u * 5 + 1, 2)
                v$ = v$ + MID$(p$, u * 5 + 4, 2) + "k.dat"
                OPEN v$ FOR RANDOM AS #1 LEN = LEN(idatabase)
                z = 0
                FOR v = 0 TO 104
                    FOR w = 0 TO 104
                        FOR x = 0 TO 11
                            FOR y = 0 TO 2
                                z = z + 1
                                GET #1, z, idatabase
                                iphr(v, w, x, y) = idatabase.idat
                NEXT y: NEXT x: NEXT w: NEXT v
                CLOSE #1
                FOR v = 0 TO 104
                    FOR w = 0 TO 104
                        FOR x = 0 TO 9
                            IF phpo(x) > 0 THEN
                                q4# = iphr(v, w, x, 1) * phpo(x) / (iphr(v, w, 11, 2) + 1E-09)
                                s(u, v, w) = s(u, v, w) + q4#
                                IF pcomp% <> 1 THEN
                                    q4# = iphr(v, w, x, 0) * phpo(x) / (iphr(v, w, 11, 2) + 1E-09)
                                    s(u, v, w) = s(u, v, w) + q4#
                                END IF
                            END IF
                            IF phrank(x) >= minrank% AND qfcphw% = 1 THEN
                                q4# = iphr(v, w, x, 1) / (iphr(v, w, 11, 2) + 1E-09)
                                aw(u, v, w, 3) = aw(u, v, w, 3) + q4#
                                IF pcomp% <> 1 THEN
                                    q4# = iphr(v, w, x, 0) / (iphr(v, w, 11, 2) + 1E-09)
                                    aw(u, v, w, 3) = aw(u, v, w, 3) + q4#
                                END IF
                            END IF
                        NEXT x
                        q4# = iphr(v, w, 10, 2) / (iphr(v, w, 11, 2) + 1E-09)
                        aw(u, v, w, 1) = aw(u, v, w, 1) + q4#
                NEXT w: NEXT v
                ERASE iphr
            END IF
        END IF
    NEXT u
END IF
' END OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, ""
PRINT #1, "START: "; DATE$; " "; TIME$
CLOSE #1
' START OF A SOFTWARE MEANS FOR SAVING THE SET OF GAME RULES
v$ = files$ + "a.dat"
OPEN v$ FOR RANDOM AS #1 LEN = LEN(sd)
sd.c0 = card(0)
sd.c1 = card(1)
sd.c2 = card(2)
sd.c3 = card(3)
sd.c4 = card(4)
sd.c5 = card(5)
sd.c6 = card(6)
sd.c7 = card(7)
sd.c8 = card(8)
sd.c9 = card(9)
sd.cT = card(10)
sd.cJ = card(11)
sd.cQ = card(12)
sd.cK = card(13)
sd.jojo = jojo%
sd.jojopo = jojopo
sd.joanca = joanca%
sd.joancash = joancash%
sd.joancapo = joancapo
sd.jowi = jo27% + jowi%
sd.d28p = d28p% + d28w%
sd.bshw = bshw%
sd.dhf = dhf% + hu% * 100
sd.j = j + su% * 100
sd.dwt = dwt% + 10 * p27d27push%
sd.dbc = dbc% + debc% * 10 + pbc% * 100
sd.nchw = nchw%
sd.ls = ls%
sd.splt = splt%
sd.nsh = most%
sd.rsa = rsa%
sd.das = das%
sd.dh = dh% + dd89T% * 10 + dd999% * 100
sd.ld = ld%
sd.bigslick = bigslick
sd.dsa = dsa%
sd.bssh = bssh%
sd.deck = deck%
sd.shf = shf
sd.immed = immed%
sd.pbd = pbd% + ptm(1) * 10 + ptm(2) * 100 + ptm(3) * 1000
sd.b27po = b27po% + sh89T% * 10 + sh999% * 100
sd.po6c27 = mc27po(4)
sd.po7c27 = mc27po(5)
sd.po8c27 = mc27po(6)
sd.po9c27 = mc27po(7)
sd.ms89T = ms89T
sd.ss89T = ss89T
sd.sp89T = sp89T
sd.ms999 = ms999
sd.ss999 = ss999
sd.sp999 = sp999
sd.jp999 = jp999
sd.dd = dd% + shmc27% * 10 + ddmc27% * 100
sd.dd3 = dd(3)
sd.dd4 = dd(4)
sd.dd5 = dd(5)
sd.dd6 = dd(6)
sd.dd7 = dd(7)
sd.dd8 = dd(8)
IF LEN(q$) > 80 THEN
    sd.description = MID$(q$, 1, 80)
END IF
IF LEN(q$) < 81 THEN
    sd.description = q$
END IF
PUT #1, , sd
CLOSE #1
' END OF A SOFTWARE MEANS FOR SAVING THE SET OF GAME RULES
'
' Variable dhf% provides a memory element wherein the BIGS907 software
' application stores the user-defined dealer hard finish
' Variable j provides a memory element wherein the BIGS907 software
' application stores the user-defined dealer soft finish
' Variable dfr% provides a memory element wherein the BIGS907 software
' application stores a number representing the target numerical sum
' for the play of the dealer's hard hands and the target numerical sum
' for the play of the dealer's soft hands specified by a strategy
' for the play of the dealer's hands selected from a group consisting
' of the twenty-seven supported strategies for the play of the dealer's
' hand.
z = 0
FOR g = 19 TO 24
    FOR h = 4 TO 10
        IF h + 15 < g THEN h = g - 15
        z = z + 1
        IF g = dhf% AND h = j THEN dfr% = z
    NEXT h
NEXT g
' Array g(84) provides memory elements wherein the BIGS907 software
' application stores values for the target numerical sums corresponding
' to the number used to represent each of eighty-one-supported
' strategies for the use of the hit option. Array h(84) provides memory
' elements wherein the BIGS907 software application stores values for
' the target numerical sum given for the play of the player's soft hands
' elements eighty-two, eighty-three, and eighty four of these arrays
' provide memory elements wherein the BIGS907 software application
' stores data relating to the player's use of the double down,
' surrender, and split options respectively.
z = 0
FOR x = 15 TO 27
    FOR y = 4 TO 12
        IF x > y + 15 THEN y = x - 15
        z = z + 1
        g(z) = x
        h(z) = y
    NEXT y
NEXT x
g(82) = 1000
g(83) = 1000
h(82) = 1000
h(83) = 1000
h(84) = 1000
g(84) = 1000

' the main rountine of the BIGS907 software application begins.
' The main routine uses variables k, l , m and e in
' a nested for next loop to step through each of the
' eleven-thousand-twenty-five combinations of point values that
' the rules might assign to the combination of playing cards in
' the set of hands consisting of the player's initial hand and
' the dealer's initial hand.
'
' variables k and l provide memory elements wherein the BIGS907
' software application stores the number representing the point
' values assigned to a first card and a second card dealt to form the
' player's initial hand. Variable pn% provides a memory element
' wherein the BIGS907 software application store a unique number
' used to identify the point values assigned to the two cards in
' the player's initial hand. The BIGS907 software application uses
' the mathematical equation k / 2 * (27 - k) + l calculate the number
' stored in variable pn%.
' variables m and e provide memory elements wherein the BIGS907
' software application stores the number representing the point
' values assigned to a first card and a second card dealt to form the
' dealer's initial hand. Variable dn% provides a memory element
' wherein the BIGS907 software application store a unique number
' used to identify the point values assigned to the two cards in
' the player's initial hand. The BIGS907 software application uses
' the mathematical equation m / 2 * (27 - m) + e calculate the number
' stored in variable dn%.

' variable pc1 provides a memory element wherein the BIGS907 software
' application stores the value assigned to the first card dealt to the
' player's initial hand.
' variable pc2 provides a memory element wherein the BIGS907 software
' application stores the value assigned to the second card dealt to the
' player's initial hand.
' variable dc1 provides a memory element wherein the BIGS907 software
' application stores the value assigned to the first card dealt to the
' dealer's initial hand.
' variable dc2 provides a memory element wherein the BIGS907 software
' application stores the value assigned to the second card dealt to the
' dealer's initial hand.


FOR k = 13 TO 0 STEP -1
    FOR l = 13 TO k STEP -1
        pn% = k / 2 * (27 - k) + l
        FOR m = 13 TO 0 STEP -1
            FOR e = 13 TO m STEP -1
                dn% = m / 2 * (27 - m) + e
                pc1 = k
                pc2 = l
                dc1 = m
                dc2 = e


                ' Here the BIGS907 software application starts with the user-defined
                ' composition of each deck of playing cards and the user-defined number
                ' of decks in the virtual stack and removes those cards that the dealer
                ' deals to form the player's initial hand and the dealer's initial hand.
 

                FOR x = 0 TO 14
                mc(x) = card(x) * deck%: NEXT x
                FOR x = 0 TO 84
                aq(pn%, dn%, x) = -1: NEXT x
                IF mc(pc1) < 1 THEN mc(22) = mc(pc1) ELSE mc(22) = 1
                IF mc(pc1) = 0 THEN GOTO 456
                mc(pc1) = mc(pc1) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF mc(pc2) < 1 THEN mc(22) = mc(pc2) ELSE mc(22) = 1
                IF mc(pc2) = 0 THEN GOTO 456
                mc(pc2) = mc(pc2) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF mc(dc1) < 1 THEN mc(22) = mc(dc1) ELSE mc(22) = 1
                IF mc(dc1) = 0 THEN GOTO 456
                mc(dc1) = mc(dc1) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF mc(dc2) < 1 THEN mc(22) = mc(dc2) ELSE mc(22) = 1
                IF mc(dc2) = 0 THEN GOTO 456
                mc(dc2) = mc(dc2) - mc(22)
                mc(14) = mc(14) - mc(22)

                ' Here the BIGS907 software application examines initial hands
                ' in search of predetermined-winning-initial hands'. If a
                ' predetermined-winning-initial hand is found then the BIGS907 software
                ' application resolves the game wager.  Variable q# provides a memory
                ' element wherein the BIGS907 software application stores a number
                ' representing the expected value the game wager. If variable q#
                ' equals to 1 then this indicates that the dealer resolves the game
                ' wager by paying the player even odds. If variable q# equals 0,
                ' then this indicates the player's initial hand and the dealer's
                ' initial hand push and the dealer resolves the game wager by
                ' returning the game wager to the player. If variable q# equals -1
                ' then this indicates the dealer resolves the game wager by
                ' collecting the game wager from the player. Array aq provides memory
                ' elements wherein the BIGS907 software application stores the expected
                ' value of the game wager given each of the eleven-thousand-twenty-five
                ' combinations of point values that the rules might assign to the
                ' combination of playing cards in the set of hands consisting of the
                ' player's initial hand and the dealer's initial hand.  If a
                ' predetermined-winning-initial hand is found, then after the dealer
                ' resolves the game wager, the dealer ends the game. The BIGS907
                ' software application ends the game with the GOTO 333 statement.
 
                IF pn% = 0 OR pn% = 26 OR pn% < 14 THEN
                    IF pbd% = 1 THEN
                        IF pn% = 0 AND jojo% = 1 THEN
                            q# = jojopo
                            aq(pn%, dn%, 1) = q#
                            hit(pn%, dn%) = q#
                            br(pn%, dn%) = 1
                            far(pn%, dn%) = 1
                            sar(pn%, dn%) = 1
                            GOTO 333
                        END IF
                        IF pn% = 26 AND bshw% = 1 THEN
                            q# = bigslick
                            aq(pn%, dn%, 1) = q#
                            hit(pn%, dn%) = q#
                            br(pn%, dn%) = 1
                            far(pn%, dn%) = 1
                            sar(pn%, dn%) = 1
                            GOTO 333
                        END IF
                        IF pn% < 14 AND joanca% = 1 THEN
                            q# = joancapo
                            aq(pn%, dn%, 1) = q#
                            hit(pn%, dn%) = q#
                            br(pn%, dn%) = 1
                            far(pn%, dn%) = 1
                            sar(pn%, dn%) = 1
                            GOTO 333
                        END IF
                    END IF
                END IF
                IF pn% = 0 AND jojo% = 1 THEN
                    q# = jojopo
                    IF dn% = 0 AND dwt% <> 2 THEN
                        IF dwt% <> 1 THEN q# = 0
                        IF dwt% = 1 THEN q# = -1
                    END IF
                    aq(pn%, dn%, 1) = q#
                    hit(pn%, dn%) = q#
                    br(pn%, dn%) = 1
                    far(pn%, dn%) = 1
                    sar(pn%, dn%) = 1
                    GOTO 333
                END IF
                IF dn% = 0 AND jojo% = 1 THEN
                    q# = -1
                    hit(pn%, 0) = q#
                    aq(pn%, dn%, 1) = q#
                    br(pn%, 0) = 1
                    far(pn%, 0) = 1
                    sar(pn%, 0) = 1
                    GOTO 333
                END IF
                IF pn% = 26 AND bshw% = 1 THEN
                    q# = bigslick
                    IF dn% = 26 AND dwt% <> 2 THEN
                        IF dwt% <> 1 AND dwt% <> 2 THEN q# = 0
                        IF dwt% = 1 THEN q# = -1
                    END IF
                    aq(pn%, dn%, 1) = q#
                    hit(26, dn%) = q#
                    br(26, dn%) = 1
                    far(26, dn%) = 1
                    sar(26, dn%) = 1
                    GOTO 333
                END IF
                IF dn% = 26 AND bshw% = 1 THEN
                    q# = -1
                    hit(pn%, 26) = q#
                    aq(pn%, dn%, 1) = q#
                    br(pn%, 26) = 1: far(pn%, 26) = 1
                    sar(pn%, 26) = 1
                    GOTO 333
                END IF
                IF pn% < 14 AND joanca% = 1 THEN
                    q# = joancapo
                    IF dn% = 0 THEN q# = -1
                    IF dn% < 14 AND dwt% <> 2 THEN
                        IF dwt% <> 1 AND dwt% <> 2 THEN q# = 0
                        IF dwt% = 1 THEN q# = -1
                    END IF
                    aq(pn%, dn%, 1) = q#
                    hit(pn%, dn%) = q#
                    br(pn%, dn%) = 1
                    far(pn%, dn%) = 1
                    sar(pn%, dn%) = 1
                    GOTO 333
                END IF
                IF dn% < 14 AND joanca% = 1 THEN
                    q# = -1
                    hit(pn%, dn%) = q#
                    aq(pn%, dn%, 1) = q#
                    br(pn%, dn%) = 1
                    far(pn%, dn%) = 1
                    sar(pn%, dn%) = 1
                    GOTO 333
                END IF


                ' If the player does not have a predetermined-winning-initial hand and
                ' the dealer does not have a predetermined-winning-initial hand, then
                ' the BIGS907 software application loads the dealer finish
                ' probabilities of the dealer's initial hand from array dbr
                ' into array df and loads the player finish probabilities of the
                ' player's initial hand from array pbr into array f.

                FOR y = 0 TO 14
                    df(y) = dbr(pn%, dn%, dfr%, y)
                NEXT y
                FOR x = 1 TO 81
                    FOR y = 0 TO 32
                        f(x, y) = pbr(pn%, dn%, x, y)
                NEXT y: NEXT x

                ' Subroutine 888 identifies the player's best possible strategy for
                ' the use of the hit option by comparing the expected value of the
                ' game wager of each of the eighty-one supported strategies.

                GOSUB 888

                ' Subroutine 222 finds the expected value of doubling down.
                ' Subrountine 234 finds the expected value of surrendering.
                ' If any hand that includes at least joker has a value of
                ' twenty-seven points and the player has a hand that includes
                ' at least one joker, then the player must stand.

                IF jo27% <> 1 OR pn% > 13 THEN
                    IF dh% < 1 OR dh% > 2 THEN GOSUB 222
                    IF dh% = 1 THEN
                        IF (15 > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                            GOSUB 222
                        END IF
                    END IF
                    IF dh% = 2 THEN
                        IF (28 - ld% > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                            GOSUB 222
                        END IF
                    END IF
                    IF ls% = 1 THEN GOSUB 234
                END IF
                ERASE df: ERASE f
                IF jo27% = 1 AND pn% = 0 THEN GOTO 333
                IF (pc1 <> pc2 OR splt% <> 1) THEN GOTO 333 ELSE split% = 1
                FOR pc2 = 13 TO 0 STEP -1
                    IF pc1 <= pc2 THEN pn% = pc1 / 2 * (27 - pc1) + pc2
                    IF pc1 > pc2 THEN pn% = pc2 / 2 * (27 - pc2) + pc1
                    IF pc2 < pc1 THEN
                        FOR y = 0 TO 14
                            df(y) = dfar(pn%, dn%, dfr%, y)
                        NEXT y
                    END IF
                    IF pc2 = pc1 THEN
                        FOR y = 0 TO 14
                            df(y) = dsar(pn%, dn%, dfr%, y)
                        NEXT y
                    END IF
                    IF pc2 > pc1 THEN
                        FOR y = 0 TO 14
                            df(y) = dsar(pn%, dn%, dfr%, y)
                        NEXT y
                    END IF
                    FOR x = 0 TO 14
                    mc(x) = card(x) * deck%: NEXT x
                    IF mc(pc1) < 1 THEN mc(22) = mc(pc1) ELSE mc(22) = 1
                    IF mc(pc1) = 0 THEN GOTO 444
                    mc(pc1) = mc(pc1) - mc(22)
                    mc(14) = mc(14) - mc(22)
                    IF mc(pc1) < 1 THEN mc(22) = mc(pc1) ELSE mc(22) = 1
                    IF mc(pc1) = 0 THEN GOTO 444
                    mc(pc1) = mc(pc1) - mc(22)
                    mc(14) = mc(14) - mc(22)
                    IF mc(dc1) < 1 THEN mc(22) = mc(dc1) ELSE mc(22) = 1
                    IF mc(dc1) = 0 THEN GOTO 444
                    mc(dc1) = mc(dc1) - mc(22)
                    mc(14) = mc(14) - mc(22)
                    IF mc(dc2) < 1 THEN mc(22) = mc(dc2) ELSE mc(22) = 1
                    IF mc(dc2) = 0 THEN GOTO 444
                    mc(dc2) = mc(dc2) - mc(22)
                    mc(14) = mc(14) - mc(22)
                    IF most% = 2 THEN GOSUB 1111
                    IF most% = 3 THEN
                        IF pc1 <> 1 OR rsa% = 1 THEN
                            GOSUB 1313
                        END IF
                        IF pc1 = 1 AND rsa% <> 1 THEN
                            GOSUB 1111
                        END IF
                    END IF
                    IF most% > 3 THEN
                        IF pc1 <> 1 OR rsa% = 1 THEN
                            GOSUB 4343
                        END IF
                        IF pc1 = 1 AND rsa% <> 1 THEN
                            GOSUB 1111
                        END IF
                    END IF
                    pshc(0, 2) = pshc(0, 2) / pshc(0, 1)
                    IF pc2 <> pc1 THEN
                        splitprob# = mc(pc2) / mc(14) / (1 - ((mc(pc1) - pshc(0, 2) * mc(14)) / (mc(14) - pshc(0, 2) * mc(14))))
                    END IF
                    IF pc2 = pc1 THEN splitprob# = pshc(0, 2)
                    IF pc1 = 1 AND dsa% <> 1 THEN
                        dadd(0) = pc1 + pc2 - 1
                        f(0, dadd(0)) = f(0, dadd(0)) + splitprob#
                    END IF
                    IF mc(pc2) < 1 THEN mc(22) = mc(pc2) ELSE mc(22) = 1
                    IF mc(pc2) = 0 THEN GOTO 444
                    mc(pc2) = mc(pc2) - mc(22)
                    mc(14) = mc(14) - mc(22)
                    probs# = probs# + splitprob#
                    IF pn% = 26 THEN
                        IF bssh% = 1 THEN
                            splithands(pc2, dn%) = bigslick * splitprob#
                            GOTO 444
                        END IF
                        IF immed% = 1 THEN
                            splithands(pc2, dn%) = splitprob#
                            GOTO 444
                        END IF
                    END IF
                    IF pn% < 14 THEN
                        IF joancash% = 1 THEN
                            splithands(pc2, dn%) = joancapo * splitprob#
                            GOTO 444
                        END IF
                        IF immed% = 1 AND jo27% = 1 THEN
                            splithands(pc2, dn%) = splitprob#
                            GOTO 444
                        END IF
                        IF jowi% = 1 THEN
                            splithands(pc2, dn%) = splitprob#
                            GOTO 444
                        END IF
                    END IF
                    IF pc1 <> 1 OR dsa% = 1 THEN
                        IF pc1 > pc2 THEN
                            FOR x = 1 TO 81
                                FOR y = 0 TO 32
                                    f(x, y) = pfar(pn%, dn%, x, y)
                                NEXT y
                            NEXT x
                        END IF
                        IF pc1 = pc2 THEN
                            FOR x = 1 TO 81
                                FOR y = 0 TO 32
                                    f(x, y) = psar(pn%, dn%, x, y)
                                NEXT y
                            NEXT x
                        END IF
                        IF pc1 < pc2 THEN
                            FOR x = 1 TO 81
                                FOR y = 0 TO 32
                                    f(x, y) = psar(pn%, dn%, x, y)
                                NEXT y
                            NEXT x
                        END IF
                        GOSUB 888
                        splithands(pc2, dn%) = splithands(pc2, dn%) * splitprob#
                        IF das% = 1 THEN
                            IF jo27% <> 1 OR pn% > 13 THEN
                                IF dh% < 1 OR dh% > 2 THEN GOSUB 222
                                IF dh% = 1 THEN
                                    IF (15 > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                                        GOSUB 222
                                    END IF
                                END IF
                                IF dh% = 2 THEN
                                    IF (28 - ld% > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                                        GOSUB 222
                                    END IF
                                END IF
                            END IF
                        END IF
                        ERASE df: ERASE f
                    END IF
                444 NEXT pc2
                q# = 0
                pc2 = pc1
                pn% = pc1 / 2 * (27 - pc1) + pc2
                IF pc1 = 1 AND dsa% <> 1 THEN
                    FOR y = 0 TO 14
                        df(y) = dfar(pn%, dn%, dfr%, y)
                    NEXT y
                    IF joancash% = 1 THEN
                        q# = q# + f(0, 0) * df(14) * joancapo
                    END IF
                    IF immed% = 1 AND jo27% = 1 THEN
                        q# = q# + f(0, 0) * df(14)
                    END IF
                    IF jowi% = 1 THEN
                        q# = q# + f(0, 0) * df(14)
                    END IF
                    IF q# = 0 THEN
                        f(0, 1) = f(0, 1) + f(0, 0)
                    END IF
                    FOR y = 1 TO 13
                        FOR z = 2 TO dhf% - 15
                            IF debc% <> 1 AND debc% <> 2 THEN
                                q# = q# + f(0, y) * df(27 - dhf% + z)
                            END IF
                            IF debc% = 1 OR debc% = 2 THEN
                                IF z < 13 - y AND debc% = 2 THEN
                                    q# = q# - f(0, y) * df(27 - dhf% + z)
                                END IF
                                IF z = 13 - y THEN
                                    IF dwt% = 1 AND debc% = 2 THEN
                                        q# = q# - f(0, y) * df(27 - dhf% + z)
                                    END IF
                                    IF dwt% = 2 THEN
                                        q# = q# + f(0, y) * df(27 - dhf% + z)
                                    END IF
                                END IF
                                IF z > 13 - y THEN
                                    q# = q# + f(0, y) * df(27 - dhf% + z)
                                END IF
                            END IF
                        NEXT z
                        FOR z = 0 TO 28 - dhf%
                            IF z = 28 - dhf% THEN
                                IF y = 13 THEN
                                    IF bssh% = 1 THEN
                                        q# = q# + f(0, y) * df(14) * bigslick
                                    END IF
                                    IF bssh% <> 1 THEN
                                        IF immed% = 1 THEN
                                            q# = q# + f(0, y) * df(z)
                                        END IF
                                        IF immed% <> 1 THEN
                                            q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                                        END IF
                                    END IF
                                END IF
                                IF y < 13 THEN
                                    IF debc% <> 1 AND debc% <> 2 THEN
                                        q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                                    END IF
                                    IF debc% = 1 OR debc% = 2 THEN
                                        IF d28p% = 1 THEN
                                            IF z + dhf% - 27 < 13 - y THEN
                                                q# = q# - f(0, y) * (df(z) - df(z) * (d28p% - d28w%))
                                            END IF
                                            IF z + dhf% - 27 = 13 - y THEN
                                                IF dwt% = 1 THEN
                                                    q# = q# - f(0, y) * (df(z) - df(z) * (d28p% - d28w%))
                                                END IF
                                                IF dwt% = 2 THEN
                                                    q# = q# + f(0, y) * (df(z) - df(z) * (d28p% + d28w%))
                                                END IF
                                            END IF
                                        END IF
                                        IF d28p% = 0 THEN
                                            IF z + dhf% - 27 < 13 - y AND debc% = 2 THEN
                                                q# = q# - f(0, y) * df(z)
                                            END IF
                                            IF z + dhf% - 27 = 13 - y THEN
                                                IF dwt% = 1 AND debc% = 2 THEN
                                                    q# = q# - f(0, y) * df(z)
                                                END IF
                                                IF dwt% = 2 THEN
                                                    q# = q# + f(0, y) * df(z)
                                                END IF
                                            END IF
                                        END IF
                                    END IF
                                END IF
                            END IF
                            IF z < 28 - dhf% THEN
                                IF z < y + 14 - dhf% THEN
                                    IF y = 13 AND bssh% = 1 THEN
                                        q# = q# + f(0, y) * df(z) * bigslick
                                    END IF
                                    IF y <> 13 OR bssh% <> 1 THEN
                                        q# = q# + f(0, y) * df(z)
                                    END IF
                                END IF
                                IF z > y + 14 - dhf% THEN
                                    q# = q# - f(0, y) * df(z)
                                END IF
                            END IF
                            IF z < 27 - dhf% AND z = y + 14 - dhf% THEN
                                IF dwt% = 1 THEN q# = q# - f(0, y) * df(z)
                                IF dwt% = 2 THEN q# = q# + f(0, y) * df(z)
                            END IF
                            IF z = 27 - dhf% AND y = 13 THEN
                                IF bssh% = 1 THEN
                                    q# = q# + f(0, y) * df(z) * bigslick
                                END IF
                                IF bssh% <> 1 THEN
                                    IF immed% = 1 THEN
                                        q# = q# + f(0, y) * df(z)
                                    END IF
                                    IF immed% <> 1 THEN
                                        IF dwt% = 1 AND p27d27push% <> 1 THEN
                                            q# = q# - f(0, y) * df(z)
                                        END IF
                                        IF dwt% = 2 AND p27d27push% <> 1 THEN
                                            q# = q# + f(0, y) * df(z)
                                        END IF
                                    END IF
                                END IF
                            END IF
                    NEXT z: NEXT y
                    ERASE df: ERASE f
                END IF
                IF pc1 <> 1 OR dsa% = 1 THEN
                    FOR x = 0 TO 13
                        q# = q# + splithands(x, dn%)
                    NEXT x
                END IF
                ERASE splithands: ERASE df: probs# = 0
                300 q# = q# * pshc(0, 1)
                aq(pn%, dn%, 82) = q#
                split = q#
                IF q# > hit(pn%, dn%) OR ep% = 1 THEN
                    hit(pn%, dn%) = q#
                    br(pn%, dn%) = 82
                END IF
                333 FOR y = 0 TO 14
                    df(y) = dbr(pn%, dn%, dfr%, y)
                NEXT y
                CLS
                account# = 0
                PRINT "          player cards are"; pc1; "and"; pc2;
                PRINT "dealer cards are"; dc1; "and"; dc2
                PRINT "                  given the user input deck composition,"
                PRINT "                    and user defined set of game rules,"
                PRINT "                 here are the dealer finish probabilities,"
                PRINT "     and expected value of the available player ";
                PRINT "response strategies"
                PRINT " "
                PRINT "    ";
                FOR x = 0 TO 27 - dhf% + d28p%
                    PRINT x + dhf%; "   ";
                NEXT x
                PRINT " bust"
                account# = account# + df(13)
                PRINT "   ";
                FOR y = 0 TO 14
                    IF y = 28 - dhf% + d28p% THEN y = 14
                    IF y <> 14 THEN
                        PRINT USING "####.##"; df(y) / (df(13) + 1E-08) * 100;
                    END IF
                    IF y = 14 THEN
                        q4# = (df(14) - df(28 - dhf%) * d28p%) / (df(13) + 1E-08) * 100
                        PRINT USING "####.##"; q4#;
                    END IF
                NEXT y: PRINT " "
                PRINT "total hands accounted for are ";
                PRINT USING "###.###"; account# * 100;
                PRINT "% of all possible"
                automatic% = 0
                IF pn% = 26 AND bshw% = 1 THEN automatic% = 1
                IF dn% = 26 AND bshw% = 1 THEN automatic% = 1
                IF dn% = 0 AND jojo% = 1 THEN automatic% = 1
                IF joanca% = 1 THEN
                    IF dn% > 0 AND dn% < 14 THEN automatic% = 1
                END IF
                IF jo27% = 1 AND pn% < 14 THEN automatic% = 1
                IF automatic% = 1 THEN
                    PRINT MID$(o$, 81 * 5 + 1, 5);
                    PRINT " stand strategy yields a ";
                    PRINT "win minus loss expectation of";
                    PRINT USING "##.####"; aq(pn%, dn%, 1)
                END IF
                IF NOT automatic% = 1 THEN
                    PRINT MID$(o$, standr% * 5 + 1, 5);
                    PRINT " stand strategy yields a ";
                    PRINT "win minus loss expectation of";
                    PRINT USING "##.####"; stand
                    IF dh% = 0 THEN
                        PRINT "double down strategy yields a ";
                        PRINT "win minus loss expectation of";
                        PRINT USING "##.####"; ddown
                    END IF
                    IF dh% = 1 THEN
                        IF (15 > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                            PRINT "double down strategy yields a ";
                            PRINT "win minus loss expectation of";
                            PRINT USING "##.####"; ddown
                        END IF
                    END IF
                    IF dh% = 2 THEN
                        IF (28 - ld% > pc1 + pc2 AND pc1 + pc2 > ld% - 1) THEN
                            PRINT "double down strategy yields a ";
                            PRINT "win minus loss expectation of";
                            PRINT USING "##.####"; ddown
                        END IF
                    END IF
                    IF ls% = 1 THEN
                        PRINT "surrender   strategy yields ";
                        PRINT "a win minus loss expectation of";
                        PRINT USING "##.####"; srndr
                    END IF
                    IF splt% = 1 THEN
                        IF pc1 = pc2 THEN
                            PRINT USING "##"; pc1;
                            PRINT " ";
                            PRINT USING "##"; pc1;
                            PRINT " split strategy yields ";
                            PRINT "a win minus loss expectation of";
                            PRINT USING "##.####"; split
                        END IF
                    END IF
                    PRINT ""
                    IF br(pn%, dn%) < 82 THEN
                        PRINT MID$(o$, br(pn%, dn%) * 5 + 1, 5);
                        PRINT " stand strategy ";
                        PRINT "is found to be the optimal strategy. "
                    END IF
                    IF br(pn%, dn%) = 82 THEN
                        PRINT USING "##"; pc1;
                        PRINT " ";
                        PRINT USING "##"; pc1;
                        PRINT " split strategy ";
                        PRINT "is found to be the optimal strategy. "
                    END IF
                    IF br(pn%, dn%) = 83 THEN
                        PRINT "surrender strategy   ";
                        PRINT "is found to be the optimal strategy. "
                    END IF
                    IF br(pn%, dn%) = 84 THEN
                        PRINT "double down strategy ";
                        PRINT "is found to be the optimal strategy. "
                    END IF
                END IF
456 split% = 0: NEXT e: NEXT m: NEXT l: NEXT k
457 total# = 0
FOR k = 0 TO 13
    FOR l = k TO 13
        pn% = k / 2 * (27 - k) + l
        FOR m = 0 TO 13
            FOR e = m TO 13
                dn% = m / 2 * (27 - m) + e
                pc1 = k
                pc2 = l
                dc1 = m
                dc2 = e
                FOR x = 0 TO 14
                    mc(x) = card(x) * deck%
                NEXT x
                IF mc(pc1) < 1 THEN mc(22) = mc(pc1) ELSE mc(22) = 1
                IF mc(pc1) = 0 THEN GOTO 567
                prob(pn%, dn%) = mc(pc1) / mc(14)
                mc(pc1) = mc(pc1) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF mc(pc2) < 1 THEN mc(22) = mc(pc2) ELSE mc(22) = 1
                IF mc(pc2) = 0 THEN GOTO 567
                prob(pn%, dn%) = prob(pn%, dn%) * mc(pc2) / mc(14)
                mc(pc2) = mc(pc2) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF pc1 <> pc2 THEN prob(pn%, dn%) = prob(pn%, dn%) * 2
                IF mc(dc1) < 1 THEN mc(22) = mc(dc1) ELSE mc(22) = 1
                IF mc(dc1) = 0 THEN GOTO 567
                prob(pn%, dn%) = prob(pn%, dn%) * mc(dc1) / mc(14)
                mc(dc1) = mc(dc1) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF mc(dc2) < 1 THEN mc(22) = mc(dc2) ELSE mc(22) = 1
                IF mc(dc2) = 0 THEN GOTO 567
                prob(pn%, dn%) = prob(pn%, dn%) * mc(dc2) / mc(14)
                mc(dc2) = mc(dc2) - mc(22)
                mc(14) = mc(14) - mc(22)
                IF dc1 <> dc2 THEN prob(pn%, dn%) = prob(pn%, dn%) * 2
                total# = total# + hit(pn%, dn%) * prob(pn%, dn%)
                probs# = probs# + prob(pn%, dn%)
567 NEXT e: NEXT m: NEXT l: NEXT k
v$ = files$ + "b.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(num)
FOR x = 0 TO 104
    FOR y = 0 TO 104
        w = w + 1
        num.far = far(x, y)
        num.sar = sar(x, y)
        num.r = br(x, y)
        num.hit = hit(x, y)
        PUT #1, w, num
    NEXT y
NEXT x
CLOSE #1
v$ = files$ + "t.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        FOR z = 0 TO 84
            w = w + 1
            database.dat0 = aq(x * 15 + 0, y, z)
            database.dat1 = aq(x * 15 + 1, y, z)
            database.dat2 = aq(x * 15 + 2, y, z)
            database.dat3 = aq(x * 15 + 3, y, z)
            database.dat4 = aq(x * 15 + 4, y, z)
            database.dat5 = aq(x * 15 + 5, y, z)
            database.dat6 = aq(x * 15 + 6, y, z)
            database.dat7 = aq(x * 15 + 7, y, z)
            database.dat8 = aq(x * 15 + 8, y, z)
            database.dat9 = aq(x * 15 + 9, y, z)
            database.dat10 = aq(x * 15 + 10, y, z)
            database.dat11 = aq(x * 15 + 11, y, z)
            database.dat12 = aq(x * 15 + 12, y, z)
            database.dat13 = aq(x * 15 + 13, y, z)
            database.dat14 = aq(x * 15 + 14, y, z)
            PUT #1, w, database
        NEXT z
    NEXT y
NEXT x
CLOSE #1
v$ = files$ + "p.dat"
w = 0
OPEN v$ FOR RANDOM AS #1 LEN = LEN(database)
FOR x = 0 TO 6
    FOR y = 0 TO 104
        w = w + 1
        database.dat0 = prob(x * 15 + 0, y)
        database.dat1 = prob(x * 15 + 1, y)
        database.dat2 = prob(x * 15 + 2, y)
        database.dat3 = prob(x * 15 + 3, y)
        database.dat4 = prob(x * 15 + 4, y)
        database.dat5 = prob(x * 15 + 5, y)
        database.dat6 = prob(x * 15 + 6, y)
        database.dat7 = prob(x * 15 + 7, y)
        database.dat8 = prob(x * 15 + 8, y)
        database.dat9 = prob(x * 15 + 9, y)
        database.dat10 = prob(x * 15 + 10, y)
        database.dat11 = prob(x * 15 + 11, y)
        database.dat12 = prob(x * 15 + 12, y)
        database.dat13 = prob(x * 15 + 13, y)
        database.dat14 = prob(x * 15 + 14, y)
        PUT #1, w, database
    NEXT y
NEXT x
CLOSE #1
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, ""
PRINT #1, "END:   "; DATE$; " "; TIME$
CLOSE #1
IF card(0) = 0 THEN I% = 1: j% = 13: k% = 14
IF card(0) <> 0 THEN I% = 0: j% = 15: k% = 0
v$ = files$ + "o.txt"
321 OPEN v$ FOR OUTPUT AS #1
PRINT #1, "the set of combination-dependent-playing-strategy tables"
PRINT #1, " "
PRINT #1, t$
PRINT #1, " "

b$ = "000A02030405060708090T0J0Q0KAAA2A3A4A5A6A7A8A9ATAJAQAK22"
b$ = b$ + "232425262728292T2J2Q2K333435363738393T3J3Q3K4445464"
b$ = b$ + "748494T4J4Q4K55565758595T5J5Q5K666768696T6J6Q6K7778"
b$ = b$ + "797T7J7Q7K88898T8J8Q8K999T9J9Q9KTTTJTQTKJJJQJKQQQKKK"

b1$ = "00A02030405060708090T0J0Q0K0AA2A3A4A5A6A7A8A9ATAJAQAKA22"
b1$ = b1$ + "32425262728292T2J2Q2K233435363738393T3J3Q3K34454647"
b1$ = b1$ + "48494T4J4Q4K45565758595T5J5Q5K566768696T6J6Q6K67787"
b1$ = b1$ + "97T7J7Q7K78898T8J8Q8K899T9J9Q9K9TTJTQTKTJJQJKJQQKQKK"

FOR v = 0 TO 6
    CLS
    PRINT #1, "The combination-dependent-playing-strategy table found"
    PRINT #1, "for the player's initial hands. It displays the best"
    PRINT #1, "strategies for the play of the player's hands"
    PRINT #1, "in response to dealer hands ";
    PRINT #1, MID$(b$, (v * j% + k% + 1) * 2 - 1, 2);
    PRINT #1, " to ";
    PRINT #1, MID$(b$, (v * j% + k% + j%) * 2 - 1, 2)
    PRINT #1, " "
    FOR x = 0 TO j%
        IF x > 0 THEN
            PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
        END IF
        PRINT #1, "     ";
    NEXT x
    PRINT #1, " "
    PRINT #1, "       "
    FOR w = I% TO 13
        FOR x = w TO 13
            pn% = w / 2 * (27 - w) + x
            FOR y = 0 TO j%
                IF y = 0 THEN PRINT #1, MID$(b$, pn% * 2 + 1, 2); "  ";
                IF y <> 0 THEN
                    IF (w - 1) * (x - 1) <> 0 THEN
                        IF w + x <= h(br(pn%, v * j% + y - 1 + k%)) THEN
                            IF w + x >= g(br(pn%, v * j% + y - 1 + k%)) THEN
                                PRINT #1, "Stand  ";
                            END IF
                            IF w + x < g(br(pn%, v * j% + y - 1 + k%)) THEN
                                PRINT #1, MID$(o$, br(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                PRINT #1, "  ";
                            END IF
                        END IF
                        IF w + x > h(br(pn%, v * j% + y - 1 + k%)) THEN
                            IF w + x >= g(br(pn%, v * j% + y - 1 + k%)) THEN
                                PRINT #1, "Stand  ";
                            END IF
                            IF w + x < g(br(pn%, v * j% + y - 1 + k%)) THEN
                                PRINT #1, MID$(n$, br(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                PRINT #1, "  ";
                            END IF
                        END IF
                    END IF
                    IF (w - 1) * (x - 1) = 0 THEN
                        IF w + x <= h(br(pn%, v * j% + y - 1 + k%)) + 1 THEN
                            IF w + x >= h(br(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                PRINT #1, "Stand  ";
                            END IF
                            IF w + x < h(br(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                PRINT #1, MID$(o$, br(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                PRINT #1, "  ";
                            END IF
                        END IF
                        IF w + x > h(br(pn%, v * j% + y - 1 + k%)) + 1 THEN
                            IF w + x >= h(br(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                PRINT #1, "Stand  ";
                            END IF
                            IF w + x < h(br(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                PRINT #1, MID$(n$, br(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                PRINT #1, "  ";
                            END IF
                        END IF
                    END IF
                END IF
    NEXT y: PRINT #1, "  "; MID$(b$, pn% * 2 + 1, 2): NEXT x: NEXT w
    PRINT #1, " "
    FOR x = 0 TO j%
        IF x = 0 THEN PRINT #1, "     ";
        IF x > 0 THEN
            PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
            PRINT #1, "     ";
        END IF
    NEXT x
    PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
    CLS
NEXT v
PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
PRINT #1, " "
FOR v = 0 TO 6
    PRINT #1, "The combination-dependent-playing-strategy table found"
    PRINT #1, "for the player's initial hands. It displays data about"
    PRINT #1, "the expected values of the game wager calculated for"
    PRINT #1, "the best strategies for the play of the player's hands"
    PRINT #1, "in response to dealer hands ";
    PRINT #1, MID$(b$, (v * j% + k% + 1) * 2 - 1, 2);
    PRINT #1, " to ";
    PRINT #1, MID$(b$, (v * j% + k% + j%) * 2 - 1, 2)
    PRINT #1, " "
    FOR x = 0 TO j%
        IF x > 0 THEN
            PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
        END IF
        PRINT #1, "     ";
    NEXT x
    PRINT #1, " "
    PRINT #1, "       "
    FOR x = k% TO 104
        FOR y = 0 TO j%
            IF y = 0 THEN PRINT #1, MID$(b$, x * 2 + 1, 2); " ";
            IF y > 0 THEN
                PRINT #1, USING "##.###"; hit(x, v * j% + y - 1 + k%);
                PRINT #1, " ";
            END IF
    NEXT y: PRINT #1, "  "; MID$(b$, x * 2 + 1, 2): NEXT x
    PRINT #1, " "
    FOR x = 0 TO j%
        IF x = 0 THEN PRINT #1, "     ";
        IF x > 0 THEN
            PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
            PRINT #1, "     ";
        END IF
    NEXT x
    PRINT #1, " ": PRINT #1, " "
    IF v = 6 THEN
        PRINT #1, "total win minus loss expectation is ";
        PRINT #1, USING "##.#####"; total#;
        PRINT #1, " or ";
        PRINT #1, USING "###.###"; total# * 100;
        PRINT #1, "%"
    END IF
    PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
    CLS
NEXT v
PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
IF splt% = 1 THEN
    FOR v = 0 TO 6
        CLS
        PRINT #1, "The combination-dependent-playing-strategy table found for"
        PRINT #1, "the player's post-split hands wherein: The value of pc1"
        PRINT #1, "is equal to or greater than the value of pc2. It displays"
        PRINT #1, "the best strategies for the play of the player's hands"
        PRINT #1, "in response to dealer hands ";
        PRINT #1, MID$(b$, (v * j% + k% + 1) * 2 - 1, 2);
        PRINT #1, " to ";
        PRINT #1, MID$(b$, (v * j% + k% + j%) * 2 - 1, 2)
        PRINT #1, " "
        FOR x = 0 TO j%
            IF x > 0 THEN
                PRINT #1, MID$(b$, (v * j% + x) * 2 - 1 + k%, 2);
            END IF
            PRINT #1, "     ";
        NEXT x
        PRINT #1, " "
        PRINT #1, "       "
        FOR w = I% TO 13
            FOR x = w TO 13
                pn% = w / 2 * (27 - w) + x
                FOR y = 0 TO j%
                    IF y = 0 THEN PRINT #1, MID$(b1$, pn% * 2 + 1, 2); "  ";
                    IF y <> 0 THEN
                        IF (w - 1) * (x - 1) <> 0 THEN
                            IF w + x <= h(far(pn%, v * j% + y - 1 + k%)) THEN
                                IF w + x >= g(far(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < g(far(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, MID$(o$, far(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                            IF w + x > h(far(pn%, v * j% + y - 1 + k%)) THEN
                                IF w + x >= g(far(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < g(far(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, MID$(n$, far(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                        END IF
                        IF (w - 1) * (x - 1) = 0 THEN
                            IF w + x <= h(far(pn%, v * j% + y - 1 + k%)) + 1 THEN
                                IF w + x >= h(far(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < h(far(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, MID$(o$, far(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                            IF w + x > h(far(pn%, v * j% + y - 1 + k%)) + 1 THEN
                                IF w + x >= h(far(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < h(far(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, MID$(n$, far(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                        END IF
                        IF far(pn%, v * j% + y - 1 + k%) <> br(pn%, v * j% + y - 1 + k%) THEN
                            PRINT #1, "* ";
                        END IF
                        IF far(pn%, v * j% + y - 1 + k%) = br(pn%, v * j% + y - 1 + k%) THEN
                            PRINT #1, "  ";
                        END IF
                    END IF
        NEXT y: PRINT #1, "  "; MID$(b$, pn% * 2 + 1, 2): NEXT x: NEXT w
        PRINT #1, " "
        FOR x = 0 TO j%
            IF x > 0 THEN
                PRINT #1, MID$(b1$, (v * j% + k% + x) * 2 - 1, 2);
            END IF
            PRINT #1, "     ";
        NEXT x
        PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
        CLS
    NEXT v
    PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
    PRINT #1, " "
    FOR v = 0 TO 6
        CLS
        PRINT #1, "The combination-dependent-playing-strategy table found for"
        PRINT #1, "the player's post-split hands wherein: The value of pc1"
        PRINT #1, "is less than or equal to the value of pc2. It displays"
        PRINT #1, "the best strategies for the play of the player's hands"
        PRINT #1, "in response to dealer hands ";
        PRINT #1, MID$(b$, (v * j% + k% + 1) * 2 - 1, 2);
        PRINT #1, " to ";
        PRINT #1, MID$(b$, (v * j% + k% + j%) * 2 - 1, 2)
        PRINT #1, " "
        FOR x = 0 TO j%
            IF x > 0 THEN
                PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
            END IF
            PRINT #1, "     ";
        NEXT x
        PRINT #1, " "
        PRINT #1, "       "
        FOR w = I% TO 13
            FOR x = w TO 13
                pn% = w / 2 * (27 - w) + x
                FOR y = 0 TO j%
                    IF y = 0 THEN PRINT #1, MID$(b$, pn% * 2 + 1, 2); "  ";
                    IF y <> 0 THEN
                        IF (w - 1) * (x - 1) <> 0 THEN
                            IF w + x <= h(sar(pn%, v * j% + y - 1 + k%)) THEN
                                IF w + x >= g(sar(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < g(sar(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, MID$(o$, sar(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                            IF w + x > h(sar(pn%, v * j% + y - 1 + k%)) THEN
                                IF w + x >= g(sar(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < g(sar(pn%, v * j% + y - 1 + k%)) THEN
                                    PRINT #1, MID$(n$, sar(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                        END IF
                        IF (w - 1) * (x - 1) = 0 THEN
                            IF w + x <= h(sar(pn%, v * j% + y - 1 + k%)) + 1 THEN
                                IF w + x >= h(sar(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < h(sar(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, MID$(o$, sar(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                            IF w + x > h(sar(pn%, v * j% + y - 1 + k%)) + 1 THEN
                                IF w + x >= h(sar(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, "Stand";
                                END IF
                                IF w + x < h(sar(pn%, v * j% + y - 1 + k%)) + 2 THEN
                                    PRINT #1, MID$(n$, sar(pn%, v * j% + y - 1 + k%) * 5 + 1, 5);
                                END IF
                            END IF
                        END IF
                        IF sar(pn%, v * j% + y - 1 + k%) <> br(pn%, v * j% + y - 1 + k%) THEN
                            PRINT #1, "* ";
                        END IF
                        IF sar(pn%, v * j% + y - 1 + k%) = br(pn%, v * j% + y - 1 + k%) THEN
                            PRINT #1, "  ";
                        END IF
                    END IF
        NEXT y: PRINT #1, "  "; MID$(b$, pn% * 2 + 1, 2): NEXT x: NEXT w
        PRINT #1, " "
        FOR x = 0 TO j%
            IF x > 0 THEN
                PRINT #1, MID$(b$, (v * j% + k% + x) * 2 - 1, 2);
            END IF
            PRINT #1, "     ";
        NEXT x
        PRINT #1, " ": PRINT #1, " ": PRINT #1, " ": PRINT #1, " "
        CLS
    NEXT v
END IF
CLOSE #1: END


