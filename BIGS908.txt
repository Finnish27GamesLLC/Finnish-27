'I. GENERAL DESCRIPTION OF FUNCTIONS

'The BIGS908 software application enables the user to simulate
'the play of millions of rounds of the any of a subset of
'optional embodiments of the double-exposure game of the present
'invention. Each of the subset of optional embodiments is subject
'to a user-defined set of game rules that includes the following
'three rules. The dealer forms the player's initial hand by
'dealing two cards. The dealer forms the dealer's initial hand by
'dealing two cards. The dealer reveals the card ranks assigned to
'the two cards in the dealer's initial hand before proceeding to
'any additional steps required to complete the player's hand.

'II. LOADING DATA ABOUT A SET OF STRATEGY TABLES AND
'MATCHING-USER-DEFINED SET OF GAME RULES

'Go ahead and start the BIGS908 software application. The BIGS908
'software application displays some introductory remarks. Go
'ahead and read those.

'After displaying some introductory remarks, the BIGS908 software
'application prompts the user to 'enter the folder/file name
'prefix of the set of files containing data about the set of
'strategy tables and matching-user-defined set of game rules to
'be loaded into program memory'. Here the BIGS908 software
'application is giving the user an opportunity to load into
'program memory data about the set of strategy tables and the
'matching user-defined set of game rules for an optional
'embodiment of the double-exposure game of the present invention.

'The BIGS908 software application enables the user to load into
'program memory the contents of a set of files saved by the
'BIGS921 software application. The BIGS921 software application
'saves the user-defined set of game rules to a data file named
'with an 'a' character as the file name suffix. The BIGS921
'software application saves the data about a total-dependent-
'basic-strategy table in the format of a set of combination-
'dependent-playing-strategy tables to a data file named with a
''b' character as the file name suffix. If the user chooses to
'load a set of files saved by the BIGS921 software application,
'then the above-described files are included in the set of files
'that the BIGS908 software application will load.

'Alternatively, the BIGS908 software application enables the user
'to load into program memory the contents of a set of files saved
'by the BIGS907 software application. The BIGS907 software
'application saves the user-defined set of game rules to a data
'file named with an 'a' character as the file name suffix. The
'BIGS907 software application saves data about a set of
'combination-dependent-playing-strategy tables to a data file
'named with a 'b' character as the file name suffix.  If the user
'chooses to load a set of files saved by the BIGS907 software
'application, then the above-described files are included in the
'set of files that the BIGS908 software application will load.

'III. SUGGESTED FILE NAMING PROTOCOL

'After the user enters 'the folder/file name prefix of the files
'containing data about the set of strategy tables and matching-
'user-defined set of game rules to be loaded into program
'memory', the BIGS908 software application prompts the user to
''enter the folder/file name prefix to be used to store
'application output'.

'Here the BIGS908 software application is prompting the user to
'enter one of three parts of a file name. The three parts are a
'file name prefix, a file name suffix, and a file name extension.

'The file name prefix is a user-definable name. The file name
'prefix is common to each file of a set of files saved as
'application output.

'The file name suffix consists of a single letter. The BIGS908
'software application adds the file name suffix to the file name
'prefix. Each file name suffix is unique to one file of the set
'of files saved as application output. Accordingly, the
'combination of the file name prefix and the file name suffix
'enables users and other applications in the BIGS collection to
'identify the specific contents of each file of the set of files.

'The file name extension consists of a period followed by a set
'of three characters. The file name extension indicates the type
'of file. The two types of file that are handled by the BIGS908
'software application are text and data. If the type of file is a
'text file, then .txt is the file name extension. If the type of
'file is a data file, then .dat is the file name extension.

'There is a need for an intelligent way of naming files for later
'reference. Data can flow into the BIGS908 software application
'from a set of files saved by the BIGS907 software application.
'The set of files contains data about the set of combination-
'dependent-playing-strategy tables and matching user-defined set
'of game rules for an optional embodiment of the double-exposure
'game of the present invention. Data can also flow into the
'BIGS908 software application from a set of files saved by the
'BIGS921 software application. In this case, the set of files
'contains data about the total-dependent-basic-strategy table
'saved in the format of a set of combination-dependent-playing-
'strategy tables and the matching-user-defined set of game rules
'for an optional embodiment of the double-exposure game of the
'present invention.

'Therefore, I suggest the user make a new folder and name the
'folder '908docs'. I suggest the user make the file name prefix
'equal to the folder/file name prefix of the set of files
'containing data about the set of strategy tables and matching-
'user-defined set of game rules to be loaded into program memory.
'For example, if the folder/file name prefix of the set of files
'containing data about the set of strategy tables and matching-
'user-defined set of game rules to be loaded into program memory
'is 'J23h23s6d/game1', then I suggest the user enter '908docs/
'J23h23s6dgame1' as the folder/file name prefix to be used to
'store application output. If the folder/file name prefix of the
'set of files containing data about the set of strategy tables
'and matching-user-defined set of game rules to be loaded into
'program memory is 'J23h23s6d/game1TDA', then I suggest the user
'enter '908docs/J23h23s6dgame1TDA' as the file name prefix to be
'used to store application output. Here use of the characters
''TD' serves as a note to remind the user that the set of
'strategy tables loaded into the BIGS908 software application is
'total dependent.

'The user might want to run a plurality of simulations using the
'same set of strategy tables stored in the same set of files.
'Therefore, I suggest the user add a single character to the end
'of the file name prefix to help the user to differentiate
'between the results of each of a plurality of simulations. For
'example, the first time the user enters 'J23h23s6d/game1TDA as
'the folder/file name prefix of the set of files containing data
'about the set of strategy tables and matching-user-defined set
'of game rules to be loaded into program memory, I suggest the
'user enter '908docs/J23h23s6dgame1TDA1' as the folder/file name
'prefix to be used to store application output. The second time
'the user enters 'J23h23s6d/game1TDA as the folder/file name
'prefix of the set of files containing data about the set of
'strategy tables and matching-user-defined set of game rules to
'be loaded into  program memory, I suggest the user enter
''908docs/J23h23s6dgame1TDA2' as the folder/file name prefix to
'be used to store application output, and so on.

'For example, the first time the user enters 'J23h23s6d/game1 as
'the folder/file name prefix of the set of files containing data
'about the set of strategy tables and matching-user-defined set
'of game rules to be loaded into program memory, I suggest the
'user enter '908docs/J23h23s6dgame1A' as the folder/file name
'prefix to be used to store application output. The second time
'the user enters 'J23h23s6d/game1 as the folder/file name prefix
'of the set of files containing data about the set of strategy
'tables and matching-user-defined set of game rules to be loaded
'into program memory, I suggest the user enter '908docs/
'J23h23s6dgame1B' as the folder/file name prefix to be used to
'store application output, and so on.

'After the user enters 'the folder/file name prefix to be used to
'store application output', the BIGS908 software application
'prints to the application window the brief description stored
'along with the user-defined set of game rules and afterward
'prompts the user with the following message.  'If this is
'acceptable, then type y and press enter, else press enter'.
'Here the BIGS908 software application is giving the user an
'opportunity to verify that the user has loaded the contents of
'the correct set of files into the program memory of the BIGS908
'software application. If there was an error, the user should
'simply press 'enter' and the BIGS908 software application will
'go back to the point in the program where the user can reenter
'the folder/file name prefix of the files containing data about
'the set of strategy tables and matching-user-defined set of game
'rules to be loaded into program memory. If there was no error,
'then the user should type 'y' and  press 'enter'.

'IV. ASSIGNING A SUIT TO EACH NON-JOKER CARD AND GIVING A COLOR
'TO EACH JOKER

'The BIGS908 software application assigns a suit to the first
'four cards of a given non-joker rank in accordance with the
'following set of rules. The first card of the given non-joker
'rank belongs to the spades suit. The second card of the given
'non-joker rank belongs to the hearts suit. The third card of the
'given non-joker rank belongs to the clubs suit. The fourth card
'of the given non-joker rank belongs to the diamonds suit. In the
'event that the user would like the deck composition to include
'more than four cards of a given non-joker rank, then the BIGS908
'software application assigns a suit to any additional cards in
'accordance with the same set of rules.

'The BIGS908 software application does not assign a suit to each
'joker. However, the BIGS908 software application does give each
'joker a color selected from a group consisting of white and
'black. If each deck does include at least one joker, then the
'BIGS908 software application alternates the color given to each
'of any jokers included in each deck in accordance with the
'following set of rules. The first joker is given a white color.
'The second joker is given a black color. The third is given a
'white color. The fourth is given a black color, and so on.

'V. DEFINE THE PREDICTION MADE BY THE COMPUTER-CONTROLLED PLAYER
'
'After the user responds to the above-described prompts, the
'BIGS908 software application prints the following text to the
'application window. 'A game wager is an agreement between the
'player and the dealer that the party who has made an incorrect
'prediction about the uncertain outcome of the game will forfeit
'an item of value to the other.' Afterward, the BIGS908 software
'application prompts the user to 'define the prediction made by
'the computer-controlled player: Press enter for the player
'predicts the outcome of the game will be the player's hand wins.
'Press 1 and enter for the player predicts the outcome of the
'game will be the dealer's hand wins. Press 2 and enter for the
'player predicts the outcome of the game will be a stalemate.

'Here the BIGS908 software application is giving the user an
'opportunity to define the prediction made by the computer-
'controlled player during the course of the game simulation. The
'user-defined prediction will be the only prediction made by the
'computer-controlled player during the entire duration of the
'game simulation. All game wagers will be made in accordance with
'the user-defined prediction.

'If the computer-controlled player predicts the outcome of the
'game will be the player's hand wins, then the computer-
'controlled dealer resolves the game wager in accordance with the
'following set of game rules. If the outcome of the game is the
'player's hand wins, then the dealer pays one to one odds on the
'game wager to the player, and the dealer pays any applicable
'bonus to the player. If the outcome of the game is the dealer's
'hand wins, then the dealer collects the game wager. If the
'outcome of the game is a stalemate, then the dealer returns the
'game wager to the player.

'If the computer-controlled player predicts the outcome of the
'game will be the dealer's hand wins, then the computer-
'controlled dealer resolves the game wager in accordance with the
'following set of game rules. If the outcome of the game is the
'dealer's hand wins, then the dealer pays user-defined odds on
'the game wager to the player. If the outcome of the game is the
'player's hand wins, then the dealer collects the game wager. If
'the outcome of the game is a stalemate, then the dealer returns
'the game wager to the player.

'If the computer-controlled player predicts the outcome of the
'game will be a stalemate, then the computer-controlled dealer
'resolves the game wager in accordance with the following set of
'game rules. If the outcome of the game is a stalemate, then the
'dealer pays user-defined odds on the game wager to the player.
'If the outcome of the game is the player's hand wins, then the
'dealer collects the game wager. If the outcome of the game is
'the dealer's hand wins, then the dealer collects the game wager.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS908
'software application prompts the user to 'input the odds on the
'game wager that the dealer will pay to the player when the
'outcome of the game is the dealer's hand wins.' In response to
'the above-described prompt, the user should input a decimal
'number corresponding to the user-defined odds on the game wager
'that the dealer will pay to the player when the outcome of the
'game is the dealer's hand wins. For example, if the user-defined
'odds on the game wager are four to five odds, then the user
'should input the number zero point eight (0.8) in response to
'the above-described prompt.

'If the user does press the '2' key and the 'enter' key in
'response to the above-described prompt, then  the BIGS908
'software application prompts the user to 'input the odds on the
'game wager that the dealer will pay to the player when the
'outcome of the game is a stalemate.' In response to the above-
'described prompt, the user should input a decimal number
'corresponding to the user-defined odds on the game wager that
'the dealer will pay to the player when the outcome of the game
'is a stalemate. For example, if the user-defined odds on the
'game wager are seven to one odds, then the user should input the
'number seven (7) in response to the above-described prompt.

'VI. ADD RULES FOR COMPLETE HANDS THAT MAKE QUALIFYING-FIVE-CARD-
'POKER HANDS

'In some optional embodiments, the specific set of game rules does
'include rules made for complete hands that include the five cards
'of a qualifying-five-card-poker hand wherein: The qualifying-five-
'card-poker hand is a five-card-poker hand of a rank that is at
'least equal to a minimum rank specified by the specific set of
'game rules, and wherein: The qualifying-five-card-poker hand
'consists of any example of the highest-ranking-five-card-poker
'hand that can be made from any selection of five of the at least
'five cards in a complete hand selected from a group consisting of
'the player's complete hand and the dealer's complete hand.

'In order for the player's complete hand to make a qualifying-five-
'card-poker hand, the player's complete hand must meet the
'following qualifications. The player's complete hand must consist
'of at least five cards. The highest-ranking-five-card-poker hand
'that can be made from any selection of five of the at least five
'cards in the player's complete hand must be of a rank that is at
'least equal to a minimum rank specified by the specific set of
'game rules. If the above-described qualifications are met, then
'the player's complete hand makes a qualifying-five-card-poker hand
'consisting of the player's highest-ranking-five-card-poker hand.

'In order for the dealer's complete hand to make a qualifying-five-
'card-poker hand, the dealer's complete hand must meet the
'following qualifications. The dealer's complete hand must consist
'of at least five cards. The highest-ranking-five-card-poker hand
'that can be made from any selection of five of the at least five
'cards in the dealer's complete hand must be of a rank that is at
'least equal to a minimum rank specified by the specific set of
'game rules. If the above-described qualifications are met, then
'the dealer's complete hand makes a qualifying-five-card-poker hand
'consisting of the dealer's highest-ranking-five-card-poker hand.

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter to add rules for complete hands that make qualifying-five-
'card-poker hands, else press enter'. Here the BIGS908 software
'application is giving the user an opportunity to respond to a
'group of prompts. If the user does not press the '1' key and the
''enter' key and instead the user does press the 'enter' key, then
'the BIGS908 software application will skip over the following
'group of prompts and the user can skip reading chapters VII
'through XX. If the user does press the '1' key and the 'enter'
'key, then the BIGS908 software application will begin the
'following group of prompts.

'The BIGS907 software application saves data about the user-
'defined set of game rules to a data file named with an 'a'
'character as the file name suffix. The BIGS907 software
'application also enables the user to specify rules for complete
'hands that make qualifying-five-card-poker hands. However, the
'BIGS907 software application does not save data about rules made
'for complete hands that make qualifying-five-card-poker hands to
'the data file named with an 'a' character as the file name
'suffix. Accordingly, if the user-defined set of game rules
'includes rules made for complete hands that make qualifying-
'five-card-poker hands, then it is necessary for the user to use
'the following group of prompts to enter the rules, even if the
'user has already done so while programming the BIGS907 software
'application to perform its' functions.

'VII. A PREDETERMINED SET OF HAND-RANKING RULES

'If the user does add at least one rule made for complete hands
'that make qualifying-five-card-poker hands, then the user-
'defined set of game rules includes a predetermined set of hand-
'ranking rules. Hands are ranked first by category and second by
'individual cards.

'The predetermined set of hand-ranking rules does specify ten
'categories of five-card-poker hand. The ten categories of five-
'card-poker hand are high card, one pair, two pair, three-of-a-
'kind, straight, flush, full-house, four-of-a-kind, straight-
'flush, and five-of-a-kind. A user-defined subset of the
'predetermined set of hand-ranking rules does specify the rank
'assigned to each of the ten categories of five-card-poker hand.

'The predetermined set of hand-ranking rules does rank individual
'cards, so that when arranged from lowest ranking to highest
'ranking the individual cards of each suit are 2, 3, 4, 5, 6, 7,
'8, 9, 10, Jack, Queen, King, and Ace. The predetermined-set of
'hand-ranking rules specifies that an ace can appear as the
'lowest ranking card as when part of a hand selected from a group
'consisting of an Ace-2-3-4-5 straight and an Ace-2-3-4-5
'straight-flush. The predetermined set of hand-ranking rules
'specifies the use of individual card ranks to rank hands in the
'same category. The predetermined set of hand-ranking rules
'specifies the use of suits to determine whether a hand belongs
'to a category of five-card-poker hand selected from a group
'consisting of a flush and a straight-flush.

'The predetermined set of hand-ranking rules does specify the
'step of assigning a wild card value to each joker in a hand, so
'that the point value of said each joker remains the same as
'before, and so that each joker becomes an individual card
'capable of performing a user-defined function. The function
'performed by each joker is specified by a rule selected by the
'user from a group of rules consisting of the bug rule and the
'fully wild rule. If the bug rule is selected, then each joker
'can be used to perform a function selected from a group
'consisting of represent an ace, complete a straight, and
'complete a straight-flush. If the fully wild rule is selected,
'then each joker can represent the rank and suit of any card.

'VIII.  CHOOSE BETWEEN TWO RULES TO SPECIFY THE FUNCTION EACH
'JOKER WILL PERFORM

'If the user-defined set of game rules does specify that the
'composition of each deck includes at least one joker, then the
'above-described group of prompts begins with the BIGS908
'software application prompting the user to "Press 1 and enter
'for (fully wild rule) enables the holder of a hand that consists
'of at least five playing cards to use each joker included in the
'hand to represent the suit and rank of any other card. Else
'press enter for (bug rule) enables the holder of a hand that
'consists of at least five cards to use each joker included in
'the hand to perform a function selected from a group consisting
'of represent an ace, complete a straight, complete a flush, and
'complete a straight-flush."

'The predetermined set of hand-ranking rules does specify the
'step of assigning a wild card value to each joker so that the
'point value assigned to each joker remains the same as before,
'and so that each joker present in a hand consisting of at least
'five cards becomes an individual card capable of performing a
'function. Here the BIGS908 software application is giving the
'user an opportunity to choose between two rules specifying the
'function each joker will perform.

'IX. INPUT THE RANK ASSIGNED TO EACH OF NINE CATEGORIES OF FIVE-
'CARD-POKER HAND

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'press enter to
'input the rank of each of nine categories of poker hand. Press 1
'and enter to use default hand-ranking rules'.

'If the user does press the 'enter' key in response to the above-
'described prompt, then the BIGS908 software application
'initiates a series of prompts. The series of prompts enables the
'user to add a subset of rules to the predetermined set of hand
'ranking rules. The subset of rules specifies the rank assigned
'to each of the ten-supported categories of five-card-poker hand.
'The high card category of five-card-poker hand is preset as the
'lowest ranking category. The series of prompts enables the user
'to input the rank of the nine-remaining categories of five-card-
'poker hand.

'The BIGS908 software application begins the series of prompts by
'prompting the user to 'input the rank (1-9) assigned to one
'pair'. Here the BIGS908 software application is prompting the
'user to input the rank of the one pair category of five-card-
'poker hand. Numbers represent ranks. The lower the number is the
'lower the rank. The number zero represents the lowest ranking
'category. The number one represents the next-lowest-ranking
'category. The number nine represents the highest-ranking
'category.

'The BIGS908 software application continues in a like manner
'until the user has assigned a rank to all of the nine-remaining
'categories of five-card-poker hand. In this way, the BIGS908
'software application provides the user with a software means for
'adding the subset of rules to the predetermined set of hand
'ranking rules.

'If the user does press the '1' key and the 'enter' key, then the
'BIGS908 software application uses the default-hand-ranking rules
'to assign a rank to the ten-supported categories of five-card-
'poker hand. If the user did add the bug rule to specify the
'function each joker will perform, then the default-hand-ranking
'rules assign a rank to each of the ten-supported categories of
'five-card-poker hand so that the order of the ten-supported
'categories of five-card-poker hand from lowest ranking to
'highest ranking is high card, one pair, two pair, three-of-a-
'kind, straight, full-house, flush, four-of-a-kind, straight-
'flush, and five-of-a-kind. If the user did add the fully wild
'rule to specify the function each joker will perform, then the
'default-hand-ranking rules assign a rank to each of the ten-
'supported categories of five-card-poker hand so that the order
'of the ten-supported categories from lowest ranking to highest
'ranking is high card, one pair, two pair, three-of-a-kind,
'straight, full-house, four-of-a-kind, flush, straight-flush, and
'five-of-a-kind.

'If the user-defined set of game rules does not specify that the
'composition of each deck includes at least one joker, and if the
'user does press '1' and 'enter' in response to the above-
'described prompt, then the default-hand-ranking rules used will
'be the same as those given for games wherein the user-defined
'set of game rules does specify that at least one joker is
'included in each deck, and wherein the bug rule applies.

'X. INPUT THE MINIMUM RANK

'After the user responds to the above-described prompts, the
'BIGS908 software application prints the following text to the
'application window. A qualifying-five-card-poker hand is a five-
'card-poker hand of a rank that is at least equal to a minimum rank
'specified by the user-defined set of game rules. Subsequently, the
'BIGS908 software application prompts the user to 'input the
'minimum rank specified by the user-defined set of game rules'.

'To help the user respond to the above-described prompt, the
'BIGS908 software application lists the ten-supported categories of
'five-card-poker hand in ascending order from lowest ranking to
'highest ranking in accordance with the user-defined set of hand-
'ranking rules. Each of the ten-supported categories of five-card-
'poker hand is assigned a number from zero to nine. Zero is
'assigned to the lowest ranking category of five-card-poker hand.
'Nine is assigned to the highest ranking category.

'To respond to the above-described prompt, input the number that
'corresponds the rank of the category of five-card-poker hand that
'is equal to the minimum rank specified by the user-defined set of
'game rules.

'XI. INPUT SIZE OF THE BONUS PAYOUT FOR EACH OF A SET OF CATEGORIES
'OF FIVE-CARD-POKER HAND

'After the user responds to the above-described prompt, the BIGS908
'software application initiates a series of prompts. The series of
'prompts enables the user to add a subset of rules to the user-
'defined set of game rules. The subset of rules specifies the size
'of the bonus payout made for each of the ten-supported categories
'of five-card-poker hand that have a rank that is at least equal to
'the minimum rank specified by the user-defined set of game rules.

'If the prediction made by the player about the uncertain outcome
'of the game is the player's hand wins, if the outcome of the game
'is the player's hand wins, if the player's complete hand includes
'the five cards of a qualifying-five-card-poker hand, and if the
'qualifying-five-card-poker hand is a predetermined combination of
'cards that qualifies the player to receive a bonus payout, then
'the dealer pays the player a bonus.

'XII. ADD RULES TO SPECIFY WHETHER BONUS PAYOUTS ARE MULTIPLES OF
'THE GAME WAGER OR WHETHER BONUS PAYOUTS ARE MULTIPLES OF THE
'TABLE MINIMUM

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'press enter
'for all bonus payouts are multiples of the game wager. Press 1
'and enter for all bonus payouts are multiples of the table
'minimum. Press 2 and enter for bonus payout for at least one
'category of poker hand is a multiple of the table minimum'.
'Here the BIGS908 software application enables the user to
'program the BIGS908 software application to calculate the bonus
'paid for any given category of qualifying-five-card-poker hand
'as a multiple of the table minimum rather than as a multiple of
'the game wager.

'Doing so is useful in thwarting efforts by card counters to turn
'the odds of the game in their own favor. Because just about
'every card-counting scheme in existence requires the card
'counter to raise the game wager whenever the card count
'indicates the average-stack composition is favorable to the
'player. If any player does raise the game wager, and if the size
'of the bonus payout is a multiple of the table minimum, then the
'size of the bonus payout in relation to the size of the regular
'payout will shrink. If the size of the bonus payout in relation
'to the size of the regular payout shrinks, then the size of the
'decrease in the house edge caused by the bonus payout will
'shrink. As the size of the decrease in the house edge caused by
'the bonus payout shrinks, the overall house edge approaches that
'of a game with no bonus payout. The higher that the house edge
'would be if there were no bonus payout at all, the less likely
'the card counter will encounter an average-stack composition
'that is favorable to the player.

'If the user did Press 2 and enter for the bonus payout for at
'least one rank of poker hand is a multiple of the table minimum,
'then, after the user responds to the above-described series of
'prompts, the BIGS908 software application initiates another
'series of prompts. The series of prompts enables the user to add
'a subset of rules to the user-defined set of game rules. For
'each category of qualifying-five-card-poker hand, the subset of
'rules specifies whether the bonus paid for a player's winning
'hand that makes that particular category of qualifying-five-
'card-poker hand is paid as a multiple of the game wager or is
'paid as a multiple of the table minimum.

'XIII. ADD RULE TO SPECIFY THAT ONLY A COMPLETE HAND WITH A
'NUMERICAL-SUM VALUE OF TWENTY-SEVEN POINTS CAN MAKE A
'QUALIFYING-FIVE-CARD-POKER HAND.

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for only a complete hand with a numerical-sum value of
'twenty-seven points can make a qualifying-five-card-poker hand,
'else press enter'. Here the BIGS908 software application is
'giving the user an opportunity to add a rule to the user-defined
'set of game rules. The rule is. Only a complete hand with a
'numerical sum value of twenty-seven points can make a
'qualifying-five-card-poker hand. If the user does press the '1'
'key and the 'enter' key in response to the above-described
'prompt, then the user adds this rule to the user-defined set of
'game rules. If the user does not press the '1' key and the
''enter' key and instead does press the 'enter' key in response
'to the above-described prompt, then the user does not add this
'rule to the user-defined set of game rules.

'XIV. ADD RULE TO SPECIFY THAT ONLY A COMPLETE HAND WITH A
'NUMERICAL-SUM VALUE OF LESS THAN TWENTY-EIGHT POINTS CAN MAKE A
'QUALIFYING-FIVE-CARD-POKER HAND.

'If the user does not add a rule to specify that only a complete
'hand with a numerical-sum value of twenty-seven points can make
'a qualifying-five-card-poker hand, then, after the user responds
'to the above-described prompt, the BIGS908 software application
'prompts the user to 'press 1 and enter for only a complete hand
'with a numerical-sum value of less than twenty-eight points can
'make a qualifying-five-card-poker hand, else press enter'. Here
'the BIGS908 software application is giving the user an
'opportunity to add a rule to the user-defined set of game rules.
'The rule is. Only a complete hand with a numerical sum value of
'less than twenty-eight points can make a qualifying-five-card-
'poker hand. If the user does press the '1' key and the 'enter'
'key in response to the above-described prompt, then the user
'adds this rule to the user-defined set of game rules. If the
'user does not press the '1' key and the 'enter' key and instead
'does press the 'enter' key in response to the above-described
'prompt, then the user does not add this rule to the user-defined
'set of game rules.

'XV. ADD RULE TO SPECIFY ANY PLAYER HAND WITH A NUMERICAL-SUM
'VALUE OF LESS THAN TWENTY-EIGHT POINTS THAT MAKES A QUALIFYING-
'FIVE-CARD-POKER HAND IS A PREDETERMINED-WINNING-COMPLETE HAND

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for any player hand with a numerical sum value of less
'than twenty-eight points that also makes a qualifying-five-card-
'poker hand is a predetermined-winning-complete hand, else press
'enter'. Here the BIGS908 software application is giving the user
'an opportunity to add a rule to the user-defined set of game
'rules. The rule is. Any player hand with a numerical-sum value
'of less than twenty-eight points that also makes a qualifying-
'five-card-poker hand is a predetermined-winning-complete hand.

'XVI. ADD RULE TO SPECIFY ANY DEALER HAND WITH A NUMERICAL-SUM
'VALUE OF LESS THAN TWENTY-EIGHT POINTS THAT MAKES A QUALIFYING-
'FIVE-CARD-POKER HAND IS A PREDETERMINED-WINNING-COMPLETE HAND

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for any dealer hand with a numerical sum value of less
'than twenty-eight points that also makes a qualifying-five-card-
'poker hand is a predetermined-winning-complete hand, else press
'enter'. Here the BIGS908 software application is giving the user
'an opportunity to add a rule to the user-defined set of game
'rules. The rule is. If the dealer's hand consists of at least
'five cards with a numerical sum value of less than twenty-eight
'points, and if a qualifying-five-card-poker hand can be made
'from a selection of five of the at least five cards in the
'dealer's hand, then the dealer has a predetermined-winning-
'complete hand.

'XVII. ADD RULE TO SPECIFY ANY PLAYER HAND WITH A NUMERICAL-SUM
'VALUE OF TWENTY-SEVEN POINTS THAT MAKES A QUALIFYING-FIVE-CARD-
'POKER HAND IS A PREDETERMINED-WINNING-COMPLETE HAND

'If the user does not add a rule to specify that any player hand
'with a numerical sum value of less than twenty-eight points that
'also makes a qualifying-five-card-poker hand is a predetermined-
'winning-complete hand, then the BIGS908 software application
'prompts the user to do the following. 'Press 1 and enter for any
'player hand with a numerical-sum value of twenty-seven points
'that also makes a qualifying-five-card-poker hand is a
'predetermined-winning-complete hand, else press enter'. Here the
'BIGS908 software application is giving the user an opportunity
'to add a rule to the user-defined set of game rules. The rule
'is. If the player's hand consists of at least five cards with a
'numerical sum value of twenty-seven points, and if a qualifying-
'five-card-poker hand can be made from any selection of five of
'the at least five cards in the player's hand, then the player
'has a predetermined-winning-complete hand.

'XVIII. THE PLAYER'S POKER HAND MUST OUTRANK THE DEALER'S POKER
'HAND

'After the user responds to the above-described prompt, the BIGS908
'software application prompts the user to 'Press 1 and enter for
'player's poker hand must outrank dealer's poker hand, else press
'enter'. Here the BIGS908 software application is giving the user
'the opportunity to add subset of rules to the user-defined set of
'game rules. The subset of rules specifies the following. If the
'dealer's complete hand consists of at least five cards, then the
'player's highest-ranking-five-card-poker hand must outrank the
'dealer's highest-ranking-five-card-poker hand is an additional
'qualification that the player's complete hand must meet in order
'to make a qualifying-five-card-poker hand. If the player's
'complete hand consists of at least five cards, then the player's
'highest-ranking-five-card-poker hand must not outrank the dealer's
'highest-ranking-five-card-poker hand is an additional
'qualification that the dealer's complete hand must meet in order
'to make a qualifying-five-card-poker hand.

'XIX. SAVE TO A TEXT FILE A TABLE DISPLAYING THE NUMBER OF EACH
'CATEGORY OF FIVE-CARD-POKER HAND MADE

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'Press enter to
'save to a text file a table displaying the number of poker hands
'of each category made from winning-player hands only. Press 1
'and enter to also save to a text file a table displaying the
'number of poker hands of each category made from all player
'hands and made from all dealer hands ". The latter provides
'information that could be useful in establishing a payout table
'for various-optional-side bets on whether the dealer will make a
'five-card-poker hand.

'XX. ENABLE THE COMPUTER-CONTROLLED PLAYER TO OVERRIDE THE SET
'OF STRATEGY TABLES

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'Press 1 and
'enter to enable the computer-controlled player to override the
'set of strategy tables in cases wherein the set of strategy
'tables call for the player to stand and the potential benefits
'of making a qualifying-five-card-poker hand by taking an
'additional card to the player's hand outweigh the potential
'risks of busting and losing the game, else press enter'.

'In some optional embodiments, if the player's complete hand
'includes the five cards of a qualifying-five-card-poker hand,
'and if the outcome of the game is the player's hand wins, then
'the dealer pays the player a bonus payout on the game wager and/
'or the player's hand is a predetermined-winning-complete hand.
'In that event, rules made for complete hands that also include
'the five cards of a qualifying-five-card-poker hand
'significantly increase the value of a player's complete hand
'that includes the five cards of a qualifying-five-card-poker
'hand.

'The set of strategy tables gives the best strategy for the play
'of the player's initial hand. If the rules made for complete
'hands that also include the five cards of a qualifying-five-
'card-poker hand significantly increase the value of a player's
'complete hand that includes the five cards of a qualifying-five-
'card-poker hand, then the best strategy for the play of the
'player's initial hand varies in accordance with the chances of
'the player making a complete hand that includes the five cards
'of a qualifying-five-card-poker hand. If the player's initial
'hand does consist of two cards assigned high point values, then
'there is a lesser chance of the player making a complete hand
'that includes a qualifying-five-card-poker hand. If the player's
'initial hand does consist of two cards assigned low point
'values, then there is a greater chance of the player making a
'complete hand that includes a qualifying-five-card-poker hand.
'Accordingly, the best strategy for the play of a player's
'initial hand consisting of two cards assigned low point values
'calls for the player to hit to a higher player's hand total than
'does the best strategy for the play of a player's initial hand
'consisting of two cards assigned high point values.

'A set of composition-dependent-playing-strategy tables enables
'the player to vary playing strategy in accordance with the
'combination of point values assigned to the cards in the
'player's initial hand. Accordingly,  if rules made for complete
'hands that include the five cards of a qualifying-five-card-
'poker hand significantly increase the value of a player's
'complete hand that includes the five cards of a qualifying-five-
'card-poker hand, then the user should program the BIGS908
'software application so that the computer-controlled player uses
'a set of composition-dependent-playing-strategy tables to make
'decisions on how to play the player's hand.

'Occasionally, the player will start with an initial hand
'consisting of two cards assigned low point values, hit once, and
'receive a third card assigned a high point value. In that case,
'the player's hand is a three card hand. If the set of
'combination-dependent-playing-strategy tables would call for the
'player to stand with a combination of two cards with the same
'hand total as the three cards in the player's current hand, then
'the player should stand. Here the BIGS908 software application
'is provided the user with a software means for programming the
'computer-controlled player to do so.

'Occasionally, the player will start with an initial hand
'consisting of two cards assigned high point values, hit twice,
'and receive two additional cards assigned low point values. In
'that case, the player's hand is a four-card hand. In games
'wherein the set of combination-dependent-playing-strategy tables
'calls for the player to stand, and the player's hand consists of
'four of the five cards needed to make a qualifying-five-card-
'poker hand, the player should weigh the risk of losing the game
'against the potential reward of winning the game with a complete
'hand that includes a qualifying-five-card-poker hand. If the
'potential reward of winning the game with a complete hand that
'includes a qualifying-five-card-poker hand appears to outweigh
'the risk of losing, then the player should override the set of
'strategy tables and hit. Here the BIGS908 software application
'provides the user with a software means of programming the
'computer-controlled player to do so.

'If the user does not want the computer-controlled player to
'override the set of strategy tables, then the user should press
'the 'enter' key in response to the above-described prompt. If
'the user does press the 'enter' key in response to the above-
'described prompt, then the computer-controlled player
'consistently uses the set of strategy tables to make decisions
'on how to play the player's hand.

'If the user does want the computer-controlled player to override
'the set of strategy tables, then the user should press the '1'
'key and the 'enter' key in response to the above-described
'prompt. If the user does press the '1' key and the 'enter' key
'in response to the above-described prompt, then the BIGS908
'software application prompts the user to 'enter the folder/
'filename prefix of the set of files containing data about the
'strategy for the play of the player's four-card hands to be
'loaded into program memory.'

'The BIGS921 software application enables the user to convert a
'set of combination-dependent-playing-strategy tables into a
'total-dependent-basic-strategy table. To create the strategy for
'the play of the player's four-card hands, the user should use
'the BIGS921 software application to convert the set of
'combination-dependent-playing-strategy tables loaded into
'program memory into a total-dependent-basic-strategy table. In
'response to the above described prompt, the user should input
'the folder/filename prefix of the set of files containing data
'about this total-dependent-basic-strategy table.

'If the set of combination-dependent-playing-strategy tables
'calls for the player to stand, if the player's hand consists of
'four cards, if the addition of one card of the rank of joker
'will produce a qualifying-five-card-poker hand, and if the
'total-dependent-basic-strategy table calls for the player to
'hit, then the player should hit. Here the BIGS908 software
'application provides the user with a software means for
'programming the computer-controlled player to do so.

'If the computer-controlled player has a hard hand consisting of
'at least four cards, if the player has not busted, and if the
'set of strategy tables calls for the player to stand, then the
'BIGS908 software application goes to subroutine 36. If
'subroutine 36 determines that the potential benefits of
'overriding the set of strategy tables and taking an additional
'card to the player's hand outweigh the potential risks of
'busting and possibly losing the game, then the BIGS988
'application has the computer-controlled player override the set
'of strategy tables and take an additional card.Otherwise, the
'computer-controlled player stands.

'If the computer-controlled player has a soft hand consisting of
'at least four cards, and if the set of strategy tables calls for
'the player to stand, then the BIGS908 software application goes
'to subroutine 27. If subroutine 27 determines that the potential
'benefits of overriding the set of strategy tables and taking an
'additional card to the player's hand outweigh the potential
'risks of busting and possibly losing the game, then the BIGS908
'software application has the computer-controlled player override
'the set of strategy tables and take an additional card.
'Otherwise, the computer-controlled player stands.

'The determinations made by subroutines 27 and 36 are not
'intended to yield the best strategy for the play of a player's
'hand consisting of at least four cards. The determinations made
'are intended to approximate the best strategy for the play of
'the player's hand consisting of at least four cards. The best
'strategy for the play of a player's hand consisting of at least
'four cards is yet to be determined.

'XXI. MODELING THE BEHAVIOR OF HUMAN CARD COUNTERS: THE RUNNING
'COUNT

'Various-optional embodiments are subject to predetermined sets
'of game rules that do specify a method of play wherein the
'dealer does shuffle the cards manually before the first round of
'play and subsequently reshuffles the cards manually each time
'less than a certain percentage of the stack remains in the shoe.
'If the predetermined set of game rules herein ascribed to an
'optional embodiment does specify said method of play, then
'skilled players might be able to gain a theoretical advantage
'over the house by using various card counting, betting, and
'playing strategies.

'The BIGS908 software application enables users to model the
'behavior of human card counters by programming the computer-
'controlled player to use a card-counting strategy and by
'programming the computer-controlled player to use a betting
'strategy to vary the size of the game wager in response to
'changes in the card count. A typical card-counting strategy
'assigns a count value to each rank of card. The count value
'assigned to each rank of card is roughly equal to the change in
'the expected value of the game wager caused by the removal of
'one card of that particular rank from the stack.

'Whenever a card is exposed, a card counter adds the count value
'of that particular rank of card to a running total, known as the
''running count'. The running count gives the card counter a
'measure of the expected value of the game wager. If the house
'has a significant edge over the player, then most of the time
'the running count will indicate that the expected value of the
'game wager favors the house. Whenever the running count
'indicates that the expected value of the game wager favors the
'player, then the card counter raises the game wager.

'The card counter usually does so according to a betting
'strategy. The bet spread is equal to the quotient of the size of
'the large game wagers that the card counter makes when the
'running count indicates that the expected value of the game
'wager favors the player divided by the size of the small game
'wagers that the card counter makes when the running count
'indicates that the expected value of the game wager favors the
'house. If the bet spread is large enough, and if the built-in
'house edge of a game is low enough, then under the right
'circumstances skilled players can use a card-counting strategy
'and a betting strategy to overcome the built-in house edge of a
'game and in the long term win more from the house than is lost
'to the house.

'The size of the effect of the removal of any given rank of card
'is inversely proportional to the number of cards remaining in
'the stack. That is. The greater the number of cards remaining in
'the stack the smaller the effect of removal of a single card to
'the discard pile. The smaller the number of cards remaining in
'the stack the larger the effect of removal of a single card to
'the discard pile. This fact makes the running count an
'inaccurate measure of the expected value of the game wager. A
'more accurate measure of the expected value of the game wager is
'desirable. Two kinds of card-counting strategies follow from two
'ways of achieving a more accurate measure of the expected value
'of the game wager.

'XXII. MODELING THE BEHAVIOR OF HUMAN CARD COUNTERS: BALANCED-
'CARD-COUNTING STRATEGIES

'Balanced card-counting strategies call for card counters to
'assign count values to each rank of card such that when added
'together these count values equal zero.  For example, the
'following is a balanced-card-counting strategy that works well
'for the computer-controlled player in a simulation of an
'optional embodiment of the game of the present invention
'wherein: Each deck consists of thirteen ranks of each of four
'French suits plus two jokers. The balanced-card-counting
'strategy assigns a count value of minus two to each joker,
'assigns a count value of minus two to each ace, assigns a count
'value of minus one to each two, three, and four, assigns a count
'value of zero to each five, six, and seven, and assigns a count
'value of plus one to each eight, nine, ten, jack, queen, and
'king.

'Notice that the sum of all count values assigned to all ranks of
'cards present in a fifty-four card deck is equal to zero (-4 +
'-8 + -4 + -4 + -4 + 0 + 0 + 0 + 4 + 4 + 4 + 4 + 4 + 4). There is
'a balance of positive count values and negative count values and
'as such, this card-counting strategy is a balanced-card-counting
'strategy.

'If using a balanced-card-counting strategy, then at the
'beginning of the shoe the card counter generally starts counting
'with an initial-running count of zero. Whenever a card is
'exposed, a counter adds the count value of that rank of card to
'a running total, known as the 'running count'. At the beginning
'of each subsequent round of play, the card counter divides the
'running count by their own estimate of the number of decks
'remaining in the stack. Card counters refer to this action as
'performing a true-count conversion.

'By performing the true-count conversion, the card counter
'converts the running count into a true count. In so doing, the
'card counter mathematically adjusts for the fact that the size
'of the effect of removal of any given card is inversely
'proportional to the number of cards remaining in the stack. The
'true count provides to the card counter a more accurate measure
'of the expected value of the game wager than does the running
'count. For that reason, many card counters use the true count to
'make betting and playing decisions rather than using the running
'count.

'If the bet spread is large enough, and if the house edge is low
'enough, then card counters are able to turn the overall odds of
'the game in favor of the player by systematically varying the
'size of the game wager in response to the true count as follows.
'If the average-stack composition is favorable to the player,
'then the card counter places a large game wager and otherwise
'the card counter places a minimal game wager. However, if a card
'counter uses an unbalanced-card-counting strategy, then the card
'counter can avoid the added step of making the true-count
'conversion.

'XXIII. MODELING THE BEHAVIOR OF HUMAN CARD COUNTERS: UNBALANCED
'CARD-COUNTING STRATEGIES

'Unbalanced card-counting strategies call for card counters to
'assign count values to each rank of card such that when added
'together these count values do not equal zero. For example, the
'following is an unbalanced-card-counting strategy that works
'well for the computer-controlled player in a simulation of an
'optional embodiment of the game of the present invention
'wherein: Each deck consists of thirteen ranks of each of four
'French suits plus two jokers. The unbalanced-card-counting
'strategy assigns a count value of negative one to each joker,
'assigns a count value of negative two to each ace, assigns a
'count value of negative one to each two, three, and four,
'assigns a count value of zero to each five, six, and seven, and
'assigns a count value of positive one to each eight, nine, ten,
'jack, queen, and king.

'Note that the sum of all count values assigned to all of the
'ranks of cards in a fifty-four card deck is not equal to zero
'(-2 + -8 + -4 + -4 + -4 + 0 + 0 + 0 + 4 + 4 + 4 + 4 + 4 + 4).
'The sum is equal to plus two. There is not a balance of positive
'point counts and negative point counts and as such, this card-
'counting strategy is an unbalanced card-counting strategy.

'There are two surplus count points per fifty-four card deck in
'play. On average, this causes the running count to drift upward
'during the course of dealing a significant portion of the stack
'from a shoe. When the running count reaches a certain "key
'count", then the running count indicates to the card counter
'that on average the expected value of the game wager favors the
'player.  The card counter knows it is time to raise his or her
'wager. The key count is a significantly higher number than the
'initial-running count. In practice, if a card counter is using
'an unbalanced-card-counting strategy, then the card counter can
'use any number as an initial-running count.

'The important thing is that the difference of the key count
'minus the initial-running count be correct given the number of
'decks prescribed by the predetermined set of house rules. On
'average, as the running count drifts upward during the course of
'dealing a significant portion of the stack from a shoe, it
'becomes easier for the card counter to attain a running count
'that is equal to or greater than the key count. This adjusts for
'the fact that the size of the effect of the removal of any given
'rank of card is inversely proportional to the number of cards
'remaining in the stack. In this way, unbalanced card-counting
'strategies make the running count a more accurate measure of the
'expected value of the game wager than it would otherwise be.

'XXIV. THE TWO WAYS OF GENERATING AN E-Z-COUNT STRATEGY

'An E-Z-count strategy is a balanced-card counting strategy. The
'E-Z-count strategy assigns a decimal-count value to each rank of
'card in the stack. Each decimal-count value is equal to a
'measurement made of the change in the expected value of the game
'wager caused by the removal of one card of the corresponding
'rank from each complete deck in the stack. There are two ways of
'making the above-described measurement.

'One way to make the above-described measurement is to do so
'individually for each rank of card by performing an abbreviated-
'combinatorial analysis. The BIGS928 software application uses
'this approach. This approach is capable of generating the E-Z-
'count strategy for an optional embodiment of the game of the
'present invention under the following conditions. The game is a
'double exposure game. The user-defined set of game rules does
'not include rules made for complete hands that make qualifying-
'five-card-poker hands.

'The other way to make the above-described measurements is to do
'so simultaneously for each rank of card by using summations of
'various ongoing simulation results. The BIGS908 software
'application and the BIGS988 software application use this
'approach. This approach is capable of generating an E-Z-count
'strategy for any of a subset of optional embodiments of the game
'of the present invention regardless of whether or not the
'predetermined set of game rules includes rules made for complete
'hands that make qualifying-five-card-poker hands. This approach
'is also capable of generating an E-Z count strategy with
'decimal-count values that are nearly optimal for the betting
'strategy employed by the computer-controlled player.

'Most if not all human players would be unable to use the
'decimal-count values of an E-Z-count strategy to count cards
'during the course of a live game. However, some human players
'would be able to use integer-count values to count cards during
'the course of a live game. A person skilled in the art could
'choose the integer-count values that best approximate the
'decimal-count values of the E-Z-count strategy. Using these
'integer-count values, a person skilled in the art could derive
'unbalanced-card-counting strategies and balanced-card-counting
'strategies that work well with the betting strategy employed by
'the computer-controlled player.

'Accordingly, the BIGS988 software application provides those
'skilled in the art with an easy way of identifying the card
'counting, and betting strategies that human players might
'attempt to use to gain a theoretical advantage over the house
'while playing a single-exposure game. Accordingly, the BIGS908
'software application provides those skilled in the art with an
'easy way of identifying the card counting, and betting
'strategies that human players might attempt to use to gain a
'theoretical advantage over the house while playing a double-
'exposure game.

'XXV. LOAD AN E-Z-COUNT STRATEGY, ELSE PRESS ENTER

'After the user responds to the above-described set of prompts
'pertaining to bonuses paid for winning player hands that also
'make qualifying categories of five-card-poker hands, the BIGS908
'software application prompts the user to 'press 'y' and enter to
'load an E-Z-count strategy, else press enter'. If the user does
'press the 'y' key and the 'enter' key in response to the above-
'described prompt, then the BIGS908 software application prompts
'the user to 'enter the folder/file name prefix of the file
'containing data about the E-Z-count strategy to be loaded into
'program memory'.

'In order to be able to load an E-Z-count strategy, the user must
'have already generated one. If the user programmed the BIGS908
'software application to generate an E-Z-count strategy, then the
'BIGS908 software application saves data about the E-Z-count
'strategy to a data file named with a 'z' character as the file
'name suffix. If the user programmed the BIGS928 software
'application to generate an E-Z-count strategy, then the BIGS928
'software application saves data about the E-Z-count strategy to
'a data file named with a 'z' character as the file name suffix.

'If the user has previously generated an E-Z-count strategy and
'the user does want to load the E-Z-count strategy into program
'memory from file, then the user should enter the folder/file
'name prefix of the file containing data about the E-Z-count
'strategy to be loaded into program memory. If the user does
'enter the folder/file name prefix of the file containing data
'about the E-Z-count strategy to be loaded into program memory,
'then the BIGS908 software application will print to the
'application window a brief description of the E-Z-count
'strategy. The BIGS908 software application will then prompt the
'user to 'if this is acceptable, press 'y' and enter'. Here the
'BIGS908 software application is giving the user an opportunity
'to verify that the contents of the correct file have been loaded
'into program memory of the BIGS908 software application. If the
'contents of the correct file have not been loaded into program
'memory of the BIGS908 software application, then the user should
'press the 'enter' key. If the user does press the 'enter' key,
'then the BIGS908 software application will again ask the user to
'enter the folder/file name prefix of the file containing data
'about the E-Z-count strategy to be loaded into program memory.
'If the user does press the 'y' key and the 'enter' key, then the
'user will have verified that the contents of the correct file
'have been loaded into program memory of the BIGS908 software
'application.

'XXVI. THREE WAYS OF ASSIGNING A COUNT VALUE TO EACH RANK OF CARD

'Loading an E-Z-count strategy is one of a group of three
'possible ways of the user assigning a count value to each rank
'of playing card. The other two ways are using the default count
'values, and setting the count value assigned to each rank of
'card individually.

'If the user does not load an E-Z count strategy, then the
'BIGS908 software application prompts the user to 'press 1 and
'enter for default count values, else press enter'. Here the
'BIGS908 software application is giving the user the opportunity
'to program the computer-controlled player to count cards using
'the default count values. If the user does press the '1' key and
'the 'enter' key in response to the above-described prompt, then
'the BIGS908 software application loads default count values into
'program memory from a database selected from a group consisting
'of database1 and database2. Database1 and database2 are written
'into lines of code located at the end of the source code. If the
'user does not add a subset of game rules made for complete hands
'that make qualifying-five-card-poker hands, then the BIGS908
'software application loads default count values into program
'memory from database1. If the user does add a subset of game
'rules made for complete hands that make qualifying-five-card-
'poker hands, and if the predetermined-hand-ranking rules do
'specify that each joker can perform a function selected from a
'group consisting of represent an ace, complete a straight,
'complete a flush, and complete a straight-flush (bug rule), then
'the BIGS908 software application loads default count values into
'program memory from database1. If the user does add a subset of
'game rules made for complete hands that make qualifying-five-
'card-poker hands, and if the predetermined-hand-ranking rules do
'specify that each joker can represent the rank and suit of any
'card (fully wild rule), then the BIGS908 software application
'loads default count values into program memory from database2.

'If the user does not press the '1' key and the 'enter' key and
'instead does press the 'enter' key in response to the above-
'described prompt, then the BIGS908 software application prompts
'the user to respond to another series of prompts. The series of
'prompts gives the user an opportunity to set the count value
'assigned to each rank of card individually. By setting the count
'value assigned to each rank of card individually, the user can
'program the computer-controlled player to use any one of a
'number, diversity, and variety of possible card-counting
'strategies to count cards during a game simulation.

'IMPORTANT: If the user does intend to program the BIGS908
'software application to use on going simulation results to
'generate an E-Z-count strategy, then I suggest the user set the
'count value assigned to each rank of card to zero.

'XXVII. ADD RULE TO SPECIFY THE COMPUTER-CONTROLLED PLAYER
'PERFORMS A TRUE-COUNT CONVERSION, ELSE PRESS ENTER

'After the user assigns count values to each rank of playing card
'in one of the above-described group of three possible ways, the
'BIGS908 software application will prompt the user to 'press 1
'and enter for true-count conversion, else press enter'. If the
'computer-controlled player is going to be using a balanced-card-
'counting strategy, then I suggest that in response to the above-
'described prompt the user press the '1' key and the 'enter' key
'to cause the computer-controlled player to make a true-count
'conversion. If the computer-controlled player is going to be
'using an unbalanced-card-counting strategy, then I suggest that
'in response to the above-described prompt the user press the
''enter' key to cause the computer-controlled player to not make
'a true-count conversion.

'IMPORTANT: If the user does intend to program the BIGS908
'software application to use on going simulation results to
'generate an E-Z-count strategy, then for best results I suggest
'the user program the computer-controlled player to perform the
'true-count conversion.

'XXVIII. INPUT A CONSTANT ADDED TO RENDER THE BET COUNT, ELSE
'PRESS ENTER

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'input a
'constant added to render the bet count, else press enter'. Here
'the BIGS908 software application is giving the user an
'opportunity to input a number. The computer-controlled player
'adds the number to either the running count or the true count to
'render the bet count. The bet-count is a value input by the
'BIGS908 software application into a user-defined-betting-
'strategy equation used to calculate the value of the game wager.
'If the user does not program the computer-controlled player to
'make a true-count conversion, then the bet count is equal to the
'running count plus the constant. If the user does program the
'computer-controlled player to make a true-count conversion, then
'the bet count is equal to the running count plus the constant.
'The bet count is the count used to calculate the size of the
'game wager.

'One reason the user might want to add a constant is to adjust
'for the size of the edge given to the house by an optional
'embodiment of the game of the present invention. If the house
'edge is relatively large, and if a positive bet count
'corresponds with a raise of the game wager, then adding a
'negative number will keep the computer-controlled player from
'raising the game wager until the average-stack composition
'favors the player. For example, suppose the average-stack
'composition favors the house until the true count reaches
'positive five, zero is the constant added to the true count to
'render the bet count and a bet count of positive one causes the
'computer-controlled player to raise the game wager. In that
'case, the computer-controlled player would be raising the game
'wager while the average-stack composition favors the house
'thereby causing the computer-controlled player to lose more
'credits than the computer-controlled player would otherwise
'lose. In that case, the user might want to make negative five
'the constant added to the true count to render a bet count
'because doing so will keep the computer-controlled player from
'raising the game wager until the average-stack composition
'favors the player.

'Another reason the user might want to add a constant is to make
'the difference between the key count minus the initial running
'count equal to a particular value. For example, if each deck
'yields two surplus-count points, and if the stack consists of
'six decks, then the stack yields twelve surplus-count points. If
'the user intends to program the computer-controlled player to
'raise the value of the game wager whenever the bet count exceeds
'zero points, then the user could add a constant to make the
'difference between the key count and the initial-running count
'large enough to insure that the computer-controlled player only
'raises the game wager if the average stack composition favors
'the player.

'XXIX. HOW THE SOFTWARE APPLICATION COUNTS CARDS

'In doing so, the important thing for the user to understand is
'how the BIGS908 software application counts cards. As the
'fragment of source code below shows, the BIGS908 software
'application actually counts the cards remaining in the stack and
'not the cards as played and then placed in the discard pile. The
'BIGS908 software application uses memory-elements zero through
'thirteen of the array labeled 'card' to store the number of each
'rank of card remaining in the stack. The BIGS908 software
'application uses memory-elements zero through thirteen of the
'array labeled 'cv' to store the count value assigned to each
'rank of card. The BIGS908 software application uses memory-
'element fourteen of the array labeled 'cv' to store the running
'count.

'cv(14) = 0
'FOR x = 0 TO 13
'    cv(14) = cv(14) - cv(x) * card(x)
'NEXT x

'The BIGS908 software application infers the sum of the count
'values assigned to the cards in the discard tray by subtracting
'from zero the sum of the count values assigned to the cards
'remaining in the stack. This is the function of the fragment of
'source code shown above.

'XXX. EFFECT OF HOW THE SOFTWARE APPLICATION COUNTS CARDS ON THE
'INITIAL-RUNNING COUNT

'If the user programs the BIGS908 software application to cause
'the computer-controlled player to count cards using a balanced-
'card-counting strategy the initial-running count will be equal
'to zero points. However, if the user programs the BIGS908
'software application to cause the computer-controlled player to
'count cards using an unbalanced-card-counting strategy, then the
'initial-running count ends up being equal to zero minus the sum
'of the surplus-count values assigned to the cards in the stack.
'In the case of the above-describe example, the initial-running
'count ends up being equal to zero minus twelve points, two
'surplus points per deck times six decks.

'Now that the user knows the initial-running count, there are a
'number of ways for the user to program the BIGS908 software
'application to make the difference between the key count and the
'initial-running count large enough to insure the player only
'raises the value of the game wager if the average-stack
'composition favors the player. Suppose if the computer-
'controlled player were to use the above-described-unbalanced-
'card-counting strategy to count cards, then a difference of
'fifteen points would be large enough to insure the player only
'raises the value of the game wager if the average-stack
'composition favors the player. One way to program the BIGS908
'software application to make the difference between the key
'count and initial-running count equal to fifteen points is to
'calculate the bet count by adding a constant of negative two to
'the running count, and to specify a betting-strategy equation
'that causes the computer-controlled player to increase the value
'of the game wager whenever the bet count is at least equal to
'one point.

'However, using the above-described values for the initial
'running count and key count would cause the running count to be
'negative most of the time. If a human being were to use the
'above-described-unbalanced-card-counting strategy to count
'cards, then keeping the running count positive would probably be
'desirable. One way to do so is to make the initial-running count
'equal to twelve points and the key count equal to twenty-seven
'points.

'XXXI. ENABLE THE COMPUTER-CONTROLLED PLAYER TO VARY PLAYING
'STRATEGY IN RESPONSE TO CHANGES IN THE BET-COUNT LEVEL

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'Press 1 and
'enter to load a file containing data about matching play-
'variation indices and thereby enable the computer-controlled
'player to vary playing strategies in response to changes in the
'bet count, else press enter.'. If the user does press the '1'
'key and the 'enter' key, then the BIGS908 application prompts
'the user to 'enter the 'folder/file name prefix of the file
'containing data about the matching play-variation indices to be
'loaded into program memory'. Here the BIGS908 application is
'giving the user an opportunity to load the contents of a data
'file named with a 'n' character as the file name suffix. A
'software application selected from a group consisting of the
'BIGS914 software application and the BIGS923 software
'application saves the file. The file stores data about the play-
'variation indices that computer-controlled players will use to
'vary playing strategy in response to changes in the bet-count
'level during the simulation of an optional embodiment of the
'game of the present invention. The play-variation indices should
'match the user-defined set of game rules the user loaded.

'After the user enters 'the folder/file name prefix of the file
'containing data about the the matching play-variation indices to
'be loaded into program memory', the BIGS908 application prints
'to the application window the brief description stored along
'with the play-variation indices and afterward prompts the user
'with the following message.  'If this is acceptable, then type y
'and enter, else press enter'.  Here the BIGS908 application is
'giving the user an opportunity to verify that the contents of
'the correct file have been loaded into the BIGS908 application.
'If the user does not type 'y' and 'enter' and instead does type
''enter' in response to the above-described prompt, then the
'BIGS908 application does enable the user to re-enter the folder/
'file name prefix of the file containing data about the matching
'play-variation indices to be loaded into program memory.

'XXXII. USE ON-GOING-GAME-SIMULATION RESULTS TO GENERATE AN E-Z-
'COUNT STRATEGY, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter to use on going simulation results to generate an E-Z-
'count strategy, else press enter'.
'
'Referring now to the source code shown below, The BIGS908
'software application uses memory-elements zero through thirteen
'in the array labeled 'card' to store the number of each rank of
'card remaining in the stack and uses memory-element fourteen in
'the array labeled 'card' to store the total number of cards
'remaining in the stack. The BIGS908 software application uses
'memory-elements zero through thirteen in the array labeled 'mc'
'to store the number of each rank of card in a complete deck and
'uses memory-element fourteen in the array labeled 'mc' to store
'the total number of cards in a complete deck. Memory-element
'twenty-three of the array labeled 'b' stores the number of
'credits won by the computer-controlled player during any given
'round of play. Memory-element twenty-five of the array labeled
''b' stores the number of credits won by the dealer during any
'given round of play.

'The change in the occurrence of any given rank of playing card
'is equal to the difference of the quotient of the number of
'cards of that rank in a complete deck divided by the total
'number of cards in a complete deck minus the quotient of the
'number of cards of that rank remaining in the stack divided by
'the total number of cards remaining in the stack. The BIGS908
'software application uses memory-elements zero through thirteen
'of the array labeled 'ev' to store values equal to the change in
'the occurrence of each rank of card.

'Memory-elements zero through thirteen of the array label 'ev'
'are multiplied by a number. If the computer-controlled player
'does perform a true count conversion, then the number is the
'total number of cards in a complete deck. This multiplication
'operation standardizes the change in the occurrence of each rank
'of player card as a number of cards in a complete deck. If the
'computer-controlled player does not perform a true-count
'conversion, then the number is the total number of cards
'remaining in the stack. This multiplication operation
'standardizes the change in the occurrence of each rank of card
'as a number of cards remaining in the stack.

'After the outcome of each round of play has been determined, the
'BIGS908 software application uses the array labeled 'dv' and the
'array labeled 'fv' to perform on going summations of various
'simulation results. The BIGS908 software application uses
'memory-elements zero through thirteen of the array labeled 'dv'
'to perform an on going summation of the product of the change in
'the occurrence of each rank of card multiplied by the total
'number of credits won and lost. The BIGS908 software application
'uses memory-elements zero through thirteen of the array labeled
''fv' to perform an on going summation of the absolute value of
'the product of the change in the occurrence of each rank of card
'multiplied by the total number of credits won and lost.  The
'count value of each rank of card is equal to one hundred times
'the quotient of the summation of on going simulation results
'stored in the corresponding memory element of the array labeled
''dv' divided by the summation of on going simulation results
'stored in the corresponding memory element of the array labeled
''fv'. For example, the count value for each king is equal to one
'hundred times the quotient of the on going summation of
'simulation results stored in memory-element thirteen of the
'array labeled 'dv' divided by the on going summation of
'simulation results store in memory-element thirteen of the array
'labeled 'fv'.

'After the BIGS908 software application uses the summations of
'on-going simulation results to calculate the count value
'assigned to each rank of card, the computer-controlled player
'uses the count values to count cards. Doing so sets up a
'feedback loop. If the user does program the computer-controlled
'player to use a betting strategy that does not call for the
'player to vary the value of the game wager with changes in the
'bet count level, then the feedback loop causes the decimal-count
'value assigned to each rank of card to converge upon a measure
'of the change in the expected value of the game wager caused by
'the removal of a card of that particular rank from each deck in
'the stack. If the user does program the computer-controlled
'player to use a betting strategy that does call for the player
'to vary the value of the game wager with changes in the bet
'count level, then the feedback loop causes the decimal-count
'value assigned to each rank of card to converge upon the
'decimal-count value that works best with the betting strategy.
'At the end of the game simulation, the BIGS908 software
'application saves the decimal-count value assigned to each rank
'of card to file as an E-Z-count strategy.

'IF ezc% = 1 THEN
'    IF bottom! < b(7) OR rn&& < 11 THEN
'        IF b(7) < top! OR rn&& < 11 THEN
'            FOR x = 0 TO 13
'    dv(x) = dv(x) + ev(x) * (b(23) - b(25))
'    fv(x) = fv(x) + ABS(ev(x)) * (b(23) + b(25))
'    ev(x) = mc(x) / mc(14) - card(x) / card(14)
'    IF true% = 1 THEN ev(x) = ev(x) * mc(14)
'    IF true% <> 1 THEN ev(x) = ev(x) * card(14)
'            NEXT x
'        END IF
'    END IF
'END IF

'XXXIII. MATHEMATICALLY BALANCE THE CARD COUNTING STRATEGY IF
'UNBALANCED, ELSE PRESS ENTER

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'press 1 and
'enter to mathematically balance the card counting strategy if
'unbalanced, else press enter'. If the user does press the '1'
'key and the 'enter' key, then the BIGS908 software application
'will prompt the user to 'press 1 and enter or 2 and enter to
'specify the type of balancing to be used: 1 for subtractive, 2
'for multiplicative.'.

'IMPORTANT: If the user does program the BIGS908 software
'application to use on going simulation results to generate an E-
'Z-count strategy, then for best results I suggest the user also
'program the computer-controlled player to mathematically balance
'the E-Z-count strategy.

'XXXIV. GUIDED EXAMINATION OF SOURCE CODE USED TO BALANCE AN
'UNBALANCED CARD COUNTING STRATEGY

'Referring now to the source code shown below, the BIGS908
'software application uses memory element fourteen of the array
'labeled 'cv' to store zero minus the sum of the count values
'assigned to the cards remaining in the stack. The BIGS908
'software application uses memory element fourteen of the array
'labeled 'ev' to store the sum of the count values assigned to
'the cards in a complete deck divided by four. The BIGS908
'software application uses memory element fifteen of the array
'labeled 'gv' to store the sum of absolute values of the count
'values assigned to the cards in a complete deck divided by four.
'The BIGS908 software application uses memory elements zero
'through thirteen of the array labeled 'cv' to store the count
'values assigned to each rank of card. The BIGS908 software
'application uses memory elements zero through thirteen of the
'array labeled 'gv' to store the balanced count values assigned
'to each rank of card. The BIGS908 software application uses
'memory elements zero through thirteen in the array labeled
''card' to store the number of each rank of playing card
'remaining in the stack and uses memory element fourteen in the
'array labeled 'card' to store the total number of playing cards
'remaining in the stack. The BIGS908 software application uses
'memory elements zero through thirteen in the array labeled 'mc'
'to store the number of each rank of card in a complete deck and
'uses memory element fourteen in the array labeled 'mc' to store
'the total number of cards in a complete deck.

'The BIGS908 software application prompts the user to 'press 1
'and enter to use on going simulation results to generate an E-Z-
'count strategy, else press enter' and uses the integer variable
'labeled 'ezc%' to store the user's response. The BIGS908
'software application prompts the user to 'press 1 and enter to
'mathematically balance the card counting strategy if unbalanced,
'else press enter' and uses the integer variable labeled 'bal%'
'to store the user's response.  The BIGS908 software application
'prompts the user to 'press 1 and enter or 2 and enter to specify
'the type of balancing to be used: 1 for subtractive, 2 for
'multiplicative.' The BIGS908 software application uses the
'integer variable labeled 'balance%' to store the user's
'response.

'FOR x = 0 TO 13
'    IF fv(x) <> 0 AND ezc% = 1 THEN
'        cv(x) = dv(x) / fv(x) * 100
'    END IF
'    cv(14) = cv(14) - cv(x) * card(x)
'    ev(14) = ev(14) + cv(x) * mc(x) / 4
'    gv(15) = gv(15) + ABS(cv(x)) * mc(x) / 4
'NEXT x

'IF ezc% = 1 AND bal% = 1 THEN
'    IF balance% = 1 THEN
'        cv(14) = 0
'        FOR x = 0 TO 13
'            gv(x) = cv(x) - ev(14) * mc(x) / mc(14)
'            cv(14) = cv(14) - gv(x) * card(x)
'        NEXT x
'    END IF
'    IF balance% = 2 THEN
'        cv(14) = 0
'        FOR x = 0 TO 13
'            IF cv(x) >= 0 THEN
'                gv(x) = cv(x) * gv(15) / (gv(15) + ev(14))
'            END IF
'            IF cv(x) < 0 THEN
'                gv(x) = cv(x) * gv(15) / (gv(15) - ev(14))
'            END IF
'            cv(14) = cv(14) - gv(x) * card(x)
'        NEXT x
'    END IF
'END IF


'If the BIGS908 software application uses the subtractive type of
'balancing, then the BIGS908 software application subtracts the
'sum of the count values assigned to the cards in a complete deck
'from the count values assigned to each rank of card in
'proportion to the quotient of the number of each rank of card in
'a complete deck divided by the total number of cards in a
'complete deck.

'If the BIGS908 software application uses the multiplicative type
'of balancing, and if the count value assigned to a given rank of
'card is positive, then the BIGS908 software application first
'finds the product of the positive count value assigned to that
'given rank of card multiplied by the sum of the absolute values
'of the count values assigned to the cards in a complete deck.
'The BIGS908 software application next divides that product by
'the sum of the sum of the absolute values of the count values
'assigned to the cards in a complete deck plus the sum of the
'count values assigned to the cards in a complete deck. The
'BIGS908 software application stores the quotient as the
'balanced-card-count value of that given rank of card in the
'memory element of the array labeled 'gv' corresponding to that
'given rank of card.

'If the BIGS908 software application uses the multiplicative type
'of balancing and if the count value assigned to a given rank of
'card is negative, then the BIGS908 software application first
'finds the product of the negative-count value assigned to the
'given rank of card multiplied by the sum of the absolute values
'of the count values assigned to the cards in a complete deck.
'The BIGS908 software application next divides that product by
'the remainder of the sum of the absolute values of the card-
'count values assigned to the cards in a complete deck minus the
'sum of the card-count values assigned to the cards in a complete
'deck. The BIGS908 software application stores the quotient as
'the balanced count value of that given rank of card in the
'memory element of the array labeled 'gv' corresponding to that
'given rank of card.

'XXXV. GENERATE THE E-Z-COUNT STRATEGY BY ONLY USING THE ON-
'GOING-GAME-SIMULATION RESULTS GATHERED FROM THE OUTCOME OF GAMES
'STARTED WITHIN A USER-DEFINED RANGE OF BET COUNTS, ELSE PRESS
'ENTER

'If the user does program the BIGS908 software application to
'generate an E-Z-count strategy, and if the user does program the
'BIGS908 software application to balance the card counting
'strategy if unbalanced, then after the user responds to the
'above-described prompts, the BIGS908 software application
'prompts the user to do the following. 'Press 1 and enter to
'generate the E-Z-count strategy by only using ongoing simulation
'results gathered from the outcome of games started within a
'user-defined range of bet counts, else press enter'. If the user
'does press the '1' key and the 'enter' key, then the BIGS908
'software application prompts the user to 'input the upper limit
'of the user-defined range of bet counts'. After the user
'responds to this prompt, the BIGS908 software application
'prompts the user to 'input the lower limit of the user-defined
'range of bet counts'.

'Here the BIGS908 software application is giving the user an
'opportunity to restrict the on-going summation of various
'simulation results to the simulation results gathered from the
'outcomes of all games started within a user-defined range of bet
'counts. Do not input a number for the upper limit of the user-
'defined range of bet counts that is less than the number input
'for the lower limit of the user-defined range of bet-count
'levels. If the user does so, then the bet count will never fall
'within the user-defined range of bet counts because the user-
'defined range of bet counts will be a null set. As a result, the
'BIGS908 software application will be unable to make an on-going
'summation of various simulation results. If the BIGS908 software
'application is unable to make an on going summation of various
'simulation results, then the BIGS908 software application will
'be unable to generate an E-Z-count strategy.

'Use of this feature of the BIGS908 software application is
'optional. If the user does not press '1' and 'enter' and instead
'does press the 'enter' key, then the BIGS908 software
'application will use an on-going summation of various simulation
'results gathered from the outcome of all games to generate the
'E-Z-count strategy.

'XXXVI. ADD A RULE TO SPECIFY HOW THE DEALER DETERMINES WHEN TO
'RESHUFFLE THE STACK

'If the dealer determines when to reshuffle the stack based on
'the percentage of the stack remaining in the shoe, then the
'dealer determines when to reshuffle the stack based on the
'number of cards remaining in the shoe. If the dealer determines
'when to reshuffle the stack based on the number of cards
'remaining in the shoe, then the number of rounds dealt per shoe
'varies in the following way. The dealer deals fewer rounds of
'play than average during the course of a shoe when a
'disproportionately large number of cards assigned low-point
'values are dealt during the course of the shoe. The dealer deals
'more rounds than average during the course of a shoe when a
'disproportionately large number of cards assigned high-point
'values are dealt during the course of a shoe.

'The way that the number of rounds dealt per shoe varies produces
'a preferential shuffle. If cards assigned a low point value are
'favorable to the player and cards assigned a high point value
'are favorable to the dealer, then the effect of this
'preferential shuffle is a slight decrease in the house edge.
'Users can eliminate this decrease in the house edge, by having
'the dealer reshuffle the stack after a fixed number of rounds of
'play rather than having the dealer reshuffle each time the
'percentage of the stack remaining in the shoe falls below a
'user-defined-maximum percentage.

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the dealer uses the number of rounds dealt to
'determine when to reshuffle the stack, else press enter.'. Here
'the BIGS908 software application is giving the user an
'opportunity to remove a rule from the user-defined set of game
'rules and, in its' place, add a rule to the user-defined set of
'game rules. The rule removed is: The dealer reshuffles the stack
'each time the percentage of the stack remaining in the shoe
'falls below a user-defined-maximum percentage. The rule added
'is: The dealer reshuffles the stack each time a user-defined
'number of rounds of play have been dealt from the shoe.
'If the user does press the '1' key and the 'enter' key
'in response to the above-described prompt, then the BIGS908
'software application prompts the user to 'input the number of
'rounds dealt from each stack of cards'. Here the BIGS908
'software application is prompting the user to enter the user-
'defined number of rounds of play dealt from the shoe before the
'dealer reshuffles the stack. In response, the user should input
'a number that is roughly equivalent to the average number of
'rounds of play dealt from each stack before the percentage of
'the stack remaining in the shoe falls below a user-defined
'percentage.

'If the user presses the 'enter' key in response to the above-
'described prompt, then the BIGS908 software application prints a
'user-defined percentage value 'is the maximum percentage of the
'stack of cards remaining in the shoe when the dealer reshuffles'
'and prompts the user with the following message. 'If this is
'acceptable, then type y and press enter, else press enter'. One
'of the game rules makes the maximum percentage of the stack of
'cards remaining in the shoe when the dealer reshuffles equal to
'a user-defined percentage value.  Here the BIGS908 software
'application is giving the user the opportunity to choose either
'to use the user-defined percentage value included in the user-
'defined set of game rules saved to data file by the BIGS907
'software application or to redefine the maximum percentage of
'the stack of cards remaining in the shoe when the dealer
'reshuffles.

'If the user does press the 'y' key and the 'enter' key in
'response to the above-described prompt, then the user indicates
'the user-defined percentage value included in the user-defined
'set of game rules is acceptable, and the BIGS908 software
'application will use the user-defined percentage value included
'in the user-defined set of game rules to determine when the
'dealer reshuffles the stack.  If the user does not press the 'y'
'key and the 'enter' key and instead does press the 'enter' key
'in response to the above-described prompt, then the user
'indicates the user-defined percentage value included in the
'user-defined set of game rules is not acceptable. In response,
'the BIGS908 software application will prompt the user to 'input
'the maximum percentage of the stack of cards remaining in the
'shoe when the dealer reshuffles'.

'XXXVII. ADD RULES TO SPECIFY THAT IF THE BET COUNT DOES FALL
'BELOW A USER-DEFINED THRESHOLD, THEN THE COMPUTER-CONTROLLED
'PLAYER QUITS THE TABLE, ELSE PRESS ENTER

'After the user responds to the above-described set of prompts,
'the BIGS908 software application prompts the user to 'press 1
'and enter for if the bet count does fall below a user-defined
'threshold, then the computer-controlled player quits the table,
'else press enter'. This feature of the BIGS908 software
'application is useful in modeling the behavior of a player who
'consistently leaves the table when the bet count indicates that
'the expected value of the game wager has become so favorable to
'the house that it is not likely to become favorable to the
'player before the dealer reshuffles the stack.

'If the computer-controlled player is counting cards using a
'balanced strategy, then as the difference between the initial
'bet count and the current bet count increases, the change in the
'expected value of the game wager increases. If the bet count
'falls, then, typically though not necessarily, the expected
'value of the game wager falls. If the bet count rises, then,
'typically though not necessarily, the expected value of the game
'wager rises.

'The house edge is inversely proportional to the expected value
'of the game wager. If the expected value of the game wager
'rises, then the house edge falls. If the expected value of the
'game wager falls, then the house edge rises. If the bet count
'falls, then, typically though not necessarily, the house edge
'rises. If the bet count rises, then, typically though not
'necessarily, the house edge falls.

'If the bet count falls below a user-defined threshold, and if,
'in response, the computer-controlled player quits the table,
'then, by so doing, the computer-controlled player avoids playing
'at the table when the house edge has risen above a user-defined
'threshold. If the computer-controlled player does not play at
'the table when the house edge has risen above a user-defined
'threshold, and if the computer-controlled player does play at
'the table when the house edge has not risen above a user-defined
'threshold, then the combined house edge of all games played at
'the table will decrease substantially. In Blackjack literature,
'writers sometimes refer to use of this strategy in live
'Blackjack games as wonging out'.

'If the user does press the '1' key and the 'enter' key for the
'computer-controlled player quits the table when the bet count
'does fall below a user-defined threshold, then the BIGS908
'software application prompts the user with the following
'question. 'At what bet count does the player quit the table?'
'The computer-controlled player starts each freshly shuffled shoe
'with an initial bet count. If the user programs the computer-
'controlled player to count cards using a balanced strategy, then
'the initial bet count is equal to zero points plus the constant
'added to render a bet count. If the user programs the computer-
'controlled player to count cards using an unbalanced strategy,
'then the initial bet count is equal to the difference of zero
'points minus the number of surplus points in the stack of cards
'plus the constant added to render a bet count. If the user does
'want the computer-controlled player to quit the table when the
'bet count falls below a user-defined threshold, then the user
'should input a number for the user-defined threshold that is
'lower than the initial bet count. Otherwise, the computer-
'controlled player will quit the table immediately and end up
'never playing a game.

'If the user does program the computer-controlled player to quit
'the table when the bet count falls below a user-defined
'threshold, and if the user does not program the computer-
'controlled player to make a true-count conversion, then the
'BIGS908 software application prompts the user to do the
'following. 'Press 1 and enter for if the bet count does fall
'below the product of the user-defined threshold multiplied by
'the percentage of the stack remaining in the shoe, then the
'computer-controlled player quits the table, else press enter'.

'If the user programs the computer-controlled player to count
'cards using an unbalanced strategy, and if the user programs the
'computer-controlled player to quit the table when the bet count
'falls below a user-defined threshold, then this causes a
'problem. If the user programs the computer-controlled player to
'count cards using an unbalanced strategy, then there are a
'number of surplus count points in the stack of cards. On
'average, this causes the bet count to drift upward during the
'course of a shoe. In so doing, the bet count drifts further and
'further away from the user-defined threshold. This makes it
'possible for the house edge to rise to increasingly higher
'levels without the user-defined threshold causing the computer-
'controlled player to quit the table.

'The above-described prompt enables the user to get around this
'problem. By multiplying the user-defined threshold by the
'percentage of the stack of cards remaining in the shoe, the
'user-defined threshold drifts upward during the course of a shoe
'along with the bet count. This makes it much less likely that
'the house edge will rise to increasingly higher levels without
'the user-defined threshold causing the computer-controlled
'player to quit the table. Therefore, if the user programs the
'computer-controlled player to count cards using an unbalanced
'strategy, and if the user programs the computer-controlled
'player to quit the table when the bet count falls below a user-
'defined threshold, then I suggest the user also program the
'computer-controlled player to multiply the user-defined
'threshold by the percentage of the stack remaining in the shoe.

'XXXVIII. ADD RULES TO SPECIFY THAT IF THE BET COUNT DOES RISE
'ABOVE A USER-DEFINED THRESHOLD, THEN THE DEALER RESHUFFLES, ELSE
'PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for if the bet count does rise above a user-defined
'threshold, then the dealer reshuffles, else press enter'. This
'feature of the BIGS908 software application is useful in
'modeling a legal cheating technique used by many casinos known
'as 'preferential shuffling'. If the user does program the
'computer-controlled dealer to reshuffle the stack if the bet
'count does rise above a user-defined threshold, then the BIGS908
'software application uses the bet count kept by the computer-
'controlled player to determine when the bet count has risen
'above the user-defined threshold.

'If the computer-controlled player is counting cards using a
'balanced strategy, then as the difference between the initial
'bet count and the current bet count increases, the change in the
'expected value of the game wager increases. If the bet count
'falls, then, typically though not necessarily, the expected
'value of the game wager falls. If the bet count rises, then,
'typically though not necessarily, the expected value of the game
'wager rises.

'The house edge is inversely proportional to the expected value
'of the game wager. If the expected value of the game wager
'rises, then the house edge falls. If the expected value of the
'game wager falls, then the house edge rises. If the bet count
'falls, then, typically though not necessarily, the house edge
'rises. If the bet count rises, then, typically though not
'necessarily, the house edge falls.

'If the bet count rises above a user-defined threshold, and if,
'in response, the computer-controlled dealer reshuffles the
'stack, then, by doing so, the computer-controlled dealer
'reshuffles when the house edge has fallen below a user-defined
'threshold. If the computer-controlled dealer shuffles when the
'house edge has fallen below a user-defined threshold, and if the
'dealer does not reshuffle when the house edge has not fallen
'below a user-defined threshold unless another user-defined rule
'does specify the dealer reshuffles, then the combined house edge
'of all games played at the table will increase substantially.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS908
'software application prompts the user to answer the following
'question. 'At what bet count does the dealer reshuffle the
'stack'? The computer-controlled player starts each freshly
'shuffled shoe with an initial bet count. If the user programs
'the computer-controlled player to count cards using a balanced
'strategy, then the initial bet count is equal to zero points
'plus the constant added to render a bet count. If the user
'programs the computer-controlled player to count cards using an
'unbalanced strategy, then the initial bet count is equal to the
'difference of zero points minus the number of surplus points in
'the stack of cards plus the constant added to render a bet
'count. If the user does want the computer-controlled dealer to
'reshuffle the stack when the bet count has risen above a user-
'defined threshold, then the user should input a number for the
'user-defined threshold that is higher than the initial bet
'count. Otherwise, the computer-controlled dealer will reshuffle
'the stack immediately and end up never playing a game.

'If the user does program the computer-controlled dealer to
'reshuffle the stack when the bet count rises above a user-
'defined threshold, and if the user does not program the
'computer-controlled player to make a true-count conversion, then
'the BIGS908 software application prompts the user to do the
'following. 'Press 1 and enter for if the bet count does rise
'above the product of the user-defined threshold multiplied by
'the percentage of the stack remaining in the shoe, then the
'dealer reshuffles the stack, else press enter'.

'If the user programs the computer-controlled player to count
'cards using an unbalanced strategy, and if the user programs the
'dealer to reshuffle the stack if the bet count has risen above a
'user-defined threshold, then this causes a problem. If the user
'programs the computer-controlled player to count cards using an
'unbalanced strategy, then there are a number of surplus count
'points in the stack of cards. On average, this causes the bet
'count to drift upward during the course of a shoe. In so doing,
'the bet count drifts closer and closer to the user-defined
'threshold used by the computer-controlled dealer to determine
'when to reshuffle the stack. This makes it possible for the
'user-defined threshold to cause the computer-controlled dealer
'to reshuffle to stack while the bet count indicates that the
'house still has an edge.

'Here the BIGS908 software application enables the user to get
'around this problem. By multiplying the user-defined threshold
'by the percentage of the stack of cards remaining in the shoe,
'the user-defined threshold drifts upward during the course of a
'shoe along with the bet count. This makes it much less likely
'that the house will have an edge when the user-defined threshold
'causes the computer-controlled dealer to reshuffle the stack.
'Therefore, if the user programs the computer-controlled player
'to count cards using an unbalanced strategy, and if the user
'programs the computer-controlled dealer to reshuffle the stack
'when the bet count rises above a user-defined threshold, then I
'suggest the user also program the computer-controlled dealer to
'multiply the user-defined threshold by the percentage of the
'stack remaining in the shoe.

'XXXIX. THE COMPUTER-CONTROLLED PLAYER USES A MULTIPLICATIVE
'BETTING STRATEGY, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the computer-controlled player uses a multiplicative
'betting strategy, else press enter'. Here the BIGS908 software
'application is giving the user an opportunity to program the
'computer-controlled player to make the size of the game wager
'equal to the product of the bet count multiplied by a user-
'defined multiplier.

'If in response to the above-described prompt, the user does
'press the '1' key and the 'enter' key, then the BIGS908 software
'application prints 'bet = multiplier * bet count' and prompts
'the user to 'input the multiplier'.  Here 'bet = multiplier *
'bet count' is short for the following sentence: 'The value of
'the game wager equals the multiplier times the bet count'. The
'multiplier is a number. The multiplier could be a number with
'any decimal value. However, if the user intends for the
'computer-controlled player to model the way a human player might
'use a multiplier to calculate the  value of the game wager, then
'I suggest the multiplier be a number with a positive integer
'value.

'XL. THE COMPUTER-CONTROLLED PLAYER USES AN EXPONENTIAL
'BETTING STRATEGY, ELSE PRESS ENTER

'If in response to the above described prompt, the user does not
'press the '1' key and the 'enter' key and instead does press the
''enter' key, then the BIGS908 software application prompts the
'user to 'press 1 and enter for the computer-controlled player
'uses an exponential-betting strategy, else press enter'. Here
'the BIGS908 software application is giving the user the
'opportunity to program the computer-controlled player to make
'the size of the game wager equal to the product of a user-
'defined multiplier times a user-defined base raised to the power
'of the bet count.

'If in response to the above-described prompt, the user does
'press the '1' key and the 'enter' key, then the BIGS908 software
'application prints 'bet = multiplier * base ^ bet count' and
'prompts the user to 'input the base'. After the user inputs the
'base, the BIGS908 software application prints 'bet = multiplier
'* base ^ bet count' and prompts the user to 'input the
'multiplier'. Here 'bet = multiplier * base ^ bet count' is short
'for the following sentence: 'The value of the game wager is
'equal to the product of the multiplier times the base raised to
'the power of the bet count'. Both the multiplier and the base
'are numbers. Both the base and the multiplier could be a number
'with any decimal value. However, if the user intends for the
'computer-controlled player to model the way a human player might
'use the multiplier and base to calculate the value of the game
'wager, then I suggest the multiplier be a number with a positive
'integer value and the base be a number with a small positive
'integer value such as two.

'XLI. THE COMPUTER-CONTROLLED PLAYER LIMITS BET SIZE BY PERCENTAGE
'OF THE PURSE, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the computer-controlled player limits bet size by
'percentage of purse, else press enter'. If the user does not
'press the '1' key and the 'enter' key and instead does press the
''enter' key, then the computer-controlled player will not limit
'the size of the game wager by percentage of purse. If the user
'does press the '1' key and the 'enter' key, then the BIGS908
'software application prompts the user to 'as a % of the purse
'input the size of the smallest bet'. After the user responds to
'that prompt, the BIGS908 software application prompts the user
'to 'as a % of the purse input the size of the largest bet'.

'Use of this feature does impose a lower limit and an upper limit
'on the value of the game wagers made by the computer-controlled
'player. The lower limit is as a user-defined percentage of the
'purse. The upper limit is as a user-defined percentage of the
'purse.

'XLII. THE COMPUTER-CONTROLLED PLAYER LIMITS BET SIZE BY NUMBER
'OF CREDITS, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the computer-controlled player limits bet size by
'number of credits, else press enter'. If the user does not press
'the '1' key and the 'enter' key and instead does press the
''enter' key, then the computer-controlled player will not limit
'the size of the game wager by number of credits. If the user
'does press the '1' key and the 'enter' key, then the BIGS908
'software application prompts the user to 'as a number of credits
'input the size of the smallest bet'. After the user responds to
'that prompt, the BIGS908 software application prompts the user
'to 'as a number of credits input the size of the largest bet'.

'Use of this feature does impose a lower limit and an upper limit
'on the value of the game wagers made by the computer-controlled
'player. The lower limit is as a user-defined number of credits.
'The upper limit is as a user-defined number of credits. This
'feature enables the user to model betting strategies that call
'for the player to restrict the value of game wagers to a
'narrower range of values than the user-defined table minimum and
'user-defined table maximum.

'XLIII. THE COMPUTER-CONTROLLED PLAYER USES THE PLATEAU BETTING
'STRATEGY, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the computer-controlled player uses the plateau
'betting strategy, else press enter'. Here the BIGS908 software
'application is giving the user the opportunity to program the
'computer-controlled player to make the value of the game wager
'grow every time the player's purse reaches a new high. If the
'user does not press the '1' key and the 'enter' key and instead
'does press the 'enter' key, then the computer-controlled player
'will not use the plateau betting strategy. If the user does
'press the '1' key and the 'enter' key, then the computer-
'controlled player will use the plateau betting strategy and the
'BIGS908 software application prints the following text to the
'application window. 'Bet = bet * record high purse / starting
'purse.

'The plateau betting strategy requires the computer-controlled
'player to first calculate the value of the game wager using one
'betting strategy selected from a group of betting strategies
'consisting of the multiplicative betting strategy and the
'exponential betting strategy. The computer-controlled player
'then calculates the product of the value of the game wager
'multiplied by the quotient of the number of credits in the
'record high purse divided by the number of credits in the
'starting purse. The product is the value of the game wager.

'If the user does program the computer-controlled player to use
'the plateau betting strategy, then the user might also want to
'limit bet size by percentage of purse as described above. Doing
'so will cause the bet spread to remain constant while the
'plateau betting strategy inflates the sizes of bets in response
'to changes in the ratio between the number of credits in the
'record high purse and the number of credits in the starting
'purse.

'XLIV. THE COMPUTER-CONTROLLED PLAYER USES THE PROPORTIONAL
'BETTING STRATEGY, ELSE PRESS ENTER

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'press 1 and
'enter for the computer-controlled player uses the proportional
'betting strategy, else press enter'. Here the BIGS908 software
'application is giving the user the opportunity to program the
'computer-controlled player to make the value of game wagers
'change in proportion to the changes in the number of credits in
'the player's purse. If the user does not press the '1' key and
'the 'enter' key and instead does press the 'enter' key, then the
'computer-controlled player will not use the proportional betting
'strategy. If the user does press the '1' key and the 'enter'
'key, then the computer-controlled player will use the
'proportional betting strategy and the BIGS908 software
'application prints the following text to the application window.
''Bet = bet * current purse / starting purse.

'Use of the proportional betting strategy requires the computer-
'controlled player to first calculate the value of the game wager
'using one betting strategy selected from a group of betting
'strategies consisting of the multiplicative betting strategy and
'the exponential betting strategy. The computer-controlled player
'then calculates the product of the value of the game wager
'multiplied by the quotient of the number of credits in the
'current purse divided by the number of credits in the starting
'purse. The product is the value of the game wager.

'If the user does program the computer-controlled player to use
'the proportional betting strategy, then the user might also want
'to limit bet size by percentage of purse as described above.
'Doing so will cause the bet spread to remain constant while the
'proportional betting strategy inflates and deflates the sizes of
'bets in response to changes in the ratio between the number of
'credits in the current purse and the number of credits in the
'starting purse.

'XLV. ADD RULES TO SPECIFY AS A NUMBER CREDITS THE STARTING
'PURSE

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'input as a
'number of credits the starting purse'. Here the BIGS908 software
'application is giving the user an opportunity to input the
'number of credits in the starting purse of the computer-
'controlled player. I sometimes find it convenient to enter zero
'as this makes the change in the purse easier to determine after
'the simulation concludes. However, if desired, then the user
'could input a non-zero number as the number of credits in the
'starting purse.

'Furthermore, if the user intends to use either one of a group of
'betting strategies consisting of the plateau betting strategy
'and the proportional betting strategy, then the user should not
'input zero as the number of credits in the starting purse as
'this will cause the computer-controlled player to divide by zero
'when calculating the size of the game wager. Preferably, if the
'user intends to use either one of a group of betting strategies
'consisting of the plateau betting strategy and the proportional
'betting strategy, then the user should input a positive number
'as the number of credits in the computer-controlled player's
'starting purse.

'XLVI. PROGRAM THE COMPUTER-CONTROLLED PLAYER TO COMPUTE BETS IN
'MULTIPLES OF A USER-DEFINED NUMBER OF CREDITS

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to answer the
'following question. 'Compute bets in multiples of what number of
'credits'? The user's response to this prompt is useful in
'simulating a number, diversity, and variety of possible betting
'strategies. If the user does program the computer-controlled
'player to compute bets in multiples of a large number of
'credits, then the computer-controlled player will not raise
'until the bet count goes up to a high enough level that the
'betting strategy yields a value for the game wager that is at
'least equal to the large number of credits. In this way, the
'user can program the computer-controlled player not to raise the
'game wager until the bet count indicates the expected value of
'the game wager favors the player and do so without having to add
'to the card count a negative number to render the bet count.

'For example, if the table minimum is five credits, if the table
'maximum is one hundred credits, and if the computer-controlled
'player computes bets in multiples of one hundred credits, then,
'based on the bet count, the value of the game wager made by the
'computer-controlled player will be a value selected from a set
'of values. In this case, the set of values consists of five
'credits and one-hundred credits. If the table minimum is five
'credits, if the table maximum is one-hundred credits, and if the
'computer-controlled player computes bets in multiples of twenty
'credits,  then, based on the bet count, the value of the game
'wager made by the computer-controlled player will be a value
'selected from a set of values. In this case, the set of values
'consists of five credits, twenty credits, forty credits, sixty
'credits, eighty credits, and one-hundred credits. If the table
'minimum is five credits, if the table maximum is one-hundred
'credits, and if the computer-controlled player computes bets in
'multiples of five credits, then based on the bet count the value
'of the game wager made by the computer-controlled player will be
'a value selected from a set of values. in this case, the set of
'values consists of five credits, ten credits, fifteen credits,
'twenty credits, twenty-five credits, thirty credits, thirty-five
'credits, forty credits, forty-five credits, fifty credits,
'fifty-five credits, sixty credits, sixty-five credits, seventy
'credits, seventy-five credits, eighty credits, eighty-five
'credits, ninety credits, ninety-five credits, and one-hundred
'credits.

'Furthermore, if the user programs the computer-controlled player
'to use the plateau betting strategy, then the plateau betting
'strategy inflates the relative size of the multiples of the
'user-defined number of credits used to calculate the value of
'the game wager in response to changes in the ratio between the
'number of credits in the record high purse and the number of
'credits in the starting purse. If the user programs the
'computer-controlled player to use the proportional betting
'strategy, then the proportional betting strategy inflates and
'deflates the relative size of the multiples of the user-defined
'number of credits used to calculate the value of the game wager
'in response to changes in the ratio between the number of
'credits in the current purse and the number of credits in the
'starting purse.

'XLVII. ADD RULES TO SPECIFY THE TABLE MINIMUM AND THE TABLE
'MAXIMUM

'After the user responds to the above-described prompt, the
'BIGS908 software application prompts the user to 'input as a
'number of credits the table minimum'. After the user responds to
'that prompt, the BIGS908 software application prompts the user
'to 'input as a number of credits the table maximum'. I find it
'convenient to make the table minimum and the table maximum equal
'to the smallest bet and the largest bet that the player will
'place rather than the limits posted by the house. However, if
'the user wants to make the table minimum and table maximum equal
'to the limits posted by the house, then the user can program the
'computer-controlled player to limit the value of the game wager
'by number of credits as described above.

'XLVIII. ADD RULES TO SPECIFY AS A NUMBER OF CREDITS THE FEE PAID
'FOR EVERY ONE-HUNDRED CREDITS BET

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'input as a
'number of credits the fee paid for every 100 credits bet'. The
'user's response to this prompt is useful in simulating games
'wherein the house makes a collection every round such as in
'California style banking games wherein the house is prohibited
'from having a vested interest in the outcome of the game.

'XLIX. ADD RULES TO SPECIFY THAT THE DEALER PAYS THE PLAYER
'BONUSES FOR DRAWING CERTAIN COMBINATIONS OF CARDS VALUED AT
'TWENTY-SEVEN POINTS IN MULTIPLES OF THE TABLE MINIMUM RATHER
'THAN IN MULTIPLES OF THE GAME WAGER

'If the user-defined prediction made by the computer-controlled
'player is the player's hand wins, and if the user-defined set of
'game rules does include rules to specify that the dealer pays
'the player bonuses for drawing certain combinations of cards
'valued at twenty-seven points, then the BIGS908 software
'application gives the user the opportunity to add a rule to
'specify that the dealer pays these bonuses to the player in
'multiples of the table minimum rather than in multiples of the
'game wager.

'Doing so is useful in thwarting efforts by card counters to turn
'the odds of the game in their own favor. Because just about
'every card-counting scheme in existence requires the card
'counter to raise the game wager whenever the card count
'indicates the average-stack composition is favorable to the
'player. If any player does raise the game wager, and if the size
'of the bonus payout is a multiple of the table minimum, then the
'size of the bonus payout in relation to the size of the regular
'payout will shrink. If the size of the bonus payout in relation
'to the size of the regular payout shrinks, then the size of the
'decrease in the house edge caused by the bonus payout will
'shrink. As the size of the decrease in the house edge caused by
'the bonus payout shrinks, the overall house edge approaches that
'of a game with no bonus payout. The higher that the house edge
'would be if there were no bonus payout at all, the less likely
'the card counter will encounter an average-stack composition
'that is favorable to the player. If the user does not make the
'bonus payout a multiple of the table minimum then the bonus
'payout will be paid as a multiple of the game wager.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a predetermined-winning-
'complete hand consisting of a pair of jokers, then the BIGS908
'software application prompts the user to do the following.
''Press 1 and enter for the dealer makes bonus payouts a multiple
'of the table minimum for a predetermined-winning-complete hand
'consisting of a pair of jokers, else press enter'.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a predetermined-winning-
'complete hand consisting of an ace and a king, then the BIGS908
'software application prompts the user to do the following.'Press
'1 and enter for the dealer makes bonus payouts a multiple of the
'table minimum for a predetermined-winning-complete hand
'consisting of an ace and a king, else press enter'.

'If the user-defined set of game rules calls for the dealer to
'pay a bonus to the player for drawing a predetermined-winning-
'complete hand consisting of a joker and a card of any rank other
'than joker, then the BIGS908 software application prompts the
'user to do the following.'Press 1 and enter for the dealer makes
'bonus payouts a multiple of the table minimum for a
'predetermined-winning-complete hand consisting of a joker and a
'card of any rank other than joker, else press enter'.

'Sometimes the user-defined set of game rules calls for the
'dealer to pay to the player a super bonus payout for drawing a
'hand consisting of three cards assigned a value of nine points
'each while at the same time the dealer has drawn a hand
'consisting of two cards assigned a value of nine points each. If
'the user-defined set of game rules does so, then the BIGS908
'software application prompts the user to 'input the minimum
'wager required to qualify for the super bonus payout on a mixed
'suits 9-9-9 against any dealer's 9-9 and the super bonus payout
'on the suited 9-9-9 against any dealer's 9-9 hand.'  Here the
'BIGS908 software application is giving the user an opportunity
'to input a number representing the value of the game wager that
'the player must make in order to qualify for either of the
'above-described super bonus payouts.

'L. ADD MORE RULES FOR THE PLAY OF THE PLAYER'S HAND

'Upon the player's turn, the dealer, typically though not
'necessarily, consults with the player for a decision on how to
'play the player's hand. Doing so slows down the pace of the
'game. In the interests of providing a fast-paced game, it is
'possible to minimize the amount of consulting that takes place
'by adding rules to specify that the player must play the
'player's hand a certain-predetermined way under certain-
'predetermined circumstances.

'The BIGS908 software application tracks the number of times per
'hand that the dealer consults with the player for a decision on
'how to play the player's hand. The BIGS908 software application
'also provides the user with a way of adding rules to specify
'that the player is required to play the player's hand a certain-
'predetermined way under certain-predetermined circumstances. The
'BIGS908 software application also provides the user with an
'accurate measure of the average number of times per hand that
'the dealer consults with a player for a decision on how to play
'the player's hand.

'The average number of times per hand that the dealer consults
'with a player for a decision on how to play the player's hand
'gives to the user an indication of the pace of any given
'optional embodiment of the game of the present invention. The
'average number of times per hand that the dealer consults with a
'player for a decision on how to play the player's hand is equal
'to the quotient of the number of times that the dealer consulted
'with a player for a decision on how to play the player's hand
'divided by the number of times that the dealer formed a player's
'complete hand. If the user specifies a plurality of computer-
'controlled players playing at the virtual table during the
'conduct of a game simulation, then the BIGS908 software
'application counts the number of times the dealer consulted with
'each player for a decision on how to play the player's hand and
'the BIGS908 software application counts the number of times the
'dealer formed a player's complete hand for each player. The
'BIGS908 software application uses variable cons&& to store the
'number of times during the game simulation that the dealer
'consulted with a player for a decision on how to play the
'player's hand.  The BIGS908 software application uses variable
'noh&& to store the number of times during the game simulation
'that the dealer formed a player's complete hand.

'The BIGS907 software application enables the user to add rules
'to specify the following. If, upon the dealer's turn, the dealer
'will draw at least one additional card to the dealer's initial
'hand, and if the player's hand total is at least equal to a hand
'total specified by the user for the type of hand the player has,
'then the player must stand. If the user does add the above-
'described rule to the user-defined set of game rules, then the
'user does establish a set of hand totals. Variable hu% stores
'the hand total specified for the player's hard hands. Variable
'su% stores the hand total specified for the player's soft hands.
'If, upon the dealer's turn, the dealer will draw at least one
'additional card to the dealer's initial hand, if the player has
'a hard hand, and if the player's hand total is at least equal to
'the value stored in variable hu%, then the player must stand.
'If, upon the dealer's turn, the dealer will draw at least one
'additional card to the dealer's initial hand, if the player has
'a soft hand, and if the player's hand total is at least equal to
'the value stored in variable su%, then the player must stand.

'The BIGS907 software application requires the user to input
'integer numbers as values for these variables. The BIGS907
'software application includes the values stored in these
'variables in the user-defined set of game rules that the BIGS907
'software application saves to file. When the BIGS908 software
'application loads data about the user-defined set of game rules
'into program memory from the data file saved by the BIGS907
'software application, the BIGS908 software application also
'loads values stored in these variables into program memory. If
'rules require the player to stand, then the BIGS908 software
'application does not count the decision to stand as an instance
'of the dealer consulting with the player for a decision on how
'to play the player's hand.

'The BIGS908 software application enables the user to add
'additional rules to specify that the player must play the
'player's hand a certain-predetermined way under certain-
'predetermined circumstances. After the user responds to the
'above-described prompts, the BIGS908 software application
'prompts the user to do the following. 'Press 1 and enter to add
'rules to specify the following. If, upon the dealer's turn, the
'dealer will draw at least one card to the dealer's initial hand,
'if rules limit the player's options to a choice of hit and
'stand, and if the player's hand total is less than a minimum-
'hand total specified by the user for the type of hand the player
'has, then the player is required to take additional cards to the
'player's hand, one at a time, until the player's hand total is
'at least equal to the minimum-hand total specified by the user
'for the type of hand the player has, else press enter'.

'If the user does simply press the 'enter' key in response to the
'above-described prompt, then the BIGS908 software application
'does not prompt the user to input the minimum-hand total
'specified for the player's hard hands and the BIGS908 software
'application does not prompt the user to input the minimum-hand
'total specified for the player's soft hand. Instead, the BIGS908
'software application automatically sets the minimum-hand total
'specified for the player's hard hands equal to zero and the
'BIGS908 software application automatically sets the minimum-hand
'total specified for the player's soft hands equal to zero. In
'that event, if, upon the dealer's turn, the dealer will draw at
'least one additional card to the dealer's initial hand, then the
'following is true. If the player has a hard hand, and if the
'player's hand total is less than the value stored in variable hu
'%, then the dealer consults with the player for a decision on
'how to play the player's hand. If the player has a hard hand,
'and if the player's hand total is at least equal to the value
'stored in variable hu%, then the player is required to stand. If
'the player has a soft hand, and if the player's hand total is
'less than the value store in variable su%, then the dealer
'consults with the player for a decision on how to play the
'player's hand. If the player has a soft hand, and if the
'player's hand total is at least equal to the value stored in
'variable su%, then the player is required to stand. If rules
'require the player to stand, then the BIGS908 software
'application does not count the decision to stand as an instance
'of the dealer consulting with the player for a decision on how
'to play the player's hand.

'If the user does press the '1' key and the 'enter' key in
'response to the above-described prompt, then the BIGS908
'software application prompts the user to 'input the minimum-hand
'total specified for the player's hard hands'. In response to the
'above-described prompt, the BIGS908 software application
'requires the user to input an integer representative of the
'minimum-hand total specified for the player's hard hands. The
'BIGS908 software application uses variable hl% to store the
'number input by the user.

'If the player has a hard hand, if the player's options are
'limited to a choice of hit and stand, and if, upon the dealer's
'turn the dealer will draw at least one additional card to the
'dealer's initial hand, then all of the following is true. If the
'player's hand total is less than the value stored in variable hl
'%, then the player must draw additional playing cards to the
'player's hand, one at a time, until the player's hand total is
'at least equal to the value stored in variable hl%. If the
'player's hand total is at least equal to the value stored in hl%
'and if the player's hand total is less than the value stored in
'hu%, then the dealer does consult the player for a decision on
'how to play the player's hand. If the player's hand total is at
'least equal to the value stored in variable hu%, then the player
'must stand. If the rules require the player to play the player's
'hand a certain-predetermined way, then the BIGS908 software
'application does not count the decision to play the player's
'hand a certain-predetermined way as an instance of the dealer
'consulting with the player for a decision on how to play the
'player's hand.

'After the user inputs the minimum-hand total specified for the
'player's hard hands, the BIGS908 software application prompts
'the user to 'input the minimum-hand total specified for the
'player's soft hands'. In response to the above-described prompt,
'the BIGS908 software application requires the user to input an
'integer representative of the minimum-hand total specified for
'the player's soft hands. The BIGS908 software application uses
'variable sl% to store the number input by the user.

'If the player has a soft hand, if the player's options are
'limited to a choice of hit and stand, and if, upon the dealer's
'turn the dealer will draw at least one additional card to the
'dealer's initial hand, then all of the following is true. If the
'player's hand total is less than the value stored in variable sl
'%, then the player must draw additional cards to the player's
'hand, one at a time, until the player's hand total is at least
'equal to the value stored in variable sl%. If the player's hand
'total is at least equal to the value stored in sl%, and if the
'player's hand total is less than the value stored in su%, then
'the dealer does consult the player for a decision on how to play
'the player's hand. If the player's hand total is at least equal
'to the value stored in variable su%, then the player must stand.
'If the rules require the player to play the player's hand a
'certain-predetermined way, then the BIGS908 software application
'does not count the decision to play the player's hand a certain-
'predetermined way as an instance of the dealer consulting with
'the player for a decision on how to play the player's hand.

'If the user wants to program the BIGS908 software application to
'count each decision made on how to play the player's hand as an
'instance of the dealer consulting with the player for a decision
'on how to play the player's hand, then the user should program
'the BIGS907 and BIGS908 software applications as follows. If the
'user does press the 'enter' key in response to all of the above-
'described prompts, then zero will be the value stored in each
'variable in the set of variables consisting of hl% and sl%, and
'twenty-seven will be the value stored in each variable in the
'set of variables consisting of hu% and su%. Doing so enables the
'BIGS908 software application to count each decision made about
'how to play the player's hand as an instance of the dealer
'consulting the player for a decision on how to play the player's
'hand.

'LI. INPUT THE NUMBER OF ADDITIONAL PLAYERS AT THE TABLE

'After the user responds to the above-described prompts, the
'BIGS908 software application prompts the user to 'input the
'number of additional players at the table (0 - 6)'. The minimum
'number of computer-controlled players is one. Here the BIGS908
'software application is giving the user the opportunity to add
'up to six more computer-controlled players. Accordingly, the
'BIGS908 software application models the play of up to a maximum
'of seven computer-controlled players. All players use the same
'playing strategy. However, the BIGS908 software application only
'enables one player to use a betting strategy and a card-counting
'strategy, only tracks statistics about the outcome of games
'played by that one player, and that one player sits at 'third
'base' at the virtual table. Third base is the last position to
'play before the dealer plays.

'LII. INPUT THE NUMBER OF SESSIONS IN THE SIMULATION AND THE
'NUMBER OF ROUNDS OF PLAY IN EACH SESSION

'The BIGS908 software application enables the user to run a
'simulation of an optional embodiment of the game of the present
'invention. Each simulation consists of a user-defined number of
'sessions and each session consists of a user-defined number of
'rounds of play.  After the user responds to the above-described
'prompts, the BIGS908 software application prompts the user to
''input the number of sessions in this simulation (1 - 10000)'.
'After the user inputs the number of sessions in this simulation,
'the BIGS908 software application prompts the user to 'input the
'number of rounds of play in each session'. The user is limited
'to no more than two-billion-one-hundred-million rounds of play
'per simulation. Therefore, the user-defined number of rounds of
'play in a session is limited to between one and two-billion-one-
'hundred-million divided by the number of sessions in the
'simulation. The BIGS908 software application informs the user of
'these limits.

'LIII. AUTOMATICALLY CREATE A DESCRIPTION OF THE AVERAGE-STACK
'COMPOSITIONS TO BE STORED

'After the user inputs the number of rounds of play in each
'session, the BIGS908 software application automatically creates
'a description of the average-stack compositions to be stored.
'The BIGS908 software application uses the following format for
'the description of the average-stack compositions to be stored.
''Open (folder/file name prefix + 'i.txt') to see a list of
'simulation parameters'. For example, if the folder/file name
'prefix to be used to store application output is 908docs/
'J23h23s6dgame14TDG', then the description of the average-stack
'compositions will read 'open 908docs/J23h23s6dgame14TDGi.txt to
'see a list of simulation parameters'. After the BIGS908 software
'application creates a description of the average-stack
'compositions to be stored, the BIGS908 software application
'begins the simulation.

'LIV. USES OF THE FILE CONTAINING DATA ABOUT THE AVERAGE-STACK-
'COMPOSITIONS THAT OCCURRED AT EACH OF A RANGE OF BET COUNT
'LEVELS DURING A GAME SIMULATION WHEREIN THE COMPUTER-CONTROLLED
'PLAYER COUNTS CARDS

'Card-counting strategies cannot reveal the exact number of cards
'of each rank remaining in the stack. Card-counting strategies
'can reveal the average-stack composition that occurs at each of
'a range of bet-count levels. The average-stack composition at
'any given bet-count level is the average number of each rank of
'card remaining in the stack at that given bet-count level. The
'BIGS908 software application saves a file containing data about
'the average-stack composition that occurred at each of a set of
'bet-count levels during a simulation of an optional embodiment
'of the game of the present invention that is subject to a user-
'defined set of game rules. The bet-count level is a value input
'by the BIGS908 software application into the user-defined-
'betting-strategy equation used to calculate the value of the
'game wager.

'The BIGS908 software application finds the average-stack
'compositions that occur at a range of bet-count levels during
'the simulation and saves this data in a data file named with a
''m' character as the file name suffix. This data file enables
'the BIGS910, BIGS912, and BIGS914 software applications to
'generate a database of composition-dependent-play-variation
'indices. In addition, this data file enables the BIGS923
'software application to derive a database of total-dependent-
'play-variation indices. In addition, this data file enables the
'BIGS931 software application to generate a table display of the
'average-stack compositions at each of a range of bet-count
'levels, and to save this table to a text file that the user can
'open and view.

'LV. A DETAILED DESCRIPTION OF HOW THE SOFTWARE APPLICATION
'FINDS AVERAGE-STACK COMPOSITIONS THAT OCCUR AT A RANGE OF BET-
'COUNT LEVELS DURING A GAME SIMULATION WHEREIN THE COMPUTER-
'CONTROLLED PLAYER COUNTS CARDS

'The following is a more detailed description of how the BIGS908
'software application finds the average-stack compositions that
'occurred at a range of bet-count levels during the simulation of
'an optional embodiment of the game of the present invention. The
'first step is for the BIGS908 software application to deal the
'cards required to form the set of hands consisting of the
'dealer's initial hand and an initial hand for each player
'participating in the round of play. Next, the BIGS908 software
'application uses the user-defined-card-counting strategy to find
'the running count. Referring now to the fragment of source code
'below, the BIGS908 software application uses memory-element one
'of the array labeled 'c' to store the value for the running
'count. The value for the running count is first set to zero.
'memory-elements zero through thirteen of the array labeled
''card' store the number of each rank of card remaining in the
'stack. Memory-elements zero through thirteen of the array
'labeled 'cv' store the card-count values assigned to each rank
'of card.

'The BIGS908 software application uses the first for-next loop to
'infer the running count of the count values assigned to the
'cards removed to the discard pile by subtracting from zero the
'count values of the cards remaining in the stack. Memory-element
'fourteen of the array labeled 'mc' stores the total number of
'cards in each deck. Memory-element fourteen of the array labeled
''card' stores the total number of cards remaining in the stack.
'If the integer variable labeled 'true%' is equal to one, then
'the computer-controlled player makes a true-count conversion and
'the running count stored in memory-element one of the array
'labeled 'c' is converted into a true count. In any case, the
'BIGS908 software application adds the user-specify constant to
'the value stored in memory-element one of the array labeled 'c'.
'Doing so causes the value stored in memory-element one of the
'array labeled 'c' to equal the bet count.

'The value of the integer variable labeled 'index%' is set to the
'value of the bet count rounded off to the nearest integer plus
'three hundred. If the value of the integer variable labeled
''index%' is greater than six hundred, then the value of the
'integer variable labeled 'index%' is set to six hundred. If the
'value of the integer variable labeled 'index%' is less than
'zero, then the value of the integer variable labeled 'index%' is
'set to zero. The value of the integer variable labeled 'index%'
'represents the bet-count level plus three hundred. The range of
'possible values for the bet-count level is thereby limited to
'negative three hundred through positive three hundred.

'For each of these six hundred and one possible bet-count levels,
'the array labeled adc provides fifteen memory elements. The
'BIGS908 software application uses the second for-next loop to
'sample the exact-stack composition at the current-bet-count
'level. For each of the six hundred and one possible bet-count
'levels, the BIGS908 software application uses memory-elements
'zero through thirteen of the array labeled adc to store a
'summation of each sample of the exact number of each rank of
'card remaining in the stack. For each of the six hundred and one
'possible bet-count levels, the BIGS908 software application uses
'memory-element fourteen to store a summation of each sample of
'the exact number of cards remaining in the stack.  For each of
'the six hundred and one possible bet-count levels, the BIGS908
'software application uses memory-element fifteen of the array
'labeled adc to store the number of samples.

'c(1) = 0
'FOR x = 0 TO 13
'c(1) = c(1) - card(x) * cv(x): NEXT x
'IF true% = 1 THEN c(1) = c(1) * mc(14) / card(14)
'c(1) = c(1) + constant: index% = CINT(c(1)) + 300
'IF index% > 600 THEN index% = 600
'IF index% < 0 THEN index% = 0
'FOR x = 0 TO 14 STEP 1
'adc(x, index%) = adc(x, index%) + card(x)
'NEXT x: adc(15, index%) = adc(15, index%) + 1

'The BIGS908 software application takes a sample of the exact-
'stack composition and current-bet-count level every time a
'computer-controlled player must make a decision about how to
'play the player's initial hand. Therefore, if the user specifies
'six additional players, then the BIGS908 software application
'takes a sample of the exact-stack composition and current-bet-
'count level seven times per each round of play. If the user
'specified zero additional players, then the BIGS908 software
'application takes a sample of the exact-stack composition and
'current-bet-count level only one time per each round of play.
'The total number of samples taken by the BIGS908 software
'application during any given simulation is equal to the total
'number of samples per round of play multiplied by the number of
'rounds of play in that particular simulation.

'The BIGS908 software application sorts samples of the exact-
'stack composition by bet-count level. The BIGS908 software
'application adds each sample taken to a summation of all samples
'of the exact-stack composition at that particular bet-count
'level. As such, those bet-count levels that occur more
'frequently during the game simulation accumulate more samples of
'the exact-stack composition and those bet-count levels that
'occur less frequently during the game simulation accumulate less
'samples of the exact-stack composition.

'The average-stack composition at any given bet-count level is
'equal to the quotient of the sum of the exact-stack compositions
'divided by the number of samples.

'LVI. CONTENTS OF A TEXT FILE THAT IS NAMED USING THE AN 'I'
'CHARACTER AS THE FILE NAME SUFFIX

'The BIGS908 software application saves a meaningful selection of
'the text to a text file named with an 'i' character as the file
'name suffix. The meaningful selection of text consists of the
'text of the prompts for user input and the user responses that
'appeared in the application window while the BIGS908 software
'application performed its' functions. The user can open this
'file and view its' contents. The contents are intended to serve
'as a record giving the user a summary of the user responses to
'prompts for user input made by the BIGS908 software application.

'LVII. SIXTEEN COMBINATIONS OF OUTCOME OF GAME AND RESOLUTION OF
'GAME WAGER TRACKED IN THREE DIFFERENT WAYS.

'Each game has one of a set of possible outcomes consisting of no
'bust, player bust, dealer bust, and double bust, and one of a
'set of possible resolutions of the game wager consisting of win
'by the player, loss by the player, push, and tie. A tie could be
'either a player win, a player loss, or a push. Four possible
'outcomes of the game and four possible resolutions of the game
'wager yield sixteen combinations of outcome of game and
'resolution of game wager. The BIGS908 software application keeps
'track of these sixteen combinations of outcome of game and
'resolution of game wager in three different ways.

'The first way is by counting the number of hands. The BIGS908
'software application counts the number of hands by not taking
'into account any differences in the odds paid on each game
'wager, and not taking into account any differences in the size
'of each game wager.

'The second way is by counting the number of game wagers. The
'BIGS908 software application counts the number of game wagers by
'taking into account any differences in the odds paid on each
'game wager, and not taking into account any differences in the
'size of each game wager.

'The third way is by counting the number of credits. The BIGS908
'software application counts the number of credits by taking into
'account any differences in the odds paid on each game wager, and
'taking into account any differences in the size of each game
'wager.

'LVIII. CONTENTS OF A TEXT FILE THAT IS NAMED USING AN 'o'
'CHARACTER AS THE FILE NAME SUFFIX

'Every time a session ends, the BIGS908 software application
'displays a set of statistics in the application window and
'prints a larger set of statistics to a text file named using an
''o' character as the file name suffix.  The set of statistics
'contains data about the outcome of the last round of play in the
'session, and data about the combined outcomes of all rounds of
'play in the session. Six tables provide data about the three
'ways the BIGS908 software application keeps track of the sixteen
'combinations of outcome of game and resolution of game wager.
'The text file includes a table displaying the count values
'assigned to each of the various card ranks.  The text file
'includes other tables displaying the number of times that the
'dealer paid the player various bonus payouts.

'LIX. CONTENTS OF A TEXT FILE THAT IS NAMED USING A 'd'
'CHARACTER AS THE FILE NAME SUFFIX

'After the last session ends, the BIGS908 software application
'prints a set of statistics to a text file named with a  'd'
'character as the file name suffix. The set of statistics
'contains additional data about the outcome of each session, and
'data about the combined outcomes of all sessions in the
'simulation. The additional data about the outcome of each
'session includes data that is useful in evaluating user-defined
'card counting and betting strategies.

'Specifically the text file named using a 'd' character as the
'file name suffix contains tables ranking each session according
'to data about the size and duration of the initial drop in the
'number of credits in the computer-controlled player's bankroll
'that occurred. The text file also contains tables ranking each
'session according to data about the size of the largest drop
'from a new high that occurred and the size of the change in the
'bankroll at the end of each session.

'LX. CONTENTS OF A TEXT FILE THAT IS NAMED USING A 'p' CHARACTER
'AS THE FILE NAME SUFFIX

'If the user does add a rule to specify that the dealer pays the
'player bonuses for winning-player hands that make qualifying-
'five-card-poker hands, then the BIGS908 software application
'saves some additional files. During the entire simulation, the
'BIGS908 software application gathers data about the highest-
'ranking-five-card-poker hands made from those player hands that
'won the game. The BIGS908 software application sorts this data
'by category of five-card-poker hand, organizes this data into a
'table and prints the table to a text file named using a 'p'
'character as the file name suffix. For each of the ten-supported
'categories of five-card-poker hand, the table includes data
'about the size of the bonus payout, the number of highest-
'ranking-five-card-poker hands made by the player, the number of
'highest-ranking-five-card-poker hands made by the player that
'outrank the highest-ranking-five-card-poker hand made by the
'dealer, and the number of highest-ranking-five-card-poker hands
'made by the player that do not outrank the highest-ranking-five-
'card-poker hand made by the dealer.

'LXI. CONTENTS OF A DATA FILE THAT IS NAMED USING AN 'a' CHARACTER
'AS THE FILE NAME SUFFIX

'The BIGS908 software application saves a data file named with an
''a' character as the file name suffix. The file contains data
'about the user-defined set of game rules for an optional
'embodiment of the game of the present invention. The user can
'load the contents of this data file into program memory of the
'BIGS910 software application, and thereby communicate data about
'the subset of game rules required by the BIGS910 software
'application to perform its' functions. The user can load the
'contents of this data file into program memory of the BIGS912
'software application, and thereby communicate data about the
'subset of game rules required by the BIGS912 software
'application to perform its' functions. The user can load the
'contents of this data file into program memory of the BIGS914
'software application and thereby communicate data about the
'user-defined set of game rules.

'LXII. CONTENTS OF A DATA FILE THAT IS NAMED USING A 'k' CHARACTER
'AS THE FILE NAME SUFFIX

'The BIGS908 software application sorts data about the highest-
'ranking-five-card-poker hands made from those player hands that
'won the game by the ten-supported categories of five-card-poker
'hand and by the combination of card ranks assigned to the
'combination of cards removed from the stack and dealt face up to
'form the set of hands consisting of the player's initial hand
'and the dealer's initial hand. The BIGS908 software application
'saves this database to a file named using a 'k' character as the
'file name suffix. The BIGS907 software application uses this
'data to calculate the probability of the occurrence of five-
'card-poker hands of each of the ten-supported categories given
'the combination of card ranks assigned to the combination of
'cards removed from the stack and dealt face up to form the set
'of hands consisting of the player's initial hand and the
'dealer's initial hand.

'LXIII. CONTENTS OF A DATA FILE THAT IS NAMED USING A 'z'
'CHARACTER AS THE FILE NAME SUFFIX

'If the user does 'press 1 and enter to use on going simulation
'results to generate an E-Z-count strategy', then the BIGS908
'software application uses data type 'rec' to save the values
'stored in the memory elements of the array labeled 'dv' and the
'values stored in the member elements of the array labeled 'fv'
'to a data file. The BIGS908 software application names the data
'file using a 'z' character as the file name suffix. The values
'stored in the memory elements of the array labeled 'dv' and the
'values stored in the member elements of the array labeled 'fv'
'are the building blocks of the count values the E-Z-count
'strategy assigns to the various card ranks. Subsequently, the
'user can load this data file into the BIGS908 software
'application and program the computer-controlled player to count
'cards using the E-Z-count strategy contained therein during
'other game simulations.

'The user can also see a table display of the count values the E-
'Z-count strategy assigns to the various card ranks. The table is
'a part of the set of statistics printed at the end of each
'session to a text file named using an 'o' character as the file
'name suffix.  The table is also part of the set of statistics
'printed at the end of each game simulation to a text file named
'using a 'd' character as the file name suffix.

_TITLE "BIGS908  software application"
TYPE str
    description AS STRING * 80
END TYPE
TYPE short
    nor AS INTEGER
    fr AS INTEGER
    fl AS SINGLE
    sr AS INTEGER
    sl AS SINGLE
    tr AS INTEGER
    tl AS SINGLE
    rr AS INTEGER
    rl AS SINGLE
    vr AS INTEGER
    vl AS SINGLE
    xr AS INTEGER
    xl AS SINGLE
    nr AS INTEGER
    nl AS SINGLE
    er AS INTEGER
    el AS SINGLE
    nnr AS INTEGER
    nnl AS SINGLE
    lr AS INTEGER
    ll AS SINGLE
END TYPE
TYPE comp
    adc0 AS DOUBLE
    adc1 AS DOUBLE
    adc2 AS DOUBLE
    adc3 AS DOUBLE
    adc4 AS DOUBLE
    adc5 AS DOUBLE
    adc6 AS DOUBLE
    adc7 AS DOUBLE
    adc8 AS DOUBLE
    adc9 AS DOUBLE
    adc10 AS DOUBLE
    adc11 AS DOUBLE
    adc12 AS DOUBLE
    adc13 AS DOUBLE
    adc14 AS DOUBLE
    adc15 AS DOUBLE
    hmr AS LONG
    ap AS INTEGER
    description AS STRING * 80
END TYPE
TYPE rec
    dv0 AS DOUBLE
    dv1 AS DOUBLE
    dv2 AS DOUBLE
    dv3 AS DOUBLE
    dv4 AS DOUBLE
    dv5 AS DOUBLE
    dv6 AS DOUBLE
    dv7 AS DOUBLE
    dv8 AS DOUBLE
    dv9 AS DOUBLE
    dv10 AS DOUBLE
    dv11 AS DOUBLE
    dv12 AS DOUBLE
    dv13 AS DOUBLE
    fv0 AS DOUBLE
    fv1 AS DOUBLE
    fv2 AS DOUBLE
    fv3 AS DOUBLE
    fv4 AS DOUBLE
    fv5 AS DOUBLE
    fv6 AS DOUBLE
    fv7 AS DOUBLE
    fv8 AS DOUBLE
    fv9 AS DOUBLE
    fv10 AS DOUBLE
    fv11 AS DOUBLE
    fv12 AS DOUBLE
    fv13 AS DOUBLE
    description AS STRING * 80
END TYPE
TYPE bsrules
    c0 AS INTEGER
    c1 AS INTEGER
    c2 AS INTEGER
    c3 AS INTEGER
    c4 AS INTEGER
    c5 AS INTEGER
    c6 AS INTEGER
    c7 AS INTEGER
    c8 AS INTEGER
    c9 AS INTEGER
    cT AS INTEGER
    cJ AS INTEGER
    cQ AS INTEGER
    cK AS INTEGER
    jojo AS INTEGER
    jojopo AS SINGLE
    joanca AS INTEGER
    joancash AS INTEGER
    joancapo AS SINGLE
    jowi AS INTEGER
    d28p AS INTEGER
    bshw AS INTEGER
    dhf AS INTEGER
    j AS INTEGER
    dwt AS INTEGER
    dbc AS INTEGER
    hole AS INTEGER
    nchw AS INTEGER
    ls AS INTEGER
    early AS INTEGER
    splt AS INTEGER
    nsh AS INTEGER
    rsa AS INTEGER
    das AS INTEGER
    dh AS INTEGER
    ld AS INTEGER
    ins AS INTEGER
    bigslick AS SINGLE
    dsa AS INTEGER
    bssh AS INTEGER
    deck AS INTEGER
    shf AS INTEGER
    immed AS INTEGER
    pbd AS INTEGER
    b27po AS INTEGER
    ms999 AS SINGLE
    ss999 AS SINGLE
    sp999 AS SINGLE
    jp999 AS SINGLE
    po6c27 AS SINGLE
    po7c27 AS SINGLE
    po8c27 AS SINGLE
    po9c27 AS SINGLE
    ms89T AS SINGLE
    ss89T AS SINGLE
    sp89T AS SINGLE
    dd AS INTEGER
    dd3 AS INTEGER
    dd4 AS INTEGER
    dd5 AS INTEGER
    dd6 AS INTEGER
    dd7 AS INTEGER
    dd8 AS INTEGER
    description AS STRING * 80
END TYPE
TYPE bs
    far AS INTEGER
    sar AS INTEGER
    r AS INTEGER
    Hit AS SINGLE
END TYPE
TYPE ibase
    idat AS LONG
END TYPE
DIM wow AS str
DIM indice AS short
DIM idatabase AS ibase
DIM mdc AS comp
DIM sd AS bsrules
DIM num AS bs
DIM ez AS rec
DIM mc27po(17, 2)
DIM sample(1000) AS DOUBLE
DIM Hit(104, 104)
DIM sar(104, 104) AS INTEGER
DIM far(104, 104) AS INTEGER
DIM r(104, 104) AS INTEGER
DIM Hit1(104, 104)
DIM sar1(104, 104) AS INTEGER
DIM far1(104, 104) AS INTEGER
DIM r1(104, 104) AS INTEGER
DIM mc(21) AS INTEGER
DIM mv(5) AS INTEGER
DIM g(84) AS INTEGER
DIM adc(15, 600) AS DOUBLE
DIM ir(104, 104) AS short
DIM ifar(104, 104) AS short
DIM isar(104, 104) AS short

REM 486 is the default value set for maximum number of cards is
REM in the virtual stack. To accommodate more cards in the virtual
REM stack modify the source code by replacing the number 486 in
REM the DIM denom(486) and DIM suit(486) statements below
REM to the desired number of cards in the virtual stack.

DIM denom(486) AS INTEGER
DIM suit(486) AS INTEGER
DIM suitp(6) AS INTEGER
DIM suito(6) AS INTEGER
DIM iphr(104, 104, 11, 2) AS LONG
DIM psc(16, 27) AS INTEGER
DIM pscp(16, 27) AS INTEGER
DIM dcs(27) AS INTEGER
DIM dcsp(27) AS INTEGER
DIM pjoke(27) AS INTEGER
DIM c(1) AS DOUBLE
DIM h(84) AS INTEGER
DIM b(137) AS DOUBLE
DIM v(14) AS SINGLE
DIM cv(15) AS DOUBLE
DIM phc(16, 27) AS INTEGER
DIM phcat(16) AS INTEGER
DIM dd(3 TO 8) AS INTEGER
DIM dc(27) AS INTEGER
DIM dh(1) AS INTEGER
DIM card(16) AS INTEGER
DIM stack(486) AS INTEGER
DIM aj(27) AS INTEGER
DIM dv(14) AS DOUBLE
DIM ev(14) AS DOUBLE
DIM fv(14) AS DOUBLE
DIM gv(15) AS DOUBLE
DIM ap(6, 2) AS INTEGER
DIM hilo(27) AS INTEGER
DIM combo(792, 4) AS INTEGER
DIM score(792, 2) AS LONG
DIM phpo(10) AS SINGLE
DIM best(1) AS LONG
DIM flush(792) AS INTEGER
DIM str8(792) AS INTEGER
DIM match(792) AS LONG
DIM first(27) AS INTEGER
DIM phrank(19) AS LONG
DIM roc(27, 1) AS INTEGER
DIM ros(27, 1) AS INTEGER
DIM wc(792) AS INTEGER
DIM phr(11, 11) AS DOUBLE
DIM phcah(27) AS INTEGER
DIM pscah(27) AS INTEGER
DIM dcsah(27) AS INTEGER
DIM dcah(27) AS INTEGER
DIM order1(10000) AS INTEGER
DIM rank1(10000) AS INTEGER
DIM ld(10000) AS DOUBLE
DIM ptm(16) AS INTEGER
DIM id(10000) AS DOUBLE
DIM idr(10000) AS LONG
DIM ide(10000) AS DOUBLE
DIM idf(10000) AS LONG
GOTO 543
27 IF dace% <> 0 AND dh(1) < dhf% THEN
    IF taketurn% = 0 THEN autowin% = 0
    IF taketurn% <> 0 THEN
        autowin% = 1
        taketurn% = 0
    END IF
    x = hand%
    GOSUB 54
    q = c
    phc(0, hand%) = phc(0, hand%) + 1
    phc(hand%, phc(0, hand%)) = 0
    psc(hand%, phc(0, hand%)) = 2
    x = hand%
    GOSUB 54
    IF qfcphw% <> 1 THEN
        IF (phpo(c) + 1) / (phpo(q) + 1) > 3 THEN
            hithand% = 1
        END IF
    END IF
    IF phpo(c) > 0 AND phpo(q) = 0 THEN
        IF phc(hand%, 0) < h(r1(n, dn)) THEN
            hithand% = 1
        END IF
    END IF
    IF qfcphw% = 1 THEN
        IF c >= minrank% AND c <> 10 THEN
            IF q < minrank% OR q = 10 THEN
                hithand% = 1
            END IF
        END IF
    END IF
    c = 10: phc(0, hand%) = phc(0, hand%) - 1
    IF autowin% = 1 THEN taketurn% = 1
END IF
IF dace% = 0 AND dh(1) < j + 2 THEN
    IF taketurn% = 0 THEN autowin% = 0
    IF taketurn% <> 0 THEN
        autowin% = 1
        taketurn% = 0
    END IF
    x = hand%
    GOSUB 54
    q = c
    phc(0, hand%) = phc(0, hand%) + 1
    phc(hand%, phc(0, hand%)) = 0
    psc(hand%, phc(0, hand%)) = 2
    x = hand%
    GOSUB 54
    IF qfcphw% <> 1 THEN
        IF (phpo(c) + 1) / (phpo(q) + 1) > 3 THEN
            hithand% = 1
        END IF
    END IF
    IF phpo(c) > 0 AND phpo(q) = 0 THEN
        IF phc(hand%, 0) < h(r1(n, dn)) THEN
            hithand% = 1
        END IF
    END IF
    IF qfcphw% = 1 THEN
        IF c >= minrank% AND c <> 10 THEN
            IF q < minrank% OR q = 10 THEN
                hithand% = 1
            END IF
        END IF
    END IF
    c = 10: phc(0, hand%) = phc(0, hand%) - 1
    IF autowin% = 1 THEN taketurn% = 1
END IF
RETURN
36 IF dace% <> 0 AND dh(1) < dhf% THEN
    IF taketurn% = 0 THEN autowin% = 0
    IF taketurn% <> 0 THEN
        autowin% = 1
        taketurn% = 0
    END IF
    x = hand%
    GOSUB 54
    q = c
    phc(0, hand%) = phc(0, hand%) + 1
    phc(hand%, phc(0, hand%)) = 0
    psc(hand%, phc(0, hand%)) = 2
    x = hand%
    GOSUB 54
    IF qfcphw% <> 1 THEN
        IF (phpo(c) + 1) / (phpo(q) + 1) + 27 - phc(hand%, 0) > 8 THEN
            hithand% = 1
        END IF
    END IF
    IF phpo(c) > 0 AND phpo(q) = 0 THEN
        IF phc(hand%, 0) < g(r1(n, dn)) THEN
            hithand% = 1
        END IF
    END IF
    c = 10
    phc(0, hand%) = phc(0, hand%) - 1
    IF autowin% = 1 THEN taketurn% = 1
END IF
IF dace% = 0 AND dh(1) < j + 2 THEN
    IF taketurn% = 0 THEN autowin% = 0
    IF taketurn% <> 0 THEN
        autowin% = 1
        taketurn% = 0
    END IF
    x = hand%
    GOSUB 54
    q = c
    IF q = 10 THEN q = 0
    phc(0, hand%) = phc(0, hand%) + 1
    phc(hand%, phc(0, hand%)) = 0
    psc(hand%, phc(0, hand%)) = 2
    x = hand%
    GOSUB 54
    IF c = 10 THEN c = 0
    IF qfcphw% <> 1 THEN
        IF (phpo(c) + 1) / (phpo(q) + 1) + 27 - phc(hand%, 0) > 8 THEN
            hithand% = 1
        END IF
    END IF
    IF phpo(c) > 0 AND phpo(q) = 0 THEN
        IF phc(hand%, 0) < g(r1(n, dn)) THEN
            hithand% = 1
        END IF
    END IF
    c = 10
    phc(0, hand%) = phc(0, hand%) - 1
    IF autowin% = 1 THEN taketurn% = 1
END IF
RETURN
54 REM This subroutine determines if the player's winning hand also
REM made a qualifying five card poker hand. IF the player's hand
REM is made up of five or more cards the program reorders the cards
REM from highest denomination to lowest denomination.
FOR p = 0 TO 1
    IF pbonus% <> 1 THEN GOTO 63
    IF only27% = 1 THEN
        IF p = 0 AND dh(1) <> 27 THEN
            p = 1
            d = 10
            best(0) = 0
        END IF
    END IF
    IF onlylessthan28% = 1 THEN
        IF p = 0 AND dh(1) > 27 THEN
            p = 1
            d = 10
            best(0) = 0
        END IF
    END IF
    IF dc(0) < 5 AND p = 0 THEN
        p = 1
        d = 10
        best(0) = 0
        IF x = 1 THEN
            IF taketurn% = 2 THEN phr(10, 3) = phr(10, 3) + 1
        END IF
    END IF
    IF only27% = 1 THEN
        IF p = 1 AND phc(x, 0) <> 27 THEN
            c = 10
            best(1) = 0
            GOTO 63
        END IF
    END IF
    IF onlylessthan28% THEN
        IF p = 1 AND phc(x, 0) > 27 THEN
            c = 10
            best(1) = 0
            GOTO 63
        END IF
    END IF
    IF phc(0, x) < 5 THEN
        best(1) = 0
        IF taketurn% = 0 THEN
            c = 10
            GOTO 63
        END IF
        IF taketurn% = 1 THEN
            phr(10, 2) = phr(10, 2) + 1
            c = 10
            GOTO 63
        END IF
    END IF
    IF phc(0, x) < 5 AND p = 1 THEN
        best(1) = 0
        IF taketurn% = 2 THEN
            c = 10
            phr(10, 4) = phr(10, 4) + 1
            GOTO 63
        END IF
    END IF
    IF p = 1 AND taketurn% = 3 THEN
        d = FIX((best(0) / 1000000))
        d = phrank(10 + d)
        GOTO 63
    END IF
    ERASE hilo: ERASE roc: ERASE ros: ERASE score
    ERASE wc: ERASE flush: ERASE str8: ERASE match
    IF x > 1 THEN p = 1
    IF p = 0 THEN
        FOR y = 1 TO dc(0)
            dcah(y) = dc(y): dcsah(y) = dcs(y)
            IF dcah(y) = 1 THEN dcah(y) = 14
        NEXT y
        FOR w = 1 TO dc(0)
            FOR y = dc(0) TO 1 STEP -1
                IF (roc(w, 0) <= dc(y) AND hilo(y) <> 1) THEN
                    roc(w, 0) = dc(y)
                    ros(w, 0) = dcs(y)
                    roc(0, 0) = dc(0)
                    lo% = y
                END IF
            NEXT y
            hilo(lo%) = 1
        NEXT w
        ERASE hilo
        FOR w = 1 TO dc(0)
            FOR y = dc(0) TO 1 STEP -1
                IF (roc(w, 1) <= dcah(y) AND hilo(y) <> 1) THEN
                    roc(w, 1) = dcah(y)
                    ros(w, 1) = dcsah(y)
                    roc(0, 1) = dc(0)
                    hi% = y
                END IF
            NEXT y
            hilo(hi%) = 1
        NEXT w
    END IF
    IF p = 1 THEN
        FOR y = 1 TO phc(0, x)
            phcah(y) = phc(x, y): pscah(y) = psc(x, y)
            IF phcah(y) = 1 THEN phcah(y) = 14
        NEXT y
        FOR w = 1 TO phc(0, x)
            FOR y = phc(0, x) TO 1 STEP -1
                IF (roc(w, 0) <= phc(x, y) AND hilo(y) <> 1) THEN
                    roc(w, 0) = phc(x, y)
                    ros(w, 0) = psc(x, y)
                    roc(0, 0) = phc(0, x)
                    lo% = y
                END IF
            NEXT y
            hilo(lo%) = 1
        NEXT w
        ERASE hilo
        FOR w = 1 TO phc(0, x)
            FOR y = phc(0, x) TO 1 STEP -1
                IF (roc(w, 1) <= phcah(y) AND hilo(y) <> 1) THEN
                    roc(w, 1) = phcah(y)
                    ros(w, 1) = pscah(y)
                    roc(0, 1) = phc(0, x)
                    hi% = y
                END IF
            NEXT y
            hilo(hi%) = 1
        NEXT w
    END IF
    REM find number of wild cards
    FOR w = 1 TO 792
        FOR y = 1 TO roc(0, 0)
            FOR z = 0 TO 4
                IF y = combo(w, z) THEN
                    IF roc(y, 0) = 0 THEN
                        wc(w) = wc(w) + 1
                    END IF
                END IF
            NEXT z
        NEXT y
        IF w = first(roc(0, 0)) THEN w = 792
    NEXT w
    IF wildcardrules% = 0 THEN GOSUB 108
    IF wildcardrules% = 1 THEN GOSUB 117
    REM find flush ace low
    FOR w = 1 TO 792
        FOR y = 1 TO roc(0, 0)
            FOR u = 0 TO 4
                IF (y = combo(w, u) AND roc(y, 0) <> 0) THEN
                    hi% = 0
                    FOR z = 1 TO roc(0, 0)
                        IF roc(z, 0) <> 0 THEN
                            FOR v = 0 TO 4
                                IF z = combo(w, v) THEN
                                    IF ros(y, 0) = ros(z, 0) THEN
                                        hi% = hi% + 1
                                    END IF
                                END IF
                            NEXT v
                        END IF
                    NEXT z
                END IF
            NEXT u
            IF hi% > flush(w) THEN flush(w) = hi%
        NEXT y
        IF flush(w) + wc(w) = 5 THEN
            IF wc(w) = 0 THEN
                score(w, 0) = phrank(5) + roc(combo(w, 0), 0) * 50625
                score(w, 0) = score(w, 0) + roc(combo(w, 1), 0) * 3375
                score(w, 0) = score(w, 0) + roc(combo(w, 2), 0) * 225
                score(w, 0) = score(w, 0) + roc(combo(w, 3), 0) * 15
                score(w, 0) = score(w, 0) + roc(combo(w, 4), 0)
            END IF
            IF wc(w) = 1 THEN
                score(w, 0) = phrank(5) + 14 * 50625
                score(w, 0) = score(w, 0) + roc(combo(w, 0), 0) * 3375
                score(w, 0) = score(w, 0) + roc(combo(w, 1), 0) * 225
                score(w, 0) = score(w, 0) + roc(combo(w, 2), 0) * 15
                score(w, 0) = score(w, 0) + roc(combo(w, 3), 0)
            END IF
            IF wc(w) = 2 THEN
                score(w, 0) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 0) = score(w, 0) + roc(combo(w, 0), 0) * 225
                score(w, 0) = score(w, 0) + roc(combo(w, 1), 0) * 15
                score(w, 0) = score(w, 0) + roc(combo(w, 2), 0)
            END IF
            IF wc(w) = 3 THEN
                score(w, 0) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 0) = score(w, 0) + 14 * 225
                score(w, 0) = score(w, 0) + roc(combo(w, 0), 0) * 15
                score(w, 0) = score(w, 0) + roc(combo(w, 1), 0)
            END IF
            IF wc(w) = 4 THEN
                score(w, 0) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 0) = score(w, 0) + 14 * 225 + 14 * 15
                score(w, 0) = score(w, 0) + roc(combo(w, 0), 0)
            END IF
            IF wc(w) = 5 THEN
                score(w, 0) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 0) = score(w, 0) + 14 * 225 + 14 * 15 + 14
            END IF
        END IF
        IF w = first(roc(0, 0)) THEN w = 792
    NEXT w
    ERASE flush
    REM find flush ace high
    FOR w = 1 TO 792
        FOR y = 1 TO roc(0, 1)
            FOR u = 0 TO 4
                IF (y = combo(w, u) AND roc(y, 1) <> 0) THEN
                    hi% = 0
                    FOR z = 1 TO roc(0, 1)
                        IF roc(z, 1) <> 0 THEN
                            FOR v = 0 TO 4
                                IF z = combo(w, v) THEN
                                    IF ros(y, 1) = ros(z, 1) THEN
                                        hi% = hi% + 1
                                    END IF
                                END IF
                            NEXT v
                        END IF
                    NEXT z
                END IF
            NEXT u
            IF hi% > flush(w) THEN flush(w) = hi%
        NEXT y
        IF flush(w) + wc(w) = 5 THEN
            IF wc(w) = 0 THEN
                score(w, 1) = phrank(5) + roc(combo(w, 0), 1) * 50625
                score(w, 1) = score(w, 1) + roc(combo(w, 1), 1) * 3375
                score(w, 1) = score(w, 1) + roc(combo(w, 2), 1) * 225
                score(w, 1) = score(w, 1) + roc(combo(w, 3), 1) * 15
                score(w, 1) = score(w, 1) + roc(combo(w, 4), 1)
            END IF
            IF wc(w) = 1 THEN
                score(w, 1) = phrank(5) + 14 * 50625
                score(w, 1) = score(w, 1) + roc(combo(w, 0), 1) * 3375
                score(w, 1) = score(w, 1) + roc(combo(w, 1), 1) * 225
                score(w, 1) = score(w, 1) + roc(combo(w, 2), 1) * 15
                score(w, 1) = score(w, 1) + roc(combo(w, 3), 1)
            END IF
            IF wc(w) = 2 THEN
                score(w, 1) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 1) = score(w, 1) + roc(combo(w, 0), 1) * 225
                score(w, 1) = score(w, 1) + roc(combo(w, 1), 1) * 15
                score(w, 1) = score(w, 1) + roc(combo(w, 2), 1)
            END IF
            IF wc(w) = 3 THEN
                score(w, 1) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 1) = score(w, 1) + 14 * 225
                score(w, 1) = score(w, 1) + roc(combo(w, 0), 1) * 15
                score(w, 1) = score(w, 1) + roc(combo(w, 1), 1)
            END IF
            IF wc(w) = 4 THEN
                score(w, 1) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 1) = score(w, 1) + 14 * 225 + 14 * 15
                score(w, 1) = score(w, 1) + roc(combo(w, 0), 1)
            END IF
            IF wc(w) = 5 THEN
                score(w, 1) = phrank(5) + 14 * 50625 + 14 * 3375
                score(w, 1) = score(w, 1) + 14 * 225 + 14 * 15 + 14
            END IF
        END IF
        IF w = first(roc(0, 1)) THEN w = 792
    NEXT w
    REM find straights ace low
    FOR w = 1 TO 792
        FOR u = 1 TO 5
        hilo(u) = 0: NEXT u
        str8(w) = 0
        FOR y = 1 TO roc(0, 0)
            FOR z = 0 TO 4
                IF (y = combo(w, z) AND roc(y, 0) <> 0) THEN
                    FOR v = 0 TO 4
                        IF roc(y, 0) = 5 - v AND hilo(5 - v) <> 1 THEN
                            hilo(5 - v) = 1
                            str8(w) = str8(w) + 1
                            lo% = roc(y, 0)
                        END IF
                    NEXT v
                END IF
            NEXT z
        NEXT y
        IF str8(w) + wc(w) = 5 THEN
            IF score(w, 0) > phrank(5) THEN
                score(w, 0) = phrank(9) + lo% + 4
                IF score(w, 0) > phrank(9) + 14 THEN
                    score(w, 0) = phrank(9) + 14
                END IF
            END IF
            IF score(w, 0) < phrank(5) THEN
                score(w, 0) = phrank(4) + lo% + 4
                IF score(w, 0) > phrank(4) + 14 THEN
                    score(w, 0) = phrank(4) + 14
                END IF
            END IF
        END IF
        IF w = first(roc(0, 0)) THEN w = 792
    NEXT w
    REM find straights ace high
    FOR w = 1 TO 792
        IF match(w) = 0 THEN
            FOR t = 14 TO 6 STEP -1
                FOR u = 0 TO 4
                hilo(t - u) = 0: NEXT u
                str8(w) = 0
                FOR y = 1 TO roc(0, 1)
                    FOR z = 0 TO 4
                        IF (y = combo(w, z) AND roc(y, 1) <> 0) THEN
                            FOR v = 0 TO 4
                                IF roc(y, 1) = t - v AND hilo(t - v) <> 1 THEN
                                    hilo(t - v) = 1
                                    str8(w) = str8(w) + 1
                                    lo% = roc(y, 1)
                                END IF
                            NEXT v
                        END IF
                    NEXT z
                NEXT y
                IF str8(w) + wc(w) = 5 THEN
                    IF score(w, 1) > phrank(5) THEN
                        score(w, 1) = phrank(9) + lo% + 4
                        IF score(w, 1) > phrank(9) + 14 THEN
                            score(w, 1) = phrank(9) + 14
                        END IF
                    END IF
                    IF score(w, 1) < phrank(5) THEN
                        score(w, 1) = phrank(4) + lo% + 4
                        IF score(w, 1) > phrank(4) + 14 THEN
                            score(w, 1) = phrank(4) + 14
                        END IF
                    END IF
                END IF
            NEXT t
        END IF
        IF w = first(roc(0, 1)) THEN w = 792
    NEXT w
    REM find best poker hand score
    best(p) = 0
    FOR w = 1 TO 792
        FOR y = 0 TO 2
            IF best(p) < score(w, y) THEN best(p) = score(w, y)
        NEXT y
        IF w = first(roc(0, 0)) THEN w = 792
    NEXT w
    IF p = 0 THEN
        d = FIX((best(0) / 1000000))
        d = phrank(10 + d)
    END IF
    IF p = 1 THEN
        c = FIX((best(1) / 1000000))
        c = phrank(10 + c)
    END IF
    IF taketurn% = 2 THEN
        IF p = 0 THEN
            phr(d, 3) = phr(d, 3) + 1
        END IF
        IF p = 1 THEN
            phr(c, 4) = phr(c, 4) + 1
        END IF
    END IF
NEXT p
IF taketurn% = 1 THEN
    IF best(1) > best(0) THEN
        phr(c, 1) = phr(c, 1) + 1
        iphr(n%, dn, c, 1) = iphr(n%, dn, c, 1) + 1
        IF ptm(c) <> 1 AND wager% = 0 THEN
            v(x) = v(x) + v(x) * phpo(c)
        END IF
    END IF
    IF best(1) < best(0) + 1 THEN
        phr(c, 0) = phr(c, 0) + 1
        iphr(n%, dn, c, 0) = iphr(n%, dn, c, 0) + 1
    END IF
    phr(c, 2) = phr(c, 2) + 1
    iphr(n%, dn, c, 2) = iphr(n%, dn, c, 2) + 1
    IF best(1) < best(0) + 1 THEN
        IF pcomp% = 1 THEN
            c = 10
        END IF
        IF pcomp% <> 1 THEN
            IF ptm(c) <> 1 AND wager% = 0 THEN
                v(x) = v(x) + v(x) * phpo(c)
            END IF
        END IF
    END IF
END IF
63 RETURN
108 REM ("Bug rule") enables the holder of a winning hand that
REM consists of at least five playing cards to use each joker
REM included in the winning hand to perform a function selected
REM from a group consisting of represent an ace, complete a straight,
REM complete a flush, and complete a straight flush.
REM find 5 of a kind, 4 of kind, full house,
REM three of kind, two pair, one pair
FOR w = 1 TO 792
    FOR y = 1 TO roc(0, 1)
        FOR z = 0 TO 4
            IF (y = combo(w, z) AND roc(y, 0) <> 0) THEN
                FOR u = 0 TO roc(0, 1)
                    IF u <> y AND roc(u, 0) <> 0 THEN
                        FOR v = 0 TO 4
                            IF (u = combo(w, v) AND roc(y, 1) = roc(u, 1)) THEN
                                match(w) = match(w) + 1 * 10 ^ (4 - z)
                            END IF
                        NEXT v
                    END IF
                NEXT u
            END IF
        NEXT z
    NEXT y
    IF match(w) = 44444 THEN
        score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 33330 THEN
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(8) + 14
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + 14
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 3333 THEN
        score(w, 2) = phrank(7) + roc(combo(w, 4), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 22211 THEN
        score(w, 2) = phrank(6) + roc(combo(w, 0), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
    END IF
    IF match(w) = 11222 THEN
        score(w, 2) = phrank(6) + roc(combo(w, 4), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 22200 THEN
        IF wc(w) = 2 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(6) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + 14
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + 14 * 15 + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 2220 THEN
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(6) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + 14
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + 14 * 15 + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 222 THEN
        score(w, 2) = phrank(3) + roc(combo(w, 4), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
    END IF
    IF match(w) = 11110 THEN
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(6) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + 14
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 11011 THEN
        score(w, 2) = phrank(2) + roc(combo(w, 0), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
    END IF
    IF match(w) = 1111 THEN
        score(w, 2) = phrank(2) + roc(combo(w, 1), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 11000 THEN
        IF wc(w) = 3 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 3 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(6) + 14 * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 0), 1) * 3375
            score(w, 2) = score(w, 2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 0), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 1100 THEN
        IF wc(w) = 2 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(6) + 14 * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 1), 1) * 3375
            score(w, 2) = score(w, 2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 1), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 110 THEN
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 2), 1) * 3375
            score(w, 2) = score(w, 2) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 2), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 11 THEN
        score(w, 2) = phrank(1) + roc(combo(w, 3), 1) * 3375
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
    END IF
    IF match(w) = 0 THEN
        IF wc(w) = 5 THEN
            score(w, 2) = phrank(8) + 14
        END IF
        IF wc(w) = 4 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(8) + 14
        END IF
        IF wc(w) = 3 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(7) + 14 * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(3) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) = 14 THEN
            score(w, 2) = phrank(1) + 14 * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 4 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(7) + 14 * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 3 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(3) + 14 * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 2 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = phrank(1) + 14 + 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 AND roc(combo(w, 0), 1) <> 14 THEN
            score(w, 2) = 14 * 50625 + roc(combo(w, 0), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = roc(combo(w, 0), 1) * 50625
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF w = first(roc(0, 1)) THEN w = 792
NEXT w
RETURN
117 REM ("fully wild rule") enables the holder of a winning hand that
REM consists of at least five playing cards to use each joker
REM included in the winning hand to represent the rank and suit
REM of any other card in the deck.
REM find 5 of a kind, 4 of kind, full house,
REM three of kind, two pair, one pair
FOR w = 1 TO 792
    FOR y = 1 TO roc(0, 1)
        FOR z = 0 TO 4
            IF (y = combo(w, z) AND roc(y, 0) <> 0) THEN
                FOR u = 0 TO roc(0, 1)
                    IF u <> y AND roc(u, 0) <> 0 THEN
                        FOR v = 0 TO 4
                            IF (u = combo(w, v) AND roc(y, 1) = roc(u, 1)) THEN
                                match(w) = match(w) + 1 * 10 ^ (4 - z)
                            END IF
                        NEXT v
                    END IF
                NEXT u
            END IF
        NEXT z
    NEXT y
    IF match(w) = 44444 THEN
        score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 33330 THEN
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 3333 THEN
        score(w, 2) = phrank(7) + roc(combo(w, 4), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 22211 THEN
        score(w, 2) = phrank(6) + roc(combo(w, 0), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
    END IF
    IF match(w) = 11222 THEN
        score(w, 2) = phrank(6) + roc(combo(w, 4), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 22200 THEN
        IF wc(w) = 2 THEN
            score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 2220 THEN
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 222 THEN
        score(w, 2) = phrank(3) + roc(combo(w, 4), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
    END IF
    IF match(w) = 11110 THEN
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(6) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 11011 THEN
        score(w, 2) = phrank(2) + roc(combo(w, 0), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
    END IF
    IF match(w) = 1111 THEN
        score(w, 2) = phrank(2) + roc(combo(w, 1), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
    END IF
    IF match(w) = 11000 THEN
        IF wc(w) = 3 THEN
            score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 2 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 0), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 1100 THEN
        IF wc(w) = 2 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1)
        END IF
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 1), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 110 THEN
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 2), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 2), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF match(w) = 11 THEN
        score(w, 2) = phrank(1) + roc(combo(w, 3), 1) * 3375
        score(w, 2) = score(w, 2) + roc(combo(w, 0), 1) * 225
        score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
        score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
    END IF
    IF match(w) = 0 THEN
        IF wc(w) = 5 THEN score(w, 2) = phrank(8) + 14
        IF wc(w) = 4 THEN score(w, 2) = phrank(8) + roc(combo(w, 0), 1)
        IF wc(w) = 3 THEN
            score(w, 2) = phrank(7) + roc(combo(w, 0), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1)
        END IF
        IF wc(w) = 2 THEN
            score(w, 2) = phrank(3) + roc(combo(w, 0), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1)
        END IF
        IF wc(w) = 1 THEN
            score(w, 2) = phrank(1) + roc(combo(w, 0), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1)
        END IF
        IF wc(w) = 0 THEN
            score(w, 2) = roc(combo(w, 0), 1) * 50625
            score(w, 2) = score(w, 2) + roc(combo(w, 1), 1) * 3375
            score(w, 2) = score(w, 2) + roc(combo(w, 2), 1) * 225
            score(w, 2) = score(w, 2) + roc(combo(w, 3), 1) * 15
            score(w, 2) = score(w, 2) + roc(combo(w, 4), 1)
        END IF
    END IF
    IF w = first(roc(0, 1)) THEN w = 792
NEXT w
RETURN
567 c(1) = 0: FOR cx = 0 TO 13
c(1) = c(1) - cv(cx) * card(cx): NEXT cx
IF true% = 1 THEN c(1) = c(1) * mc(14) / card(14)
c(1) = CINT(c(1) + constant)
IF ir(n, dn).ll >= c(1) THEN r(n, dn) = ir(n, dn).lr
IF ir(n, dn).nnl >= c(1) THEN r(n, dn) = ir(n, dn).nnr
IF ir(n, dn).el >= c(1) THEN r(n, dn) = ir(n, dn).er
IF ir(n, dn).nl >= c(1) THEN r(n, dn) = ir(n, dn).nr
IF ir(n, dn).xl >= c(1) THEN r(n, dn) = ir(n, dn).xr
IF ir(n, dn).vl >= c(1) THEN r(n, dn) = ir(n, dn).vr
IF ir(n, dn).rl >= c(1) THEN r(n, dn) = ir(n, dn).rr
IF ir(n, dn).tl >= c(1) THEN r(n, dn) = ir(n, dn).tr
IF ir(n, dn).sl >= c(1) THEN r(n, dn) = ir(n, dn).sr
IF ir(n, dn).fl >= c(1) THEN r(n, dn) = ir(n, dn).fr
IF ifar(n, dn).ll >= c(1) THEN far(n, dn) = ifar(n, dn).lr
IF ifar(n, dn).nnl >= c(1) THEN far(n, dn) = ifar(n, dn).nnr
IF ifar(n, dn).el >= c(1) THEN far(n, dn) = ifar(n, dn).er
IF ifar(n, dn).nl >= c(1) THEN far(n, dn) = ifar(n, dn).nr
IF ifar(n, dn).xl >= c(1) THEN far(n, dn) = ifar(n, dn).xr
IF ifar(n, dn).vl >= c(1) THEN far(n, dn) = ifar(n, dn).vr
IF ifar(n, dn).rl >= c(1) THEN far(n, dn) = ifar(n, dn).rr
IF ifar(n, dn).tl >= c(1) THEN far(n, dn) = ifar(n, dn).tr
IF ifar(n, dn).sl >= c(1) THEN far(n, dn) = ifar(n, dn).sr
IF ifar(n, dn).fl >= c(1) THEN far(n, dn) = ifar(n, dn).fr
IF isar(n, dn).ll >= c(1) THEN sar(n, dn) = isar(n, dn).lr
IF isar(n, dn).nnl >= c(1) THEN sar(n, dn) = isar(n, dn).nnr
IF isar(n, dn).el >= c(1) THEN sar(n, dn) = isar(n, dn).er
IF isar(n, dn).nl >= c(1) THEN sar(n, dn) = isar(n, dn).nr
IF isar(n, dn).xl >= c(1) THEN sar(n, dn) = isar(n, dn).xr
IF isar(n, dn).vl >= c(1) THEN sar(n, dn) = isar(n, dn).vr
IF isar(n, dn).rl >= c(1) THEN sar(n, dn) = isar(n, dn).rr
IF isar(n, dn).tl >= c(1) THEN sar(n, dn) = isar(n, dn).tr
IF isar(n, dn).sl >= c(1) THEN sar(n, dn) = isar(n, dn).sr
IF isar(n, dn).fl >= c(1) THEN sar(n, dn) = isar(n, dn).fr
RETURN
987 c1% = FIX(RND * card(14))
c% = stack(c1%)
card(14) = card(14) - 1
card(denom(c%)) = card(denom(c%)) - 1
stack(c1%) = stack(card(14))
stack(card(14)) = c%
RETURN
707 FOR x = 0 TO 14
    card(x) = deck% * mc(x)
NEXT x
IF rps% <> 0 THEN prn&& = rn&&
323 cv(14) = 0: ev(14) = 0: gv(15) = 0
FOR x = 0 TO 13
    IF fv(x) <> 0 AND ezc% = 1 THEN
        cv(x) = dv(x) / fv(x) * 100
    END IF
    cv(14) = cv(14) - cv(x) * card(x)
    ev(14) = ev(14) + cv(x) * mc(x) / 4
    gv(15) = gv(15) + ABS(cv(x)) * mc(x) / 4
    gv(x) = cv(x)
NEXT x
IF bal% = 1 THEN
    IF balance% = 1 THEN
        cv(14) = 0
        FOR x = 0 TO 13
            gv(x) = cv(x) - ev(14) * mc(x) / mc(14)
            cv(14) = cv(14) - gv(x) * card(x)
        NEXT x
    END IF
    IF balance% = 2 AND gv(15) <> 0 THEN
        cv(14) = 0
        FOR x = 0 TO 13
            IF cv(x) >= 0 THEN gv(x) = cv(x) * gv(15) / (gv(15) + ev(14))
            IF cv(x) < 0 THEN gv(x) = cv(x) * gv(15) / (gv(15) - ev(14))
            cv(14) = cv(14) - gv(x) * card(x)
        NEXT x
    END IF
END IF
standin = cv(14)
IF true% = 1 THEN
    standin = standin / card(14) * mc(14)
END IF
b(7) = standin + constant
IF truequit% <> 1 THEN
    IF quit > b(7) THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF truequit% = 1 THEN
    IF quit * card(14) / (mc(14) * deck%) > b(7) THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF truereshf% <> 1 THEN
    IF reshf < b(7) THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF truereshf% = 1 THEN
    IF reshf * card(14) / (mc(14) * deck%) < b(7) THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF rps% = 0 THEN
    IF card(14) < shf * deck% * mc(14) / 100 THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF expo% = 1 THEN b(9) = multiplier * factor ^ b(7)
IF multi% = 1 THEN b(9) = factor * b(7)
IF b(9) < 1000000000 THEN bet& = INT(b(9)) ELSE bet& = 1000000000
bet& = INT(bet& / mult%) * mult%
IF pbs% = 1 THEN bet& = INT(bet& * b(37) / pbs)
IF propor% = 1 THEN bet& = INT(bet& * b(2) / pbs)
IF bet& < mini& THEN bet& = mini&
IF bet& > maxi& THEN bet& = maxi&
IF limpoi% = 1 THEN
    IF bet& < sml& THEN bet& = sml&
    IF bet& > lrg& THEN bet& = lrg&
END IF
IF limper% = 1 THEN
    IF bet& < lobet * b(2) / 100 THEN
        bet& = INT(lobet * b(2) / 100)
    END IF
    IF bet& > hibet * b(2) / 100 THEN
        bet& = INT(hibet * b(2) / 100)
    END IF
END IF
b(21) = bet&: b(28) = b(28) + card(14): b(38) = b(38) + 1
FOR x = 1 TO 2
    FOR y = 0 TO ap
        GOSUB 987
        ap(y, x) = c%
    NEXT y
NEXT x
GOSUB 987
dc(1) = denom(c%)
dcs(1) = suit(c%)
dc(0) = 1
GOSUB 987
dc(2) = denom(c%)
dcs(2) = suit(c%)
dc(0) = 2
IF bet& = 0 THEN GOTO 323
b(8) = b(8) + b(7)
b(10) = b(10) + b(7) * b(21)
b(11) = b(11) + b(21)
taketurn% = 0
dace% = (dc(1) - 1) * (dc(2) - 1)
dh(1) = dc(1) + dc(2)
FOR z% = 0 TO ap
    phc(1, 1) = denom(ap(z%, 1))
    phc(1, 2) = denom(ap(z%, 2))
    psc(1, 1) = suit(ap(z%, 1))
    psc(1, 2) = suit(ap(z%, 2))
    IF phc(1, 1) <= phc(1, 2) THEN
        n = phc(1, 1) / 2 * (27 - phc(1, 1)) + phc(1, 2)
    END IF
    IF phc(1, 2) < phc(1, 1) THEN
        n = phc(1, 2) / 2 * (27 - phc(1, 2)) + phc(1, 1)
    END IF
    IF dc(1) <= dc(2) THEN
        dn = dc(1) / 2 * (27 - dc(1)) + dc(2)
    END IF
    IF dc(2) < dc(1) THEN
        dn = dc(2) / 2 * (27 - dc(2)) + dc(1)
    END IF
    c(1) = 0
    REM here the BIGS918 application is setting
    REM the value for the bet count equal to zero.
    FOR x = 0 TO 13
    c(1) = c(1) - card(x) * gv(x): NEXT x
    IF true% = 1 THEN c(1) = c(1) * mc(14) / card(14)
    c(1) = c(1) + constant
    index% = CINT(c(1)) + 300
    IF index% > 600 THEN index% = 600
    IF index% < 0 THEN index% = 0
    FOR x = 0 TO 14 STEP 1
        adc(x, index%) = adc(x, index%) + card(x)
    NEXT x: adc(15, index%) = adc(15, index%) + 1
    IF z% = ap THEN
        n% = n: b(5) = Hit(n, dn)
        b(4) = b(4) + b(5)
        b(6) = b(4) / (rn&& + 1)
        iphr(n%, dn, 11, 2) = iphr(n%, dn, 11, 2) + 1
        pc1% = phc(1, 1)
        pc2% = phc(1, 2)
        ps1% = psc(1, 1)
        ps2% = psc(1, 2)
        d = 10
    END IF
    phc(0, 0) = 1
    phc(0, 1) = 2
    hand% = 1
    phcat(hand%) = 10
    ace% = (phc(1, 1) - 1) * (phc(1, 2) - 1)
    phc(1, 0) = phc(1, 1) + phc(1, 2)
    v(1) = 2
    IF mpvi% = 1 THEN GOSUB 567
    IF jowi% = 1 THEN pjoke(1) = phc(1, 1) * phc(1, 2)
    IF ace% = 0 THEN phc(1, 0) = phc(1, 0) + 13
    IF n < 14 THEN
        IF joanca% = 1 OR jo27% = 1 THEN
            phc(1, 0) = 27
        END IF
    END IF
    IF n = 0 AND jojo% = 1 THEN
        phc(1, 0) = 27
        GOTO 7
    END IF
    IF dn = 0 AND jojo% = 1 THEN GOTO 7
    IF n = 26 AND bshw% = 1 THEN
        GOTO 7
    END IF
    IF dn = 26 AND bshw% = 1 THEN GOTO 7
    IF n < 14 AND joanca% = 1 THEN GOTO 7
    IF dn < 14 AND joanca% = 1 THEN GOTO 7
    IF n < 14 AND jo27% = 1 THEN
        taketurn% = 1
        GOTO 7
    END IF
    IF (r(n, dn) = 83 AND ls% = 1) THEN
        cons&& = cons&& + 1
        v(1) = 1
        GOTO 7
    END IF
    IF ace% = 0 THEN phc(1, 0) = phc(1, 0) - 13
    1 DO WHILE rsa% > phc(0, 0) AND ace% = 0 AND r(n, dn) = 82
        cons&& = cons&& + 1
        phc(0, 0) = phc(0, 0) + 1
        phc(phc(0, 0), 1) = phc(hand%, 2)
        psc(phc(0, 0), 1) = psc(hand%, 2)
        IF jowi% = 1 THEN
            pjoke(phc(0, 0)) = phc(hand%, 2)
        END IF
        GOSUB 987
        phc(hand%, 2) = denom(c%)
        psc(hand%, 2) = suit(c%)
        phc(hand%, 0) = phc(hand%, 1) + phc(hand%, 2)
        ace% = (phc(hand%, 1) - 1) * (phc(hand%, 2) - 1)
        IF phc(hand%, 1) <= phc(hand%, 2) THEN
            n = phc(hand%, 1) / 2 * (27 - phc(hand%, 1)) + phc(hand%, 2)
        END IF
        IF phc(hand%, 1) > phc(hand%, 2) THEN
            n = phc(hand%, 2) / 2 * (27 - phc(hand%, 2)) + phc(hand%, 1)
        END IF
        IF denom(c%) = 0 AND jo27% = 1 THEN
            phc(hand%, 0) = 27
            IF jowi% = 1 THEN
                pjoke(hand%) = 0
            END IF
        END IF
        IF mpvi% = 1 THEN GOSUB 567
    LOOP
    DO WHILE most% > phc(0, 0) AND ace% <> 0 AND r(n, dn) = 82
        cons&& = cons&& + 1
        phc(0, 0) = phc(0, 0) + 1
        phc(phc(0, 0), 1) = phc(hand%, 2)
        psc(phc(0, 0), 1) = psc(hand%, 2)
        IF jowi% = 1 THEN
            pjoke(phc(0, 0)) = phc(hand%, 2)
        END IF
        GOSUB 987
        phc(hand%, 2) = denom(c%)
        psc(hand%, 2) = suit(c%)
        phc(hand%, 0) = phc(hand%, 1) + phc(hand%, 2)
        ace% = (phc(hand%, 1) - 1) * (phc(hand%, 2) - 1)
        IF phc(hand%, 1) <= phc(hand%, 2) THEN
            n = phc(hand%, 1) / 2 * (27 - phc(hand%, 1)) + phc(hand%, 2)
        END IF
        IF phc(hand%, 1) > phc(hand%, 2) THEN
            n = phc(hand%, 2) / 2 * (27 - phc(hand%, 2)) + phc(hand%, 1)
        END IF
        IF denom(c%) = 0 AND jo27% = 1 THEN
            phc(hand%, 0) = 27
            IF jowi% = 1 THEN
                pjoke(hand%) = 0
            END IF
        END IF
        IF mpvi% = 1 THEN GOSUB 567
    LOOP
    IF mpvi% = 1 THEN GOSUB 567
    IF phc(0, 0) = 1 THEN
        op% = r(n, dn)
    END IF
    IF phc(0, 0) <> 1 THEN
        IF phc(hand%, 1) > phc(hand%, 2) THEN
            op% = far(n, dn)
        END IF
        IF phc(hand%, 1) <= phc(hand%, 2) THEN
            op% = sar(n, dn)
        END IF
    END IF
    IF phc(0, 0) <> 1 AND phc(1, 1) = 1 AND dsa% <> 1 THEN
        op% = 0
    END IF
    IF (op% > 0 AND op% < 82) THEN
        softhand% = 0
        c = 10
        IF phc(hand%, 0) < h(op%) - 13 THEN
            hithand% = 1
        END IF
        IF phc(hand%, 0) > h(op%) - 14 THEN
            hithand% = 0
            IF phc(hand%, 0) < su% - 13 THEN
                cons&& = cons&& + 1
            END IF
        END IF
        DO WHILE hithand% = 1 AND (c = 10 OR c < minrank%)
            IF phc(hand%, 0) < sl% - 13 AND ace% = 0 THEN
                IF ls% = 1 OR ld% < 15 OR splt% = 1 THEN
                    IF phc(0, hand%) = 2 THEN
                        cons&& = cons&& + 1
                    END IF
                    IF phc(0, hand%) > 2 THEN
                        IF phc(0, hand%) < 9 THEN
                            IF dd(phc(0, hand%)) = 1 THEN
                                cons&& = cons&& + 1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF phc(hand%, 0) > sl% - 14 AND ace% = 0 THEN
                cons&& = cons&& + 1
            END IF
            IF phc(hand%, 0) < hl% AND ace% <> 0 THEN
                IF ls% = 1 OR ld% < 15 OR splt% = 1 THEN
                    IF phc(0, hand%) = 2 THEN
                        cons&& = cons&& + 1
                    END IF
                    IF phc(0, hand%) > 2 THEN
                        IF phc(0, hand%) < 9 THEN
                            IF dd(phc(0, hand%)) = 1 THEN
                                cons&& = cons&& + 1
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF phc(hand%, 0) > hl% - 1 AND ace% <> 0 THEN
                cons&& = cons&& + 1
            END IF
            GOSUB 987
            softhand% = 1
            phc(0, hand%) = phc(0, hand%) + 1
            phc(hand%, phc(0, hand%)) = denom(c%)
            psc(hand%, phc(0, hand%)) = suit(c%)
            phc(hand%, 0) = phc(hand%, 0) + denom(c%)
            ace% = ace% * (denom(c%) - 1)
            IF denom(c%) = 0 AND jo27% = 1 THEN
                phc(hand%, 0) = 27
                IF jowi% = 1 THEN
                    pjoke(hand%) = 0
                END IF
            END IF
            IF phc(hand%, 0) < h(op%) - 13 THEN
                hithand% = 1
            END IF
            IF phc(hand%, 0) > h(op%) - 14 THEN
                hithand% = 0
            END IF
            IF z% = ap AND override% = 1 THEN
                IF ace% = 0 AND phc(0, hand%) > 3 THEN
                    IF phc(hand%, 0) > h(op%) - 14 THEN
                        IF phc(hand%, 0) < su% - 13 THEN
                            GOSUB 27
                        END IF
                    END IF
                END IF
            END IF
            IF qfcphw% = 1 AND taketurn% = 0 THEN
                IF phc(0, hand%) > 4 THEN
                    IF phc(hand%, 0) < 28 THEN
                        x = hand%
                        GOSUB 54
                        phcat(hand%) = c
                    END IF
                END IF
            END IF
            IF qfcphw% = 1 AND taketurn% = 1 THEN
                IF phc(0, hand%) > 4 THEN
                    IF phc(hand%, 0) < 28 THEN
                        taketurn% = 0
                        x = hand%
                        GOSUB 54
                        phcat(hand%) = c
                        taketurn% = 1
                    END IF
                END IF
            END IF
            IF phc(hand%, 0) < 14 THEN
                IF phc(0, hand%) < 9 THEN
                    IF dd(phc(0, hand%)) = 1 THEN
                        IF phc(hand%, 1) > phc(hand%, 2) THEN
                            IF ace% = 0 AND phc(hand%, 0) > 1 THEN
                                ppn = 1
                            END IF
                            IF ace% <> 0 OR phc(hand%, 0) < 2 THEN
                                ppn = phc(hand%, 2)
                            END IF
                            m = ppn / 2 * (27 - ppn) + phc(hand%, 0)
                            m = m - ppn
                            IF phc(0, 0) = 1 THEN
                                op% = r(m, dn)
                            END IF
                            IF phc(0, 0) <> 1 THEN
                                op% = far(m, dn)
                            END IF
                            IF (op% = 82 OR op% = 83) THEN
                                op% = far(m, dn)
                            END IF
                        END IF
                        IF phc(hand%, 1) <= phc(hand%, 2) THEN
                            IF ace% = 0 AND phc(hand%, 0) > 1 THEN
                                ppn = 1
                            END IF
                            IF ace% <> 0 OR phc(hand%, 0) < 2 THEN
                                ppn = phc(hand%, 1)
                            END IF
                            m = ppn / 2 * (27 - ppn) + phc(hand%, 0)
                            m = m - ppn
                            IF phc(0, 0) = 1 THEN
                                op% = r(m, dn)
                            END IF
                            IF phc(0, 0) <> 1 THEN
                                op% = sar(m, dn)
                            END IF
                            IF (op% = 82 OR op% = 83) THEN
                                op% = sar(m, dn)
                            END IF
                        END IF
                    END IF
                END IF
            END IF
        LOOP
        IF phc(hand%, 0) > g(op%) - 1 AND op% <> 84 THEN
            hithand% = 0
            IF phc(hand%, 0) < hu% THEN
                cons&& = cons&& + 1
            END IF
        END IF
        IF (ace% = 0 AND op% <> 84 AND phc(hand%, 0) < 15) THEN
            phc(hand%, 0) = phc(hand%, 0) + 13
        END IF
        IF phc(hand%, 0) < g(op%) AND op% <> 84 THEN
            hithand% = 1
        END IF
        DO WHILE hithand% = 1 AND (c = 10 OR c < minrank%)
            IF softhand% <> 1 THEN
                IF phc(hand%, 0) < hl% THEN
                    IF ls% = 1 OR ld% < 15 OR splt% = 1 THEN
                        IF phc(0, hand%) = 2 THEN
                            cons&& = cons&& + 1
                        END IF
                        IF phc(0, hand%) > 2 THEN
                            IF phc(0, hand%) < 9 THEN
                                IF dd(phc(0, hand%)) = 1 THEN
                                    cons&& = cons&& + 1
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
                IF phc(hand%, 0) > hl% - 1 THEN
                    cons&& = cons&& + 1
                END IF
                GOSUB 987
                phc(0, hand%) = phc(0, hand%) + 1
                phc(hand%, phc(0, hand%)) = denom(c%)
                psc(hand%, phc(0, hand%)) = suit(c%)
                phc(hand%, 0) = phc(hand%, 0) + denom(c%)
                ace% = ace% * (denom(c%) - 1)
                IF denom(c%) = 0 AND jo27% = 1 THEN
                    phc(hand%, 0) = 27
                    IF jowi% = 1 THEN
                        pjoke(hand%) = 0
                    END IF
                END IF
            END IF
            softhand% = 0
            q = phc(0, hand%)
            IF phc(0, hand%) < 9 THEN
                IF dd(q) = 1 OR (qfcphw% = 1 AND q = 3 AND override% = 1) THEN
                    IF phc(hand%, 1) > phc(hand%, 2) THEN
                        ppn = phc(hand%, 0) - 13
                        IF ace% <> 0 AND ppn = 1 THEN
                            ppn = 2
                        END IF
                        IF ppn < phc(hand%, 2) THEN
                            ppn = phc(hand%, 2)
                        END IF
                        m = ppn / 2 * (27 - ppn)
                        m = m - ppn + phc(hand%, 0)
                        IF phc(0, 0) = 1 THEN
                            op% = r(m, dn)
                        END IF
                        IF phc(0, 0) <> 1 THEN
                            op% = far(m, dn)
                        END IF
                        IF (op% = 82 OR op% = 83) THEN
                            op% = far(m, dn)
                        END IF
                    END IF
                    IF phc(hand%, 1) <= phc(hand%, 2) THEN
                        ppn = phc(hand%, 0) - 13
                        IF ace% <> 0 AND ppn = 1 THEN
                            ppn = 2
                        END IF
                        IF ppn < phc(hand%, 1) THEN
                            ppn = phc(hand%, 1)
                        END IF
                        m = ppn / 2 * (27 - ppn)
                        m = m - ppn + phc(hand%, 0)
                        IF phc(0, 0) = 1 THEN
                            op% = r(m, dn)
                        END IF
                        IF phc(0, 0) <> 1 THEN
                            op% = sar(m, dn)
                        END IF
                        IF (op% = 82 OR op% = 83) THEN
                            op% = sar(m, dn)
                        END IF
                    END IF
                END IF
            END IF
            IF phc(0, 0) = 1 AND phc(0, hand%) = 4 THEN
                IF dd(phc(0, hand%)) <> 1 THEN
                    op% = r(n, dn)
                END IF
            END IF
            IF phc(0, 0) <> 1 AND phc(0, hand%) = 4 THEN
                IF dd(phc(0, hand%)) <> 1 THEN
                    IF phc(hand%, 1) > phc(hand%, 2) THEN
                        op% = far(n, dn)
                    END IF
                    IF phc(hand%, 1) <= phc(hand%, 2) THEN
                        op% = sar(n, dn)
                    END IF
                END IF
            END IF
            IF (ace% = 0 AND op% <> 84) THEN
                IF phc(hand%, 0) < 15 THEN
                    phc(hand%, 0) = phc(hand%, 0) + 13
                END IF
            END IF
            IF phc(hand%, 0) < g(op%) THEN
                hithand% = 1
            END IF
            IF phc(hand%, 0) > g(op%) - 1 THEN
                hithand% = 0
            END IF
            IF z% = ap AND override% = 1 THEN
                IF phc(0, hand%) > 3 THEN
                    IF phc(hand%, 0) > g(op%) - 1 THEN
                        IF phc(hand%, 0) < hu% THEN
                            GOSUB 36
                        END IF
                    END IF
                END IF
            END IF
            IF qfcphw% = 1 AND taketurn% = 0 THEN
                IF phc(0, hand%) > 4 THEN
                    IF phc(hand%, 0) < 28 THEN
                        x = hand%
                        GOSUB 54
                        phcat(hand%) = c
                    END IF
                END IF
            END IF
            IF qfcphw% = 1 AND taketurn% = 1 THEN
                IF phc(0, hand%) > 4 THEN
                    IF phc(hand%, 0) < 28 THEN
                        taketurn% = 0
                        x = hand%
                        GOSUB 54
                        phcat(hand%) = c
                        taketurn% = 1
                    END IF
                END IF
            END IF
        LOOP
        softhand% = 0
    END IF
    IF op% = 84 THEN
        IF (phc(0, 0) = 1 OR das% = 1) THEN
            cons&& = cons&& + 1
            GOSUB 987
            phc(0, hand%) = phc(0, hand%) + 1
            phc(hand%, 0) = phc(hand%, 0) + denom(c%)
            ace% = ace% * (denom(c%) - 1)
            phc(hand%, phc(0, hand%)) = denom(c%)
            psc(hand%, phc(0, hand%)) = suit(c%)
            v(hand%) = 4
            IF denom(c%) = 0 AND jo27% = 1 THEN
                phc(hand%, 0) = 27
                IF jowi% = 1 THEN
                    pjoke(hand%) = 0
                END IF
            END IF
        END IF
    END IF
    DO WHILE (nchw% = 1 AND phc(0, hand%) > 9)
        card(phc(hand%, phc(0, hand%))) = card(phc(hand%, phc(0, hand%))) + 1
        phc(hand%, 0) = phc(hand%, 0) - phc(hand%, phc(0, hand%))
        phc(0, hand%) = phc(0, hand%) - 1
        card(14) = card(14) + 1
    LOOP
    IF phc(hand%, 0) < 15 AND ace% = 0 THEN
        phc(hand%, 0) = phc(hand%, 0) + 13
    END IF
    IF taketurn% = 0 THEN
        autowin% = 0
        IF qfcphw% = 1 AND pcomp% <> 1 THEN
            IF phcat(hand%) >= minrank% THEN
                IF phcat(hand%) <> 10 THEN
                    autowin% = 1
                END IF
            END IF
        END IF
        IF phc(hand%, 0) = 27 THEN
            IF pjoke(hand%) = 0 AND jowi% = 1 THEN
                autowin% = 1
            END IF
            IF n < 14 AND joancash% = 1 THEN
                autowin% = 1
            END IF
            IF (qph27wa% = 1 AND phc(0, hand%)) > 4 THEN
                IF autowin% = 0 THEN
                    x = hand%
                    GOSUB 54
                    IF c >= minrank% AND c <> 10 THEN
                        autowin% = 1
                    END IF
                END IF
            END IF
            IF phc(0, hand%) = 3 THEN
                IF (phc(hand%, 1) * phc(hand%, 2) * phc(hand%, 3) = 729) THEN
                    IF v(hand%) <> 4 THEN
                        op% = 1
                    END IF
                    IF psc(hand%, 1) = psc(hand%, 2) THEN
                        IF psc(hand%, 2) = psc(hand%, 3) THEN
                            op% = 2
                        END IF
                    END IF
                    IF op% = 1 THEN
                        IF ms999 <> 0 THEN
                            autowin% = 1
                        END IF
                    END IF
                    IF op% = 2 THEN
                        IF ss999 <> 0 THEN
                            autowin% = 1
                        END IF
                    END IF
                    IF (dc(1) = 9 AND dc(2) = 9) THEN
                        IF phc(0, 0) = 1 THEN
                            IF op% = 1 THEN
                                op% = 3
                            END IF
                        END IF
                        IF phc(0, 0) = 1 THEN
                            IF op% = 2 THEN
                                op% = 4
                            END IF
                        END IF
                    END IF
                    IF (op% = 3 AND sp999 <> 0) THEN
                        IF bet& >= qmb& THEN
                            autowin% = 1
                        END IF
                    END IF
                    IF (op% = 3 AND sp999 <> 0) THEN
                        IF bet& >= qmb& THEN
                            autowin% = 1
                        END IF
                    END IF
                END IF
                IF (phc(hand%, 1) * phc(hand%, 2) * phc(hand%, 3) = 720) THEN
                    IF v(hand%) <> 4 THEN
                        op% = 8
                        IF psc(hand%, 1) = psc(hand%, 2) THEN
                            IF psc(hand%, 2) = psc(hand%, 3) THEN
                                op% = 9
                                IF psc(hand%, 1) = 6 THEN
                                    op% = 10
                                END IF
                            END IF
                        END IF
                        IF (op% = 8 AND ms89T <> 0) THEN
                            autowin% = 1
                        END IF
                        IF (op% = 9 AND ss89T <> 0) THEN
                            autowin% = 1
                        END IF
                        IF (op% = 10 AND sp89T <> 0) THEN
                            autowin% = 1
                        END IF
                    END IF
                END IF
                IF (phc(0, hand%) = 6 AND v(hand%) <> 4) THEN
                    IF mc27po(4, 0) <> 0 THEN
                        autowin% = 1
                    END IF
                END IF
                IF (phc(0, hand%) = 7 AND v(hand%) <> 4) THEN
                    IF mc27po(5, 0) <> 0 THEN
                        autowin% = 1
                    END IF
                END IF
                IF (phc(0, hand%) = 8 AND v(hand%) <> 4) THEN
                    IF mc27po(6, 0) <> 0 THEN
                        autowin% = 1
                    END IF
                END IF
                IF (phc(0, hand%) = 9 AND v(hand%) <> 4) THEN
                    IF mc27po(7, 0) <> 0 THEN
                        autowin% = 1
                    END IF
                END IF
            END IF
            IF immed% = 1 THEN autowin% = 1
        END IF
        IF (phc(hand%, 0) > 27 AND dbc% <> 1 AND dbc% <> 2) THEN
            IF pbc% <> 1 AND pbc% <> 2 THEN
                autowin% = 1
            END IF
            IF pbc% = 1 OR pbc% = 2 THEN
                IF phc(hand%, 0) - 27 > 27 - dhf% - dwt% MOD 2 THEN
                    autowin% = 1
                END IF
            END IF
        END IF
        IF (dbc% = 1 OR dbc% = 2) THEN
            IF phc(hand%, 0) > (dwt% + 1) MOD 2 + dhf% + 11 THEN
                autowin% = 1
            END IF
        END IF
        IF autowin% = 1 THEN taketurn% = 0
        IF autowin% <> 1 THEN taketurn% = 1
    END IF
    IF phc(0, 0) > hand% THEN
        GOSUB 987
        hand% = hand% + 1
        phcat(hand%) = 10
        phc(0, hand%) = 2
        phc(hand%, 2) = denom(c%)
        psc(hand%, 2) = suit(c%)
        phc(hand%, 0) = phc(hand%, 1) + phc(hand%, 2)
        ace% = (phc(hand%, 1) - 1) * (phc(hand%, 2) - 1)
        v(hand%) = 2
        IF phc(hand%, 1) <= phc(hand%, 2) THEN
            n = phc(hand%, 1) / 2
            n = n * (27 - phc(hand%, 1)) + phc(hand%, 2)
        END IF
        IF phc(hand%, 1) > phc(hand%, 2) THEN
            n = phc(hand%, 2) / 2
            n = n * (27 - phc(hand%, 2)) + phc(hand%, 1)
        END IF
        IF bssh% = 1 AND n = 26 AND bshw% = 1 THEN
            v(hand%) = bigslick * 2
        END IF
        IF jo27% = 1 AND denom(c%) = 0 THEN
            phc(hand%, 0) = 27
            IF jowi% = 1 THEN
                pjoke(hand%) = 0
            END IF
        END IF
        GOTO 1
    END IF
    7 FOR x = 1 TO phc(0, 0)
        nopc&& = nopc&& + phc(0, x)
        noph&& = noph&& + 1
    NEXT x
NEXT z%
77 dace% = 1
dh(1) = 0
FOR x = 1 TO dc(0)
    IF dc(x) = 0 THEN
        IF jo27% = 1 THEN dh(1) = 27
        IF joanca% = 1 AND dc(0) = 2 THEN dh(1) = 27
    END IF
    IF dh(1) <> 27 THEN
        dh(1) = dh(1) + dc(x)
        dace% = dace% * (dc(x) - 1)
    END IF
NEXT x
IF dqfcphw% = 1 AND dc(0) > 4 THEN
    taketurn% = 3
    x = 1
    GOSUB 54
    taketurn% = 1
    IF d >= minrank% AND d <> 10 THEN
        GOTO 8
    END IF
END IF
IF dace% = 0 AND dh(1) > j + 1 AND dh(1) < 15 THEN
    dh(1) = dh(1) + 13
    GOTO 8
END IF
IF dc(0) <> 1 THEN
    IF dh(1) > dhf% - 1 THEN
        GOTO 8
    END IF
END IF
IF taketurn% = 0 THEN GOTO 8
dc(0) = dc(0) + 1
GOSUB 987: REM dealer hand
dc(dc(0)) = denom(c%)
dcs(dc(0)) = suit(c%)
dh(1) = 0
GOTO 77
8 IF dace% = 0 AND dh(1) < 15 THEN dh(1) = dh(1) + 13
IF dqfcphw% = 1 AND dh(1) < 28 THEN phr(d, 10) = phr(d, 10) + 1
nodc&& = nodc&& + dc(0): nodh&& = nodh&& + 1: taketurn% = 1: x = 1
IF pbd% = 1 AND phc(0, 0) = 1 THEN
    IF n% = 0 AND jojo% = 1 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(15, 1) = mc27po(15, 1) + 1
        IF wager% = 0 THEN
            v(1) = jojopo * 2
            IF ptm(14) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(14) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (jojopo - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(14) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(14) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (jojopo - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF n% = 26 AND bshw% = 1 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(13, 1) = mc27po(13, 1) + 1
        IF wager% = 0 THEN
            v(1) = bigslick * 2
            IF ptm(15) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(15) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (bigslick - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(15) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(15) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (bigslick - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF n% < 14 AND joanca% = 1 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(16, 1) = mc27po(16, 1) + 1
        IF wager% = 0 THEN
            v(1) = joancapo * 2
            IF ptm(16) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(16) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (joancapo - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(16) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(16) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (joancapo - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
END IF
IF jojo% = 1 THEN
    IF dn = 0 AND n% = 0 THEN
        IF dwt% = 2 THEN
            GOSUB 54
            mc27po(15, 1) = mc27po(15, 1) + 1
            IF wager% = 0 THEN
                v(1) = jojopo * 2
                IF ptm(14) <> 1 THEN
                    b(23) = b(23) + v(1) * bet&
                END IF
                IF ptm(14) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (jojopo - 1) * mini&)
                END IF
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
        END IF
        IF dwt% = 1 THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
            IF wager% = 1 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        IF dwt% <> 1 AND dwt% <> 2 THEN
            IF wager% = 0 OR wager% = 1 THEN
                b(93) = b(93) + v(1) * bet&
                b(0) = b(0) + v(1)
                b(75) = b(75) + 1
            END IF
            IF wager% = 2 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        b(117) = b(117) + v(1) * bet&
        b(115) = b(115) + v(1)
        b(113) = b(113) + 1
        b(99) = b(99) + v(1) * bet&
        b(3) = b(3) + v(1)
        b(81) = b(81) + 1
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF dn = 0 AND n% <> 0 THEN
        IF wager% = 0 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
        END IF
        IF wager% = 1 THEN
            v(1) = v(1) * gwpo
            b(23) = b(23) + v(1) * bet&
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
        END IF
        dh(1) = 27
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF n% = 0 AND dn <> 0 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(15, 1) = mc27po(15, 1) + 1
        IF wager% = 0 THEN
            v(1) = jojopo * 2
            IF ptm(14) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(14) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (jojopo - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(14) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(14) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (jojopo - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
END IF
IF bshw% = 1 THEN
    IF dn = 26 AND n% = 26 THEN
        IF dwt% = 2 THEN
            GOSUB 54
            mc27po(13, 1) = mc27po(13, 1) + 1
            IF wager% = 0 THEN
                v(1) = bigslick * 2
                IF ptm(15) <> 1 THEN
                    b(23) = b(23) + v(1) * bet&
                END IF
                IF ptm(15) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (bigslick - 1) * mini&)
                END IF
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
        END IF
        IF dwt% = 1 THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
            IF wager% = 1 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        IF dwt% <> 1 AND dwt% <> 2 THEN
            IF wager% = 0 OR wager% = 1 THEN
                b(93) = b(93) + v(1) * bet&
                b(0) = b(0) + v(1)
                b(75) = b(75) + 1
            END IF
            IF wager% = 2 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        b(117) = b(117) + v(1) * bet&
        b(115) = b(115) + v(1)
        b(113) = b(113) + 1
        b(99) = b(99) + v(1) * bet&
        b(3) = b(3) + v(1)
        b(81) = b(81) + 1
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF dn = 26 AND n% <> 26 THEN
        IF wager% = 0 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
        END IF
        IF wager% = 1 THEN
            v(1) = v(1) * gwpo
            b(23) = b(23) + v(1) * bet&
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF n% = 26 AND phc(0, 0) = 1 AND dn <> 26 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(13, 1) = mc27po(13, 1) + 1
        IF wager% = 0 THEN
            v(1) = bigslick * 2
            IF ptm(15) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(15) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (bigslick - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(15) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(15) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (bigslick - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
END IF
IF joanca% = 1 THEN
    IF dn < 14 AND n% < 14 THEN
        IF dwt% = 2 THEN
            GOSUB 54
            mc27po(16, 1) = mc27po(16, 1) + 1
            IF wager% = 0 THEN
                v(1) = joancapo * 2
                IF ptm(16) <> 1 THEN
                    b(23) = b(23) + v(1) * bet&
                END IF
                IF ptm(16) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (joancapo - 1) * mini&)
                END IF
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
        END IF
        IF dwt% = 1 THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(1) * bet&
                b(27) = b(27) + v(1)
                b(66) = b(66) + 1
            END IF
            IF wager% = 1 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        IF dwt% <> 1 AND dwt% <> 2 THEN
            IF wager% = 0 OR wager% = 1 THEN
                b(93) = b(93) + v(1) * bet&
                b(0) = b(0) + v(1)
                b(75) = b(75) + 1
            END IF
            IF wager% = 2 THEN
                v(1) = v(1) * gwpo
                b(23) = b(23) + v(1) * bet&
                b(26) = b(26) + v(1)
                b(60) = b(60) + 1
            END IF
        END IF
        b(117) = b(117) + v(1) * bet&
        b(115) = b(115) + v(1)
        b(113) = b(113) + 1
        b(99) = b(99) + v(1) * bet&
        b(3) = b(3) + v(1)
        b(81) = b(81) + 1
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF dn < 14 AND n% > 13 THEN
        IF wager% = 0 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
        END IF
        IF wager% = 1 THEN
            v(1) = v(1) * gwpo
            b(23) = b(23) + v(1) * bet&
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
    IF dn > 13 AND n% < 14 AND phc(0, 0) = 1 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(1) * bet&
            b(27) = b(27) + v(1)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(1) * bet&
                b(34) = b(34) + v(1)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(16, 1) = mc27po(16, 1) + 1
        IF wager% = 0 THEN
            v(1) = joancapo * 2
            IF ptm(16) <> 1 THEN
                b(23) = b(23) + v(1) * bet&
            END IF
            IF ptm(16) = 1 THEN
                b(23) = b(23) + 2 * (bet& + (joancapo - 1) * mini&)
            END IF
            b(26) = b(26) + v(1)
            b(60) = b(60) + 1
            IF dh(1) > 27 THEN
                IF ptm(16) <> 1 THEN
                    b(85) = b(85) + v(1) * bet&
                END IF
                IF ptm(16) = 1 THEN
                    b(85) = b(85) + 2 * (bet& + (joancapo - 1) * mini&)
                END IF
                b(20) = b(20) + v(1)
                b(65) = b(65) + 1
            END IF
        END IF
        IF track% = 1 THEN
            taketurn% = 2
            GOSUB 54
        END IF
        GOTO 9
    END IF
END IF
85 FOR x = 1 TO phc(0, 0)
    IF track% = 1 THEN
        taketurn% = 2
        GOSUB 54
        taketurn% = 1
    END IF
    IF phc(x, 1) < phc(x, 2) THEN
        n = phc(x, 1) / 2 * (27 - phc(x, 1)) + phc(x, 2)
    END IF
    IF phc(x, 1) >= phc(x, 2) THEN
        n = phc(x, 2) / 2 * (27 - phc(x, 2)) + phc(x, 1)
    END IF
    IF pbd% = 1 THEN
        IF n% = 26 AND bshw% = 1 AND bssh% = 1 THEN
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                IF dh(1) > 27 THEN
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
            END IF
            GOSUB 54
            mc27po(14, 1) = mc27po(14, 1) + 1
            IF wager% = 0 THEN
                v(x) = bigslick * 2
                IF ptm(15) <> 1 THEN
                    b(23) = b(23) + v(x) * bet&
                END IF
                IF ptm(15) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (bigslick - 1) * mini&)
                END IF
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF dh(1) > 27 THEN
                    IF ptm(15) <> 1 THEN
                        b(85) = b(85) + v(x) * bet&
                    END IF
                    IF ptm(15) = 1 THEN
                        b(85) = b(85) + 2 * (bet& + (bigslick - 1) * mini&)
                    END IF
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            GOTO 81
        END IF
        IF n% < 14 AND joanca% = 1 AND joancash% = 1 THEN
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                IF dh(1) > 27 THEN
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
            END IF
            GOSUB 54
            mc27po(17, 1) = mc27po(17, 1) + 1
            IF wager% = 0 THEN
                v(x) = joancapo * 2
                IF ptm(16) <> 1 THEN
                    b(23) = b(23) + v(x) * bet&
                END IF
                IF ptm(16) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (joancapo - 1) * mini&)
                END IF
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF dh(1) > 27 THEN
                    IF ptm(16) <> 1 THEN
                        b(85) = b(85) + v(x) * bet&
                    END IF
                    IF ptm(16) = 1 THEN
                        b(85) = b(85) + 2 * (bet& + (joancapo - 1) * mini&)
                    END IF
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            GOTO 81
        END IF
    END IF
    IF qfcphw% = 1 THEN
        IF phc(x, 0) < 28 AND phc(0, x) > 4 THEN
            IF phcat(x) >= minrank% AND phcat(x) <> 10 THEN
                IF pcomp% = 1 THEN
                    taketurn% = 0
                    GOSUB 54
                    taketurn% = 1
                END IF
                IF pcomp% <> 1 OR best(0) < best(1) THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                        END IF
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                            IF ptm(c) = 1 THEN
                                b(85) = b(85) + mini& * 2 * phpo(c)
                                b(20) = b(20) + 2 * phpo(c)
                            END IF
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
        END IF
    END IF
    IF (r(n, dn) = 83 AND phc(0, 0) = 1) THEN
        b(25) = b(25) + v(x) * bet&
        b(27) = b(27) + v(x)
        b(66) = b(66) + .5
        b(0) = b(0) + v(x)
        b(75) = b(75) + .5
        b(93) = b(93) + v(x) * bet&
        IF phc(x, 0) = dh(1) THEN
            b(117) = b(117) + v(x) * bet&
            b(115) = b(115) + v(x)
            b(113) = b(113) + 1
            b(99) = b(99) + v(x) * bet&
            b(3) = b(3) + v(x)
            b(81) = b(81) + 1
        END IF
        GOTO 81
    END IF
    IF n = 26 THEN
        IF bssh% = 1 THEN
            mc27po(14, 1) = mc27po(14, 1) + 1
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                IF dh(1) > 27 THEN
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
            END IF
            GOSUB 54
            IF wager% = 0 THEN
                v(x) = bigslick * 2
                IF ptm(15) <> 1 THEN
                    b(23) = b(23) + v(x) * bet&
                END IF
                IF ptm(15) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (bigslick - 1) * mini&)
                END IF
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF dh(1) > 27 THEN
                    IF ptm(15) <> 1 THEN
                        b(85) = b(85) + v(x) * bet&
                    END IF
                    IF ptm(15) = 1 THEN
                        b(85) = b(85) + 2 * (bet& + (bigslick - 1) * mini&)
                    END IF
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            GOTO 81
        END IF
    END IF
    IF n < 14 THEN
        IF joancash% = 1 THEN
            mc27po(17, 1) = mc27po(17, 1) + 1
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                IF dh(1) > 27 THEN
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
            END IF
            GOSUB 54
            IF wager% = 0 THEN
                v(x) = joancapo * 2
                IF ptm(16) <> 1 THEN
                    b(23) = b(23) + v(x) * bet&
                END IF
                IF ptm(16) = 1 THEN
                    b(23) = b(23) + 2 * (bet& + (joancapo - 1) * mini&)
                END IF
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF dh(1) > 27 THEN
                    IF ptm(16) <> 1 THEN
                        b(85) = b(85) + v(x) * bet&
                    END IF
                    IF ptm(16) = 1 THEN
                        b(85) = b(85) + 2 * (bet& + (joancapo - 1) * mini&)
                    END IF
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            GOTO 81
        END IF
    END IF
    IF jowi% = 1 AND pjoke(x) = 0 THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(x) * bet&
            b(27) = b(27) + v(x)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(x) * bet&
                b(34) = b(34) + v(x)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        IF wager% = 0 THEN
            b(23) = b(23) + v(x) * bet&
            b(26) = b(26) + v(x)
            b(60) = b(60) + 1
            IF ptm(c) = 1 THEN
                b(23) = b(23) + mini& * 2 * phpo(c)
                b(26) = b(26) + 2 * phpo(c)
            END IF
            IF dh(1) > 27 THEN
                b(85) = b(85) + v(x) * bet&
                b(20) = b(20) + v(x)
                b(65) = b(65) + 1
                IF ptm(c) = 1 THEN
                    b(85) = b(85) + mini& * 2 * phpo(c)
                    b(20) = b(20) + 2 * phpo(c)
                END IF
            END IF
        END IF
        GOTO 81
    END IF
    IF b27po% = 1 AND phc(x, 0) = 27 AND phc(0, x) = 3 THEN
        IF (phc(x, 1) * phc(x, 2) * phc(x, 3) = 729) THEN
            op% = 0
            IF phc(0, 0) = 1 OR sh999% = 1 THEN
                IF v(x) <> 4 OR dd999% = 1 THEN
                    op% = 1
                END IF
                IF psc(x, 1) = psc(x, 2) THEN
                    IF psc(x, 2) = psc(x, 3) THEN
                        op% = 2
                    END IF
                END IF
            END IF
            IF (dc(1) = 9 AND dc(2) = 9) THEN
                IF phc(0, 0) = 1 AND op% = 1 THEN
                    op% = 3
                END IF
                IF phc(0, 0) = 1 AND op% = 2 THEN
                    op% = 4
                END IF
            END IF
            IF (op% = 1 AND ms999 <> 0) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(1, 1) = mc27po(1, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ms999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(1, 1) = mc27po(1, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ms999
                        b(26) = b(26) + v(x) + 2 * ms999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ms999
                            b(20) = b(20) + v(x) + 2 * ms999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 2 AND ss999 <> 0) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(2, 1) = mc27po(2, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ss999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(2, 1) = mc27po(2, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ss999
                        b(26) = b(26) + v(x) + 2 * ss999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ss999
                            b(20) = b(20) + v(x) + 2 * ss999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 3 AND sp999 <> 0 AND bet& < qmb&) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(1, 1) = mc27po(1, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ms999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(1, 1) = mc27po(1, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ms999
                        b(26) = b(26) + v(x) + 2 * ms999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ms999
                            b(20) = b(20) + v(x) + 2 * ms999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 3 AND sp999 <> 0 AND bet& >= qmb&) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(3, 1) = mc27po(3, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + sp999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(3, 1) = mc27po(3, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * sp999
                        b(26) = b(26) + v(x) + 2 * sp999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * sp999
                            b(20) = b(20) + v(x) + 2 * sp999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 4 AND jp999 <> 0 AND bet& < qmb&) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(2, 1) = mc27po(2, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ss999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(2, 1) = mc27po(2, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ss999
                        b(26) = b(26) + v(x) + 2 * ss999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ss999
                            b(20) = b(20) + v(x) + 2 * ss999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 4 AND jp999 <> 0 AND bet& >= qmb&) THEN
                IF ptm(13) <> 1 THEN
                    mc27po(11, 1) = mc27po(11, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + jp999 * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(13) = 1 THEN
                    mc27po(11, 1) = mc27po(11, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * jp999
                        b(26) = b(26) + v(x) + 2 * jp999
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * jp999
                            b(20) = b(20) + v(x) + 2 * jp999
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
        END IF
        IF (phc(x, 1) * phc(x, 2) * phc(x, 3) = 720) THEN
            op% = 0
            IF phc(0, 0) = 1 OR sh89T% = 1 THEN
                IF v(x) <> 4 OR dd89T% = 1 THEN
                    op% = 8
                    IF psc(x, 1) = psc(x, 2) THEN
                        IF psc(x, 2) = psc(x, 3) THEN
                            op% = 9
                            IF psc(x, 1) = 6 THEN
                                op% = 10
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            IF (op% = 8 AND ms89T <> 0) THEN
                IF ptm(12) <> 1 THEN
                    mc27po(8, 1) = mc27po(8, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ms89T * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(12) = 1 THEN
                    mc27po(8, 1) = mc27po(8, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ms89T
                        b(26) = b(26) + v(x) + 2 * ms89T
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ms89T
                            b(20) = b(20) + v(x) + 2 * ms89T
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 9 AND ss89T <> 0) THEN
                IF ptm(12) <> 1 THEN
                    mc27po(9, 1) = mc27po(9, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + ss89T * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(12) = 1 THEN
                    mc27po(9, 1) = mc27po(9, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * ss89T
                        b(26) = b(26) + v(x) + 2 * ss89T
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * ss89T
                            b(20) = b(20) + v(x) + 2 * ss89T
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
            IF (op% = 10 AND sp89T <> 0) THEN
                IF ptm(12) <> 1 THEN
                    mc27po(10, 1) = mc27po(10, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        v(x) = v(x) + sp89T * 2
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
                IF ptm(12) = 1 THEN
                    mc27po(10, 1) = mc27po(10, 1) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF dh(1) > 27 THEN
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(23) = b(23) + mini& * 2 * sp89T
                        b(26) = b(26) + v(x) + 2 * sp89T
                        b(60) = b(60) + 1
                        IF dh(1) > 27 THEN
                            b(85) = b(85) + v(x) * bet&
                            b(85) = b(85) + mini& * 2 * sp89T
                            b(20) = b(20) + v(x) + 2 * sp89T
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
        END IF
        IF phc(0, 0) = 1 OR shmc27% = 1 THEN
            IF v(x) <> 4 OR ddmc27% = 1 THEN
                IF (phc(0, x) = 6 AND mc27po(4, 0) <> 0) THEN
                    IF ptm(11) <> 1 THEN
                        mc27po(4, 1) = mc27po(4, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            v(x) = v(x) + mc27po(4, 0) * 2
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                    IF ptm(11) = 1 THEN
                        mc27po(4, 1) = mc27po(4, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(23) = b(23) + mini& * 2 * mc27po(4, 0)
                            b(26) = b(26) + v(x) + 2 * mc27po(4, 0)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(85) = b(85) + mini& * 2 * mc27po(4, 0)
                                b(20) = b(20) + v(x) + 2 * mc27po(4, 0)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                END IF
                IF (phc(0, x) = 7 AND mc27po(5, 0) <> 0) THEN
                    IF ptm(11) <> 1 THEN
                        mc27po(5, 1) = mc27po(5, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            v(x) = v(x) + mc27po(5, 0) * 2
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                    IF ptm(11) = 1 THEN
                        mc27po(5, 1) = mc27po(5, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(23) = b(23) + mini& * 2 * mc27po(5, 0)
                            b(26) = b(26) + v(x) + 2 * mc27po(5, 0)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(85) = b(85) + mini& * 2 * mc27po(5, 0)
                                b(20) = b(20) + v(x) + 2 * mc27po(5, 0)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                END IF
                IF (phc(0, x) = 8 AND mc27po(6, 0) <> 0) THEN
                    IF ptm(11) <> 1 THEN
                        mc27po(6, 1) = mc27po(6, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            v(x) = v(x) + mc27po(6, 0) * 2
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                    IF ptm(11) = 1 THEN
                        mc27po(6, 1) = mc27po(6, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(23) = b(23) + mini& * 2 * mc27po(6, 0)
                            b(26) = b(26) + v(x) + 2 * mc27po(6, 0)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(85) = b(85) + mini& * 2 * mc27po(6, 0)
                                b(20) = b(20) + v(x) + 2 * mc27po(6, 0)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                END IF
                IF (phc(0, x) = 9 AND mc27po(7, 0) <> 0) THEN
                    IF ptm(11) <> 1 THEN
                        mc27po(7, 1) = mc27po(7, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            v(x) = v(x) + mc27po(7, 0) * 2
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                    IF ptm(11) = 1 THEN
                        mc27po(7, 1) = mc27po(7, 1) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            IF dh(1) > 27 THEN
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(23) = b(23) + mini& * 2 * mc27po(7, 0)
                            b(26) = b(26) + v(x) + 2 * mc27po(7, 0)
                            b(60) = b(60) + 1
                            IF dh(1) > 27 THEN
                                b(85) = b(85) + v(x) * bet&
                                b(85) = b(85) + mini& * 2 * mc27po(7, 0)
                                b(20) = b(20) + v(x) + 2 * mc27po(7, 0)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        GOTO 81
                    END IF
                END IF
            END IF
        END IF
    END IF
    IF (nchw% = 1 AND phc(0, x) > 8 AND phc(x, 0) < 28) THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(x) * bet&
            b(27) = b(27) + v(x)
            b(66) = b(66) + 1
            IF dh(1) > 27 THEN
                b(91) = b(91) + v(x) * bet&
                b(34) = b(34) + v(x)
                b(73) = b(73) + 1
            END IF
        END IF
        GOSUB 54
        mc27po(12, 1) = mc27po(12, 1) + 1
        IF wager% = 0 THEN
            b(23) = b(23) + v(x) * bet&
            b(26) = b(26) + v(x)
            b(60) = b(60) + 1
            mc27po(12, 0) = mc27po(12, 0) + v(x) / 2
            IF ptm(c) = 1 THEN
                b(23) = b(23) + b(23) + mini& * 2 * phpo(c)
                b(26) = b(26) + 2 * phpo(c)
                mc27po(12, 0) = mc27po(12, 0) + phpo(c) * mini& / bet&
            END IF
            IF dh(1) > 27 THEN
                b(85) = b(85) + v(x) * bet&
                b(20) = b(20) + v(x)
                b(65) = b(65) + 1
                IF ptm(c) = 1 THEN
                    b(85) = b(85) + mini& * 2 * phpo(c)
                    b(20) = b(20) + 2 * phpo(c)
                END IF
            END IF
        END IF
        GOTO 81: REM predetermined Nine Card Hand Win Here
    END IF
    IF dqfcphw% = 1 THEN
        IF dh(1) < 28 AND d >= minrank% AND d <> 10 THEN
            IF pcomp% <> 1 OR best(0) + 1 > best(1) THEN
                IF immed% <> 1 OR phc(x, 0) <> 27 THEN
                    iphr(n%, dn, 10, 2) = iphr(n%, dn, 10, 2) + 1
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        IF phc(x, 0) > 27 THEN
                            b(89) = b(89) + v(x) * bet&
                            b(19) = b(19) + v(x)
                            b(71) = b(71) + 1
                        END IF
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF phc(x, 0) > 27 THEN
                            b(109) = b(109) + v(x) * bet&
                            b(105) = b(105) + v(x)
                            b(101) = b(101) + 1
                        END IF
                    END IF
                    GOTO 81
                END IF
            END IF
        END IF
    END IF
    IF (phc(x, 0) > dh(1) AND phc(x, 0) < 28) THEN
        IF wager% = 1 OR wager% = 2 THEN
            b(25) = b(25) + v(x) * bet&
            b(27) = b(27) + v(x)
            b(66) = b(66) + 1
        END IF
        GOSUB 54
        IF wager% = 0 THEN
            b(23) = b(23) + v(x) * bet&
            b(26) = b(26) + v(x)
            b(60) = b(60) + 1
            IF ptm(c) = 1 THEN
                b(23) = b(23) + mini& * 2 * phpo(c)
                b(26) = b(26) + 2 * phpo(c)
            END IF
        END IF
    END IF
    IF (dh(1) > phc(x, 0) AND dh(1) < 28) THEN
        IF wager% = 0 OR wager% = 2 THEN
            b(25) = b(25) + v(x) * bet&
            b(27) = b(27) + v(x)
            b(66) = b(66) + 1
        END IF
        IF wager% = 1 THEN
            v(x) = v(x) * gwpo
            b(23) = b(23) + v(x) * bet&
            b(26) = b(26) + v(x)
            b(60) = b(60) + 1
        END IF
    END IF
    IF (dh(1) > 27 + d28p% AND phc(x, 0) < 28) THEN
        IF debc% <> 1 AND debc% <> 2 THEN
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                b(91) = b(91) + v(x) * bet&
                b(34) = b(34) + v(x)
                b(73) = b(73) + 1
            END IF
            GOSUB 54
            IF wager% = 0 THEN
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                b(85) = b(85) + v(x) * bet&
                b(20) = b(20) + v(x)
                b(65) = b(65) + 1
                IF ptm(c) = 1 THEN
                    b(23) = b(23) + mini& * 2 * phpo(c)
                    b(26) = b(26) + 2 * phpo(c)
                    b(85) = b(85) + mini& * 2 * phpo(c)
                    b(20) = b(20) + 2 * phpo(c)
                END IF
            END IF
        END IF
        IF debc% = 1 OR debc% = 2 THEN
            IF dh(1) - 27 < 27 - phc(x, 0) AND debc% = 1 THEN
                IF wager% = 0 OR wager% = 1 THEN
                    b(93) = b(93) + v(x) * bet&
                    b(0) = b(0) + v(x)
                    b(75) = b(75) + 1
                    b(97) = b(97) + v(x) * bet&
                    b(58) = b(58) + v(x)
                    b(79) = b(79) + 1
                END IF
                IF wager% = 2 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            IF dh(1) - 27 < 27 - phc(x, 0) AND debc% = 2 THEN
                IF wager% = 0 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
                IF wager% = 1 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            IF dh(1) - 27 = 27 - phc(x, 0) THEN
                IF dwt% = 1 AND debc% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(97) = b(97) + v(x) * bet&
                        b(58) = b(58) + v(x)
                        b(79) = b(79) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(85) = b(85) + v(x) * bet&
                        b(20) = b(20) + v(x)
                        b(65) = b(65) + 1
                    END IF
                END IF
                IF dwt% = 1 AND debc% = 2 THEN
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(91) = b(91) + v(x) * bet&
                        b(34) = b(34) + v(x)
                        b(73) = b(73) + 1
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(85) = b(85) + v(x) * bet&
                        b(20) = b(20) + v(x)
                        b(65) = b(65) + 1
                    END IF
                END IF
                IF dwt% = 2 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(91) = b(91) + v(x) * bet&
                        b(34) = b(34) + v(x)
                        b(73) = b(73) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(85) = b(85) + v(x) * bet&
                        b(20) = b(20) + v(x)
                        b(65) = b(65) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(85) = b(85) + mini& * 2 * phpo(c)
                            b(20) = b(20) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
                IF dwt% <> 1 AND dwt% <> 2 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(97) = b(97) + v(x) * bet&
                        b(58) = b(58) + v(x)
                        b(79) = b(79) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(85) = b(85) + v(x) * bet&
                        b(20) = b(20) + v(x)
                        b(65) = b(65) + 1
                    END IF
                END IF
                b(129) = b(129) + v(x) * bet&
                b(127) = b(127) + v(x)
                b(125) = b(125) + 1
                b(99) = b(99) + v(x) * bet&
                b(3) = b(3) + v(x)
                b(81) = b(81) + 1
            END IF
            IF dh(1) - 27 > 27 - phc(x, 0) THEN
                IF wager% = 1 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
                GOSUB 54
                IF wager% = 0 THEN
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                    IF ptm(c) = 1 THEN
                        b(23) = b(23) + mini& * 2 * phpo(c)
                        b(26) = b(26) + 2 * phpo(c)
                        b(85) = b(85) + mini& * 2 * phpo(c)
                        b(20) = b(20) + 2 * phpo(c)
                    END IF
                END IF
            END IF
        END IF
    END IF
    IF (phc(x, 0) > 27 AND dh(1) < 28) THEN
        IF pbc% <> 1 AND pbc% <> 2 THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                b(89) = b(89) + v(x) * bet&
                b(19) = b(19) + v(x)
                b(71) = b(71) + 1
            END IF
            IF wager% = 1 THEN
                v(x) = v(x) * gwpo
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                b(109) = b(109) + v(x) * bet&
                b(105) = b(105) + v(x)
                b(101) = b(101) + 1
            END IF
        END IF
        IF pbc% = 1 OR pbc% = 2 THEN
            IF 27 - dh(1) < phc(x, 0) - 27 THEN
                IF wager% = 0 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(89) = b(89) + v(x) * bet&
                    b(19) = b(19) + v(x)
                    b(71) = b(71) + 1
                END IF
                IF wager% = 1 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(109) = b(109) + v(x) * bet&
                    b(105) = b(105) + v(x)
                    b(101) = b(101) + 1
                END IF
            END IF
            IF 27 - dh(1) = phc(x, 0) - 27 THEN
                IF dwt% = 1 THEN
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(89) = b(89) + v(x) * bet&
                        b(19) = b(19) + v(x)
                        b(71) = b(71) + 1
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                    END IF
                END IF
                IF dwt% = 2 AND pbc% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(111) = b(111) + v(x) * bet&
                        b(107) = b(107) + v(x)
                        b(103) = b(103) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                    END IF
                END IF
                IF dwt% = 2 AND pbc% = 2 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(89) = b(89) + v(x) * bet&
                        b(19) = b(19) + v(x)
                        b(71) = b(71) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(109) = b(109) + mini& * 2 * phpo(c)
                            b(105) = b(105) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
                IF dwt% <> 1 AND dwt% <> 2 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(111) = b(111) + v(x) * bet&
                        b(107) = b(107) + v(x)
                        b(103) = b(103) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                    END IF
                END IF
                b(119) = b(119) + 1
                b(121) = b(121) + v(x)
                b(123) = b(123) + v(x) * bet&
                b(81) = b(81) + 1
                b(3) = b(3) + v(x)
                b(99) = b(99) + v(x) * bet&
            END IF
            IF 27 - dh(1) > phc(x, 0) - 27 THEN
                IF dh(1) > dhf% - 1 AND pbc% = 2 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(89) = b(89) + v(x) * bet&
                        b(19) = b(19) + v(x)
                        b(71) = b(71) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(109) = b(109) + mini& * 2 * phpo(c)
                            b(105) = b(105) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
            END IF
            IF 27 - dh(1) > phc(x, 0) - 27 THEN
                IF dh(1) > dhf% - 1 AND pbc% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(111) = b(111) + v(x) * bet&
                        b(107) = b(107) + v(x)
                        b(103) = b(103) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                    END IF
                END IF
            END IF
            IF 27 - dh(1) > phc(x, 0) - 27 THEN
                IF dh(1) < dhf% THEN
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(89) = b(89) + v(x) * bet&
                        b(19) = b(19) + v(x)
                        b(71) = b(71) + 1
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(109) = b(109) + v(x) * bet&
                        b(105) = b(105) + v(x)
                        b(101) = b(101) + 1
                    END IF
                END IF
            END IF
        END IF
    END IF
    IF (phc(x, 0) > 27 AND dh(1) > 27) THEN
        IF (dbc% <> 1 AND dbc% <> 2) THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
                b(87) = b(87) + v(x) * bet&
                b(46) = b(46) + v(x)
                b(69) = b(69) + 1
            END IF
            IF wager% = 1 THEN
                v(x) = v(x) * gwpo
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                b(83) = b(83) + v(x) * bet&
                b(45) = b(45) + v(x)
                b(63) = b(63) + 1
            END IF
        END IF
        IF (dbc% = 1 OR dbc% = 2) THEN
            IF phc(x, 0) > dh(1) THEN
                IF wager% = 0 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(87) = b(87) + v(x) * bet&
                    b(46) = b(46) + v(x)
                    b(69) = b(69) + 1
                END IF
                IF wager% = 1 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(83) = b(83) + v(x) * bet&
                    b(45) = b(45) + v(x)
                    b(63) = b(63) + 1
                END IF
            END IF
            IF phc(x, 0) = dh(1) THEN
                IF dwt% <> 1 AND dwt% <> 2 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(95) = b(95) + v(x) * bet&
                        b(1) = b(1) + v(x)
                        b(77) = b(77) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                    END IF
                END IF
                IF dwt% = 1 THEN
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(87) = b(87) + v(x) * bet&
                        b(46) = b(46) + v(x)
                        b(69) = b(69) + 1
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                    END IF
                END IF
                IF dwt% = 2 AND dbc% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(95) = b(95) + v(x) * bet&
                        b(1) = b(1) + v(x)
                        b(77) = b(77) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                    END IF
                END IF
                IF dwt% = 2 AND dbc% = 2 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(87) = b(87) + v(x) * bet&
                        b(46) = b(46) + v(x)
                        b(69) = b(69) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(83) = b(83) + mini& * 2 * phpo(c)
                            b(45) = b(45) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
                b(131) = b(131) + 1
                b(133) = b(133) + v(x)
                b(135) = b(135) + v(x) * bet&
                b(81) = b(81) + 1
                b(3) = b(3) + v(x)
                b(99) = b(99) + v(x) * bet&
            END IF
            IF phc(x, 0) < dh(1) THEN
                IF dbc% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                        b(95) = b(95) + v(x) * bet&
                        b(1) = b(1) + v(x)
                        b(77) = b(77) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                    END IF
                END IF
                IF dbc% = 2 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                        b(87) = b(87) + v(x) * bet&
                        b(46) = b(46) + v(x)
                        b(69) = b(69) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        b(83) = b(83) + v(x) * bet&
                        b(45) = b(45) + v(x)
                        b(63) = b(63) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(83) = b(83) + mini& * 2 * phpo(c)
                            b(45) = b(45) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
            END IF
        END IF
    END IF
    IF (phc(x, 0) = dh(1) AND dh(1) < 27) THEN
        IF dwt% = 1 THEN
            IF wager% = 0 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
            END IF
            IF wager% = 1 THEN
                v(x) = v(x) * gwpo
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
            END IF
        END IF
        IF dwt% = 2 THEN
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
            END IF
            GOSUB 54
            IF wager% = 0 THEN
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF ptm(c) = 1 THEN
                    b(23) = b(23) + mini& * 2 * phpo(c)
                    b(26) = b(26) + 2 * phpo(c)
                    b(3) = b(3) + 2 * phpo(c)
                END IF
            END IF
        END IF
        IF dwt% <> 1 AND dwt% <> 2 THEN
            IF wager% = 0 OR wager% = 1 THEN
                b(93) = b(93) + v(x) * bet&
                b(0) = b(0) + v(x)
                b(75) = b(75) + 1
            END IF
            IF wager% = 2 THEN
                v(x) = v(x) * gwpo
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
            END IF
        END IF
        b(113) = b(113) + 1
        b(115) = b(115) + v(x)
        b(117) = b(117) + v(x) * bet&
        b(81) = b(81) + 1
        b(3) = b(3) + v(x)
        b(99) = b(99) + v(x) * bet&
    END IF
    IF (phc(x, 0) = 27 AND dh(1) = 27) THEN
        IF immed% = 1 THEN
            IF wager% = 1 OR wager% = 2 THEN
                b(25) = b(25) + v(x) * bet&
                b(27) = b(27) + v(x)
                b(66) = b(66) + 1
            END IF
            GOSUB 54
            IF wager% = 0 THEN
                b(23) = b(23) + v(x) * bet&
                b(26) = b(26) + v(x)
                b(60) = b(60) + 1
                IF ptm(c) = 1 THEN
                    b(23) = b(23) + mini& * 2 * phpo(c)
                    b(26) = b(26) + 2 * phpo(c)
                    b(3) = b(3) + 2 * phpo(c)
                END IF
            END IF
        END IF
        IF immed% <> 1 THEN
            IF qph27wa% = 1 THEN
                taketurn% = 0: GOSUB 54: taketurn% = 1
                IF c >= minrank% AND c <> 10 THEN
                    iphr(n%, dn, 10, 2) = iphr(n%, dn, 10, 2) + 1
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(3) = b(3) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
                IF c < minrank% OR c = 10 THEN
                    IF dwt% = 1 AND p27d27push% <> 1 THEN
                        IF wager% = 0 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                        END IF
                        IF wager% = 1 THEN
                            v(x) = v(x) * gwpo
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                        END IF
                    END IF
                    IF dwt% = 2 AND p27d27push% <> 1 THEN
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            IF ptm(c) = 1 THEN
                                b(23) = b(23) + mini& * 2 * phpo(c)
                                b(26) = b(26) + 2 * phpo(c)
                                b(3) = b(3) + 2 * phpo(c)
                            END IF
                        END IF
                    END IF
                    IF dwt% <> 1 AND dwt% <> 2 THEN
                        IF wager% = 0 OR wager% = 1 THEN
                            b(93) = b(93) + v(x) * bet&
                            b(0) = b(0) + v(x)
                            b(75) = b(75) + 1
                        END IF
                        IF wager% = 2 THEN
                            v(x) = v(x) * gwpo
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                        END IF
                    END IF
                    IF p27d27push% = 1 THEN
                        IF wager% = 0 OR wager% = 1 THEN
                            b(93) = b(93) + v(x) * bet&
                            b(0) = b(0) + v(x)
                            b(75) = b(75) + 1
                        END IF
                        IF wager% = 2 THEN
                            v(x) = v(x) * gwpo
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                        END IF
                    END IF
                END IF
            END IF
            IF qph27wa% <> 1 THEN
                IF dwt% = 1 AND p27d27push% <> 1 THEN
                    IF wager% = 0 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                    END IF
                    IF wager% = 1 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                    END IF
                END IF
                IF dwt% = 2 AND p27d27push% <> 1 THEN
                    IF wager% = 1 OR wager% = 2 THEN
                        b(25) = b(25) + v(x) * bet&
                        b(27) = b(27) + v(x)
                        b(66) = b(66) + 1
                    END IF
                    GOSUB 54
                    IF wager% = 0 THEN
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                        IF ptm(c) = 1 THEN
                            b(23) = b(23) + mini& * 2 * phpo(c)
                            b(26) = b(26) + 2 * phpo(c)
                            b(3) = b(3) + 2 * phpo(c)
                        END IF
                    END IF
                END IF
                IF dwt% <> 1 AND dwt% <> 2 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                    END IF
                END IF
                IF p27d27push% = 1 THEN
                    IF wager% = 0 OR wager% = 1 THEN
                        b(93) = b(93) + v(x) * bet&
                        b(0) = b(0) + v(x)
                        b(75) = b(75) + 1
                    END IF
                    IF wager% = 2 THEN
                        v(x) = v(x) * gwpo
                        b(23) = b(23) + v(x) * bet&
                        b(26) = b(26) + v(x)
                        b(60) = b(60) + 1
                    END IF
                END IF
            END IF
            b(113) = b(113) + 1
            b(115) = b(115) + v(x)
            b(117) = b(117) + v(x) * bet&
            b(81) = b(81) + 1
            b(3) = b(3) + v(x)
            b(99) = b(99) + v(x) * bet&
        END IF
    END IF
    IF (d28p% = 1 AND dh(1) = 28) THEN
        IF phc(x, 0) < 27 THEN
            IF d28w% <> 1 THEN
                IF wager% = 0 OR wager% = 1 THEN
                    b(93) = b(93) + v(x) * bet&
                    b(0) = b(0) + v(x)
                    b(75) = b(75) + 1
                    b(97) = b(97) + v(x) * bet&
                    b(58) = b(58) + v(x)
                    b(79) = b(79) + 1
                END IF
                IF wager% = 2 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
            IF d28w% = 1 THEN
                IF wager% = 0 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
                IF wager% = 1 THEN
                    v(x) = v(x) * gwpo
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                END IF
            END IF
        END IF
        IF phc(x, 0) = 27 THEN
            IF immed% <> 1 THEN
                IF qph27wa% = 1 THEN
                    taketurn% = 0: GOSUB 54: taketurn% = 1
                    IF c >= minrank% AND c <> 10 THEN
                        iphr(n%, dn, 10, 2) = iphr(n%, dn, 10, 2) + 1
                        IF wager% = 1 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                        GOSUB 54
                        IF wager% = 0 THEN
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                            IF ptm(c) = 1 THEN
                                b(23) = b(23) + mini& * 2 * phpo(c)
                                b(26) = b(26) + 2 * phpo(c)
                                b(85) = b(85) + mini& * 2 * phpo(c)
                                b(20) = b(20) + 2 * phpo(c)
                            END IF
                        END IF
                    END IF
                    IF c < minrank% OR c = 10 THEN
                        IF d28w% <> 1 THEN
                            IF wager% = 0 OR wager% = 1 THEN
                                b(93) = b(93) + v(x) * bet&
                                b(0) = b(0) + v(x)
                                b(75) = b(75) + 1
                                b(97) = b(97) + v(x) * bet&
                                b(58) = b(58) + v(x)
                                b(79) = b(79) + 1
                            END IF
                            IF wager% = 2 THEN
                                v(x) = v(x) * gwpo
                                b(23) = b(23) + v(x) * bet&
                                b(26) = b(26) + v(x)
                                b(60) = b(60) + 1
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                        IF d28w% = 1 THEN
                            IF wager% = 0 OR wager% = 2 THEN
                                b(25) = b(25) + v(x) * bet&
                                b(27) = b(27) + v(x)
                                b(66) = b(66) + 1
                                b(91) = b(91) + v(x) * bet&
                                b(34) = b(34) + v(x)
                                b(73) = b(73) + 1
                            END IF
                            IF wager% = 1 THEN
                                v(x) = v(x) * gwpo
                                b(23) = b(23) + v(x) * bet&
                                b(26) = b(26) + v(x)
                                b(60) = b(60) + 1
                                b(85) = b(85) + v(x) * bet&
                                b(20) = b(20) + v(x)
                                b(65) = b(65) + 1
                            END IF
                        END IF
                    END IF
                END IF
                IF qph27wa% <> 1 THEN
                    IF d28w% <> 1 THEN
                        IF wager% = 0 OR wager% = 1 THEN
                            b(93) = b(93) + v(x) * bet&
                            b(0) = b(0) + v(x)
                            b(75) = b(75) + 1
                            b(97) = b(97) + v(x) * bet&
                            b(58) = b(58) + v(x)
                            b(79) = b(79) + 1
                        END IF
                        IF wager% = 2 THEN
                            v(x) = v(x) * gwpo
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                    IF d28w% = 1 THEN
                        IF wager% = 0 OR wager% = 2 THEN
                            b(25) = b(25) + v(x) * bet&
                            b(27) = b(27) + v(x)
                            b(66) = b(66) + 1
                            b(91) = b(91) + v(x) * bet&
                            b(34) = b(34) + v(x)
                            b(73) = b(73) + 1
                        END IF
                        IF wager% = 1 THEN
                            v(x) = v(x) * gwpo
                            b(23) = b(23) + v(x) * bet&
                            b(26) = b(26) + v(x)
                            b(60) = b(60) + 1
                            b(85) = b(85) + v(x) * bet&
                            b(20) = b(20) + v(x)
                            b(65) = b(65) + 1
                        END IF
                    END IF
                END IF
            END IF
            IF immed% = 1 THEN
                IF wager% = 1 OR wager% = 2 THEN
                    b(25) = b(25) + v(x) * bet&
                    b(27) = b(27) + v(x)
                    b(66) = b(66) + 1
                    b(91) = b(91) + v(x) * bet&
                    b(34) = b(34) + v(x)
                    b(73) = b(73) + 1
                END IF
                GOSUB 54
                IF wager% = 0 THEN
                    b(23) = b(23) + v(x) * bet&
                    b(26) = b(26) + v(x)
                    b(60) = b(60) + 1
                    b(85) = b(85) + v(x) * bet&
                    b(20) = b(20) + v(x)
                    b(65) = b(65) + 1
                    IF ptm(c) = 1 THEN
                        b(23) = b(23) + mini& * 2 * phpo(c)
                        b(26) = b(26) + 2 * phpo(c)
                        b(85) = b(85) + mini& * 2 * phpo(c)
                        b(20) = b(20) + 2 * phpo(c)
                    END IF
                END IF
            END IF
        END IF
    END IF
81 NEXT x
9 b(25) = b(25) + ante% * 2
b(25) = b(25) + ante% * 2 * INT((bet& - 1) / 100)

'uncomment the following three lines of code to enable the player to
'bet that the outcome of the game will be a push.

'b(23) = (b(75) - b(137)) * bet& * 14
'b(25) = bet& * 2 - (b(75) - b(137)) * bet& * 2
'b(137) = b(75)

'uncomment the following five lines of code to enable the player to
'bet that the outcome of the game will be the dealer wins.

'IF b(23) <> 0 THEN b(137) = bet& * 2
'IF b(25) <> 0 THEN b(137) = bet& * 1.6
'IF b(137) = bet& * 2 THEN b(25) = b(137): b(23) = 0
'IF b(137) = bet& * 1.6 THEN b(23) = b(137): b(25) = 0
'b(137) = 0

'uncomment the following six lines of code to enable the player to
'bet that the outcome of the game will be the player's hand total
'is as close to twenty-seven points as is the dealer's hand total

'IF ABS(dh(1) - 27) = ABS(phc(1, 0) - 27) THEN
'   b(23) = bet& * 12: b(25) = 0
'END IF
'IF ABS(dh(1) - 27) <> ABS(phc(1, 0) - 27) THEN
'   b(23) = 0: b(25) = bet& * 2
'END IF

b(22) = b(22) + b(23)
b(24) = b(24) + b(25)
rn&& = rn&& + 1
IF ezc% = 1 THEN
    IF bottom! < b(7) OR rn&& < 11 THEN
        IF b(7) < top! OR rn&& < 11 THEN
            FOR x = 0 TO 13
                dv(x) = dv(x) + ev(x) * (b(23) - b(25))
                fv(x) = fv(x) + ABS(ev(x)) * (b(23) + b(25))
                ev(x) = mc(x) / mc(14) - card(x) / card(14)
                IF true% = 1 THEN ev(x) = ev(x) * mc(14)
                IF true% <> 1 THEN ev(x) = ev(x) * card(14)
            NEXT x
        END IF
    END IF
END IF
IF bet& > bigbet& THEN bigbet& = bet&
IF b(7) < b(13) THEN b(13) = b(7)
IF b(7) > b(12) THEN b(12) = b(7)
b(2) = purse + (b(22) - b(24)) / 2
IF b(2) + (b(39) - b(40)) / 2 < b(43) THEN
    b(43) = b(2) + (b(39) - b(40)) / 2
END IF
IF b(2) < b(36) THEN
    b(36) = b(2)
    b(15) = rn&& - b(16) * scr&
END IF
IF b(2) < purse + 1 THEN
    b(18) = rn&& - b(16) * scr&
END IF
IF b(2) > b(37) THEN b(37) = b(2)
IF b(2) + (b(39) - b(40)) / 2 > b(44) THEN
    b(44) = b(2) + (b(39) - b(40)) / 2
END IF
IF drop > b(2) - b(37) THEN drop = b(2) - b(37)
IF b(17) > b(2) - b(37) THEN b(17) = b(2) - b(37)
IF rn&& = INT(rn&& / scr&) * scr& OR rn&& = hmr&& THEN CLS ELSE GOTO 757
b(30) = rn&& / scr& - 1
b(30) = b(30) - INT(b(30) / 1000) * 1000 + 1
sample(b(30)) = b(2) - b(29)
b(29) = b(2)
sample(0) = 0
b(16) = b(16) + 1
IF INT(rn&& / scr&) < 1001 THEN b(30) = rn&& / scr& ELSE b(30) = 1000
REM here b(30) is equal to the number of samples used
REM to calculate variance and standard deviation
FOR x = 1 TO b(30)
    sample(0) = sample(0) + sample(x)
NEXT x
b(31) = sample(0) / b(30)
b(32) = 0
REM b(31) is equal to the mean or average change
REM in purse b(2) after scr& of hands
FOR x = 1 TO b(30)
    b(32) = b(32) + (sample(x) - b(31)) ^ 2
NEXT x
b(32) = b(32) / b(30)
REM b(32) is equal to variance
REM square root of b(32) is equal to one standard deviation
b(33) = b(33) + b(32)
REM b(33) is equal to sum of all variance calculations
IF rps% = 0 THEN
    PRINT "number of cards is"; deck% * mc(14); " ";
    PRINT card(14); "cards remain to be played";
    PRINT "  reshuffle is at"; INT(shf / 100 * deck% * mc(14))
END IF
IF rps% <> 0 THEN
    PRINT "number of cards is"; deck% * mc(14); " ";
    PRINT card(14); "cards remain to be played";
    PRINT "  reshuffle after"; rps%; "rounds"
END IF
REM PRINT "average number of decks in play is";
REM PRINT USING "##.##"; b(28) / b(38) / mc(14)
PRINT "card count:";
PRINT USING "####.##"; cv(14);
IF true% = 1 THEN
    PRINT "  true count:";
    PRINT USING "####.##"; standin;
END IF
PRINT "  constant added:";
PRINT USING "###.##"; constant;
PRINT "  bet count:";
PRINT USING "####.##"; b(7)
IF ezc% <> 1 OR z$ <> "" THEN
    PRINT "high count:";
    PRINT USING "####.##"; b(12);
    PRINT " low count:";
    PRINT USING "####.##"; b(13);
    PRINT " av count:";
END IF
IF ezc% <> 1 OR z$ <> "" THEN
    PRINT USING "###.##"; b(8) / rn&&;
    REM average product of the bet count multiplied by the wager
    PRINT " av count*wager:";
    PRINT USING "###.##"; b(10) / b(11)
END IF
PRINT "table minimum is"; mini&; " table maximum is"; maxi&
IF limpoi% = 1 THEN
    PRINT "player opts to limit bets to a spread of ";
    PRINT sml&; " and"; lrg&; " credits"
END IF
IF limper% = 1 THEN
    PRINT "player opts to limit bets to between ";
    PRINT lobet; "% and "; hibet; "% of purse";
END IF
IF expo% = 1 THEN
    PRINT multiplier;
    PRINT "multiplied by ";
    PRINT factor;
    PRINT "raised to the power of";
    PRINT USING "####.##"; b(7);
    PRINT " yields a bet of"; b(21)
END IF
IF multi% = 1 THEN
    PRINT "a base of"; factor;
    PRINT "multiplied by ";
    PRINT USING "####.##"; b(7);
    PRINT " yields a bet of"; b(21)
END IF
IF pbs% = 1 THEN
    PRINT "plateau betting multiplies by";
    PRINT INT(b(37) / pbs * 100) / 100;
    PRINT "to yield a bet rounded to"; bet&
END IF
IF propor% = 1 THEN
    PRINT "proportional betting multiplies by";
    PRINT INT(b(2) / pbs * 100) / 100;
    PRINT "to yield a bet rounded to"; bet&
END IF
PRINT "dealer cards are "; dc(1); CHR$(dcs(1));
PRINT " "; dc(2); CHR$(dcs(2)); ", and biggest wager yet is"; bigbet&
PRINT "player cards are "; pc1%; CHR$(ps1%);
PRINT " "; pc2%; CHR$(ps2%); "    player response is ";
IF pc1% + pc2% < h(r(n%, dn)) - 14 THEN
    PRINT MID$(o$, r(n%, dn) * 5 + 1, 5)
END IF
IF pc1% + pc2% > h(r(n%, dn)) - 15 THEN
    PRINT MID$(n$, r(n%, dn) * 5 + 1, 5)
END IF
PRINT "expected value of player response is                       ";
PRINT USING "####.##"; b(5) * 100;: PRINT "%"
PRINT "expected value of game is                                  ";
PRINT USING "####.##"; b(6) * 100;: PRINT "%"
PRINT "dealer cards are as follows     ";
FOR x = 1 TO dc(0)
PRINT dc(x); CHR$(dcs(x)); " ";: NEXT x: PRINT " "
FOR x = 1 TO phc(0, 0)
    PRINT "player cards for hand "; x; " are   ";
    FOR y = 1 TO phc(0, x)
PRINT phc(x, y); CHR$(psc(x, y)); " ";: NEXT y: PRINT " ": NEXT x
PRINT "      player hand(s): ";
FOR x = 1 TO phc(0, 0)
    PRINT phc(x, 0); " ";
NEXT x
PRINT "                     house hand: "; dh(1)
PRINT "house won:  ";: PRINT USING "######.#"; b(25) / 2
PRINT "player won: ";: PRINT USING "######.#"; b(23) / 2
PRINT "total number of wagers won by house   :   ";
PRINT USING "##########.#"; b(27) / 2
PRINT "total number of wagers won by player  :   ";
PRINT USING "##########.#"; b(26) / 2
PRINT "player is winning ";
PRINT USING "###.##"; b(26) / (b(26) + b(27) + 1E-08) * 100;
PRINT "% of all wagers won     ROUND NUMBER "; rn&&; ""
PRINT "total number of credits won by house  :";
PRINT USING "#############.#"; b(24) / 2:
PRINT "total number of credits won by player :";
PRINT USING "#############.#"; b(22) / 2
PRINT "player is winning ";
PRINT USING "###.##"; b(22) / (b(22) + b(24) + 1E-08) * 100;
PRINT "% of all credits won      reshuffles "; b(14); ""
PRINT "finish purse ";
PRINT USING "########.#"; b(2);
PRINT " high ";: PRINT USING "########.#"; b(37);
PRINT " low ";: PRINT USING "########.#"; b(36);
PRINT " largest drop ";: PRINT USING "########.#"; drop
PRINT "change in purse is an average of ";
PRINT USING "##########.##"; b(31);
PRINT " credits after "; scr&; " rounds"
PRINT "one standard deviation equal to  ";
PRINT USING "##########.##"; SQR(b(33) / INT(rn&& / scr&));
PRINT " credits"
v$ = files$ + "o.txt"
OPEN v$ FOR APPEND AS #1
IF rps% = 0 THEN
    PRINT #1, "number of cards is"; deck% * mc(14); " ";
    PRINT #1, card(14); "cards remain to be played";
    PRINT #1, "  reshuffle is at"; INT(shf / 100 * deck% * mc(14))
END IF
IF rps% <> 0 THEN
    PRINT #1, "number of cards is"; deck% * mc(14); " ";
    PRINT #1, card(14); "cards remain to be played";
    PRINT #1, "  reshuffle after"; rps%; "rounds"
END IF
PRINT #1, "card count:";
PRINT #1, USING "####.##"; cv(14);
IF true% = 1 THEN
    PRINT #1, "  true count:";
    PRINT #1, USING "####.##"; standin;
END IF
PRINT #1, "  constant added:";
PRINT #1, USING "###.##"; constant;
PRINT #1, "  bet count:";
PRINT #1, USING "####.##"; b(7)
IF ezc% <> 1 OR z$ <> "" THEN
    PRINT #1, "high count:";
    PRINT #1, USING "####.##"; b(12);
    PRINT #1, " low count:";
    PRINT #1, USING "####.##"; b(13);
    PRINT #1, " av count:";
END IF
IF ezc% <> 1 OR z$ <> "" THEN
    PRINT #1, USING "###.##"; b(8) / rn&&;
    PRINT #1, " av count*wager:";
    PRINT #1, USING "###.##"; b(10) / b(11)
END IF
PRINT #1, "table minimum is"; mini&; " table maximum is"; maxi&
IF limpoi% = 1 THEN
    PRINT #1, "player opts to limit bets to a spread of ";
    PRINT #1, sml&; " and"; lrg&; " credits"
END IF
IF limper% = 1 THEN
    PRINT #1, "player opts to limit bets to between "; lobet;
    PRINT #1, "% and "; hibet; "% of purse";
END IF
IF expo% = 1 THEN
    PRINT #1, multiplier;
    PRINT #1, "multiplied by ";
    PRINT #1, factor;
    PRINT #1, "raised to the power of";
    PRINT #1, USING "####.##"; b(7);
    PRINT #1, " yields a bet of"; b(21)
END IF
IF multi% = 1 THEN
    PRINT #1, "a base of"; factor;
    PRINT #1, "multiplied by ";
    PRINT #1, USING "####.##"; b(7);
    PRINT #1, " yields a bet of"; b(21)
END IF
IF pbs% = 1 THEN
    PRINT #1, "plateau betting multiplies by";
    PRINT #1, INT(b(37) / pbs * 100) / 100;
    PRINT #1, "to yield a bet rounded to"; bet&
END IF
IF propor% = 1 THEN
    PRINT #1, "proportional betting multiplies by";
    PRINT #1, INT(b(2) / pbs * 100) / 100;
    PRINT #1, "to yield a bet rounded to"; bet&
END IF
dcsp(1) = suitp(dcs(1))
dcsp(2) = suitp(dcs(2))
ps1% = suitp(ps1%)
ps2% = suitp(ps2%)
PRINT #1, "dealer cards are ";
PRINT #1, dc(1); CHR$(dcsp(1)); " "; dc(2); CHR$(dcsp(2));
PRINT #1, ", and biggest wager yet is"; bigbet&
PRINT #1, "player cards are ";
PRINT #1, pc1%; CHR$(ps1%); " "; pc2%; CHR$(ps2%);
PRINT #1, "    player response is ";
IF pc1% + pc2% < h(r(n%, dn)) - 14 THEN
    PRINT #1, MID$(o$, r(n%, dn) * 5 + 1, 5)
END IF
IF pc1% + pc2% > h(r(n%, dn)) - 15 THEN
    PRINT #1, MID$(n$, r(n%, dn) * 5 + 1, 5)
END IF
PRINT #1, "expected value of player response is                       ";
PRINT #1, USING "####.##"; b(5) * 100;: PRINT #1, "%"
PRINT #1, "expected value of game is                                  ";
PRINT #1, USING "####.##"; b(6) * 100;: PRINT #1, "%"
PRINT #1, "dealer cards are as follows     ";
FOR x = 1 TO dc(0)
    dcsp(x) = suitp(dcs(x))
PRINT #1, dc(x); CHR$(dcsp(x)); " ";: NEXT x: PRINT #1, " "
FOR x = 1 TO phc(0, 0)
    PRINT #1, "player cards for hand "; x; " are   ";
    FOR y = 1 TO phc(0, x)
        pscp(x, y) = suitp(psc(x, y))
        PRINT #1, phc(x, y); CHR$(pscp(x, y)); " ";
    NEXT y
    PRINT #1, " "
NEXT x
PRINT #1, "      player hand(s): ";
FOR x = 1 TO phc(0, 0)
    PRINT #1, phc(x, 0); " ";
NEXT x
PRINT #1, "                     house hand: "; dh(1)
PRINT #1, "house won:  ";: PRINT #1, USING "######.#"; b(25) / 2
PRINT #1, "player won: ";: PRINT #1, USING "######.#"; b(23) / 2
PRINT #1, "total number of wagers won by house   :   ";
PRINT #1, USING "##########.#"; b(27) / 2
PRINT #1, "total number of wagers won by player  :   ";
PRINT #1, USING "##########.#"; b(26) / 2
PRINT #1, "player is winning ";
PRINT #1, USING "###.##"; b(26) / (b(26) + b(27) + 1E-08) * 100;
PRINT #1, "% of all wagers won     ROUND NUMBER "; rn&&; ""
PRINT #1, "total number of credits won by house  :";
PRINT #1, USING "#############.#"; b(24) / 2
PRINT #1, "total number of credits won by player :";
PRINT #1, USING "#############.#"; b(22) / 2
PRINT #1, "player is winning ";
PRINT #1, USING "###.##"; b(22) / (b(22) + b(24) + 1E-08) * 100;
PRINT #1, "% of all credits won      reshuffles "; b(14); ""
PRINT #1, "finish purse ";
PRINT #1, USING "########.#"; b(2);
PRINT #1, " high ";
PRINT #1, USING "########.#"; b(37);
PRINT #1, " low ";
PRINT #1, USING "########.#"; b(36);
PRINT #1, " largest drop ";
PRINT #1, USING "########.#"; drop
PRINT #1, "change in purse is an average of ";
PRINT #1, USING "##########.##"; b(31);
PRINT #1, " credits after "; scr&; " rounds"
PRINT #1, "one standard deviation equal to  ";
PRINT #1, USING "##########.##"; SQR(b(33) / INT(rn&& / scr&));
PRINT #1, " credits"
PRINT #1, ""
IF ezc% <> 1 THEN
    PRINT #1, "values added to the running count as each ";
    PRINT #1, "card of a given denomination was played"
    PRINT #1, "and then removed from the stack during ";
    PRINT #1, "this game simulation were as follows:"
    PRINT #1, ""
    FOR x = 0 TO 13
        IF mc(0) = 0 AND x = 0 THEN x = 1
        PRINT #1, USING "##"; x;
        PRINT #1, "    = ";
        PRINT #1, USING "####.###"; cv(x);
        IF bal% = 1 THEN
            PRINT #1, "          Balanced ";
            PRINT #1, USING "##"; x;
            PRINT #1, "    = ";
            PRINT #1, USING "####.###"; gv(x)
        END IF
        IF bal% <> 1 THEN PRINT #1, ""
    NEXT x
    PRINT #1, ""
    PRINT #1, "TOTAL = ";: PRINT #1, USING "####.###"; ev(14);
    IF bal% = 1 THEN
        PRINT #1, "          Balanced TOTAL = ";
        PRINT #1, USING "####.###"; 0
    END IF
    PRINT #1, ""
END IF
IF ezc% = 1 THEN
    PRINT #1, "Change in expected value of the game wager caused"
    PRINT #1, "by the removal of one card of a given denomination "
    PRINT #1, "from the stack during this game simulation."
    PRINT #1, ""
    FOR x = 0 TO 13
        IF mc(0) = 0 AND x = 0 THEN x = 1
        PRINT #1, USING "##"; x;
        PRINT #1, "    = ";
        PRINT #1, USING "####.###"; cv(x);
        IF bal% = 1 THEN
            PRINT #1, "          Balanced ";
            PRINT #1, USING "##"; x;
            PRINT #1, "    = ";
            PRINT #1, USING "####.###"; gv(x)
        END IF
        IF bal% <> 1 THEN PRINT #1, ""
    NEXT x
    PRINT #1, ""
    PRINT #1, "TOTAL = ";
    PRINT #1, USING "####.###"; ev(14);
    IF bal% = 1 THEN
        PRINT #1, "          Balanced TOTAL = ";
        PRINT #1, USING "####.###"; 0
    END IF
    IF bal <> 1 THEN PRINT #1, ""
END IF
PRINT #1, ""
PRINT #1, "The user defined set of game rules for this simulation ";
PRINT #1, "are described as follows:"
PRINT #1, ""
PRINT #1, q$
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying the number of hands"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each hand has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(60) - b(63) + b(62) - b(65) + b(64) - b(101) + b(100)
b(55) = b(66) - b(69) + b(68) - b(71) + b(70) - b(73) + b(72)
b(56) = b(75) - b(74) - b(77) + b(76) - b(79) + b(78) - b(103) + b(102)
b(57) = b(54) + b(55) + b(56)
b(136) = b(113) - b(112)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(101) - b(100)
b(55) = b(71) - b(70)
b(56) = b(103) - b(102)
b(57) = b(54) + b(55) + b(56)
b(136) = b(119) - b(118)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(65) - b(64)
b(55) = b(73) - b(72)
b(56) = b(79) - b(78)
b(57) = b(54) + b(55) + b(56)
b(136) = b(125) - b(124)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(63) - b(62)
b(55) = b(69) - b(68)
b(56) = b(77) - b(76)
b(57) = b(54) + b(55) + b(56)
b(136) = b(131) - b(130)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(60)
b(55) = b(66)
b(56) = b(75) - b(74)
b(57) = b(54) + b(55) + b(56)
b(136) = b(81) - b(80)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying the percentage of hands"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each hand has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(60) - b(63) + b(62) - b(65) + b(64) - b(101) + b(100)
b(55) = b(66) - b(69) + b(68) - b(71) + b(70) - b(73) + b(72)
b(56) = b(75) - b(74) - b(77) + b(76) - b(79) + b(78) - b(103) + b(102)
b(57) = b(54) + b(55) + b(56)
b(136) = b(113) - b(112)
b(54) = b(54) / (b(60) + b(66) + b(75) - b(74)) * 100
b(55) = b(55) / (b(60) + b(66) + b(75) - b(74)) * 100
b(56) = b(56) / (b(60) + b(66) + b(75) - b(74)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(60) + b(66) + b(75) - b(74)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(101) - b(100)
b(55) = b(71) - b(70)
b(56) = b(103) - b(102)
b(57) = b(54) + b(55) + b(56)
b(136) = b(119) - b(118)
b(54) = b(54) / (b(60) + b(66) + b(75) - b(74)) * 100
b(55) = b(55) / (b(60) + b(66) + b(75) - b(74)) * 100
b(56) = b(56) / (b(60) + b(66) + b(75) - b(74)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(60) + b(66) + b(75) - b(74)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(65) - b(64)
b(55) = b(73) - b(72)
b(56) = b(79) - b(78)
b(57) = b(54) + b(55) + b(56)
b(136) = b(125) - b(124)
b(54) = b(54) / (b(60) + b(66) + b(75) - b(74)) * 100
b(55) = b(55) / (b(60) + b(66) + b(75) - b(74)) * 100
b(56) = b(56) / (b(60) + b(66) + b(75) - b(74)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(60) + b(66) + b(75) - b(74)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(63) - b(62)
b(55) = b(69) - b(68)
b(56) = b(77) - b(76)
b(57) = b(54) + b(55) + b(56)
b(136) = b(131) - b(130)
b(54) = b(54) / (b(60) + b(66) + b(75) - b(74)) * 100
b(55) = b(55) / (b(60) + b(66) + b(75) - b(74)) * 100
b(56) = b(56) / (b(60) + b(66) + b(75) - b(74)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(60) + b(66) + b(75) - b(74)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(60)
b(55) = b(66)
b(56) = b(75) - b(74)
b(57) = b(54) + b(55) + b(56)
b(136) = b(81) - b(80)
b(54) = b(54) / (b(60) + b(66) + b(75) - b(74)) * 100
b(55) = b(55) / (b(60) + b(66) + b(75) - b(74)) * 100
b(56) = b(56) / (b(60) + b(66) + b(75) - b(74)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(60) + b(66) + b(75) - b(74)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
REM (flat betting)
PRINT #1, "The following is a table displaying the number of game wagers"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each game wager has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(26) - b(45) + b(52) - b(20) + b(51) - b(105) + b(104)
b(55) = b(27) - b(46) + b(53) - b(19) + b(50) - b(34) + b(35)
b(56) = b(0) - b(47) - b(1) + b(48) - b(58) + b(59) - b(107) + b(106)
b(57) = b(54) + b(55) + b(56)
b(136) = b(115) - b(114)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(105) - b(104)
b(55) = b(19) - b(50)
b(56) = b(107) - b(106)
b(57) = b(54) + b(55) + b(56)
b(136) = b(121) - b(120)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(20) - b(51)
b(55) = b(34) - b(35)
b(56) = b(58) - b(59)
b(57) = b(54) + b(55) + b(56)
b(136) = b(127) - b(126)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(45) - b(52)
b(55) = b(46) - b(53)
b(56) = b(1) - b(48)
b(57) = b(54) + b(55) + b(56)
b(136) = b(133) - b(132)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(26)
b(55) = b(27)
b(56) = b(0) - b(47)
b(57) = b(54) + b(55) + b(56)
b(136) = b(3) - b(49)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying ";
PRINT #1, "the percentage of game wagers"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each game wager has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(26) - b(45) + b(52) - b(20) + b(51) - b(105) + b(104)
b(55) = b(27) - b(46) + b(53) - b(19) + b(50) - b(34) + b(35)
b(56) = b(0) - b(47) - b(1) + b(48) - b(58) + b(59) - b(107) + b(106)
b(57) = b(54) + b(55) + b(56)
b(136) = b(115) - b(114)
b(54) = b(54) / (b(26) + b(27) + b(0) - b(47)) * 100
b(55) = b(55) / (b(26) + b(27) + b(0) - b(47)) * 100
b(56) = b(56) / (b(26) + b(27) + b(0) - b(47)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(26) + b(27) + b(0) - b(47)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(105) - b(104)
b(55) = b(19) - b(50)
b(56) = b(107) - b(106)
b(57) = b(54) + b(55) + b(56)
b(136) = b(121) - b(120)
b(54) = b(54) / (b(26) + b(27) + b(0) - b(47)) * 100
b(55) = b(55) / (b(26) + b(27) + b(0) - b(47)) * 100
b(56) = b(56) / (b(26) + b(27) + b(0) - b(47)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(26) + b(27) + b(0) - b(47)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(20) - b(51)
b(55) = b(34) - b(35)
b(56) = b(58) - b(59)
b(57) = b(54) + b(55) + b(56)
b(136) = b(127) - b(126)
b(54) = b(54) / (b(26) + b(27) + b(0) - b(47)) * 100
b(55) = b(55) / (b(26) + b(27) + b(0) - b(47)) * 100
b(56) = b(56) / (b(26) + b(27) + b(0) - b(47)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(26) + b(27) + b(0) - b(47)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(45) - b(52)
b(55) = b(46) - b(53)
b(56) = b(1) - b(48)
b(57) = b(54) + b(55) + b(56)
b(136) = b(133) - b(132)
b(54) = b(54) / (b(26) + b(27) + b(0) - b(47)) * 100
b(55) = b(55) / (b(26) + b(27) + b(0) - b(47)) * 100
b(56) = b(56) / (b(26) + b(27) + b(0) - b(47)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(26) + b(27) + b(0) - b(47)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(26)
b(55) = b(27)
b(56) = b(0) - b(47)
b(57) = b(54) + b(55) + b(56)
b(136) = b(3) - b(49)
b(54) = b(54) / (b(26) + b(27) + b(0) - b(47)) * 100
b(55) = b(55) / (b(26) + b(27) + b(0) - b(47)) * 100
b(56) = b(56) / (b(26) + b(27) + b(0) - b(47)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(26) + b(27) + b(0) - b(47)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
REM (Results of the user-defined betting strategy)
PRINT #1, "The following is a table displaying the number of credits"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each credit has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(22) - b(83) + b(82) - b(85) + b(84) - b(109) + b(108)
b(55) = b(24) - b(87) + b(86) - b(89) + b(88) - b(91) + b(90)
b(56) = b(93) - b(92) - b(95) + b(94) - b(97) + b(96) - b(111) + b(110)
b(57) = b(54) + b(55) + b(56)
b(136) = b(117) - b(116)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(109) - b(108)
b(55) = b(89) - b(88)
b(56) = b(111) - b(110)
b(57) = b(54) + b(55) + b(56)
b(136) = b(123) - b(122)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(85) - b(84)
b(55) = b(91) - b(90)
b(56) = b(97) - b(96)
b(57) = b(54) + b(55) + b(56)
b(136) = b(129) - b(128)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(83) - b(82)
b(55) = b(87) - b(86)
b(56) = b(95) - b(94)
b(57) = b(54) + b(55) + b(56)
b(136) = b(135) - b(134)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(22)
b(55) = b(24)
b(56) = b(93) - b(92)
b(57) = b(54) + b(55) + b(56)
b(136) = b(99) - b(98)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying ";
PRINT #1, "the percentage of credits"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each credit has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(22) - b(83) + b(82) - b(85) + b(84) - b(109) + b(108)
b(55) = b(24) - b(87) + b(86) - b(89) + b(88) - b(91) + b(90)
b(56) = b(93) - b(92) - b(95) + b(94) - b(97) + b(96) - b(111) + b(110)
b(57) = b(54) + b(55) + b(56)
b(136) = b(117) - b(116)
b(54) = b(54) / (b(22) + b(24) + b(93) - b(92)) * 100
b(55) = b(55) / (b(22) + b(24) + b(93) - b(92)) * 100
b(56) = b(56) / (b(22) + b(24) + b(93) - b(92)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(22) + b(24) + b(93) - b(92)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(109) - b(108)
b(55) = b(89) - b(88)
b(56) = b(111) - b(110)
b(57) = b(54) + b(55) + b(56)
b(136) = b(123) - b(122)
b(54) = b(54) / (b(22) + b(24) + b(93) - b(92)) * 100
b(55) = b(55) / (b(22) + b(24) + b(93) - b(92)) * 100
b(56) = b(56) / (b(22) + b(24) + b(93) - b(92)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(22) + b(24) + b(93) - b(92)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(85) - b(84)
b(55) = b(91) - b(90)
b(56) = b(97) - b(96)
b(57) = b(54) + b(55) + b(56)
b(136) = b(129) - b(128)
b(54) = b(54) / (b(22) + b(24) + b(93) - b(92)) * 100
b(55) = b(55) / (b(22) + b(24) + b(93) - b(92)) * 100
b(56) = b(56) / (b(22) + b(24) + b(93) - b(92)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(22) + b(24) + b(93) - b(92)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(83) - b(82)
b(55) = b(87) - b(86)
b(56) = b(95) - b(94)
b(57) = b(54) + b(55) + b(56)
b(136) = b(135) - b(134)
b(54) = b(54) / (b(22) + b(24) + b(93) - b(92)) * 100
b(55) = b(55) / (b(22) + b(24) + b(93) - b(92)) * 100
b(56) = b(56) / (b(22) + b(24) + b(93) - b(92)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(22) + b(24) + b(93) - b(92)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(22)
b(55) = b(24)
b(56) = b(93) - b(92)
b(57) = b(54) + b(55) + b(56)
b(136) = b(99) - b(98)
b(54) = b(54) / (b(22) + b(24) + b(93) - b(92)) * 100
b(55) = b(55) / (b(22) + b(24) + b(93) - b(92)) * 100
b(56) = b(56) / (b(22) + b(24) + b(93) - b(92)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(22) + b(24) + b(93) - b(92)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
IF b27po% = 1 OR jojo% = 1 OR bshw% = 1 OR joanca% = 1 THEN
    PRINT #1, ""
    PRINT #1, "The following table displays information ";
    PRINT #1, "gathered during the simulation about"
    PRINT #1, "the number of times the dealer paid the ";
    PRINT #1, "player for obtaining each of a set of"
    PRINT #1, "user-defined predetermined winning card ";
    PRINT #1, "combinations and the bonus payoff if any."
    PRINT #1, ""
    PRINT #1, "Card Combination      Number             Bonus Payoff"
END IF
IF jojo% = 1 THEN
    PRINT #1, ""
    PRINT #1, "joker joker    ";
    PRINT #1, USING "#############"; mc27po(15, 1) - mc27po(15, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; jojopo - 1;
    IF ptm(14) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(14) = 1 THEN PRINT #1, " times table minimum"
END IF
IF bshw% = 1 THEN
    PRINT #1, ""
    PRINT #1, "ace and king   ";
    PRINT #1, USING "#############"; mc27po(13, 1) - mc27po(13, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; bigslick - 1;
    IF ptm(15) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(15) = 1 THEN PRINT #1, " times table minimum"
END IF
IF bssh% = 1 THEN
    PRINT #1, "after a split  ";
    PRINT #1, USING "#############"; mc27po(14, 1) - mc27po(14, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; bigslick - 1;
    IF ptm(15) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(15) = 1 THEN PRINT #1, " times table minimum"
END IF
IF joanca% = 1 THEN
    PRINT #1, ""
    PRINT #1, "joker any card ";
    PRINT #1, USING "#############"; mc27po(16, 1) - mc27po(16, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; joancapo - 1;
    IF ptm(16) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(16) = 1 THEN PRINT #1, " times table minimum"
END IF
IF joancash% = 1 THEN
    PRINT #1, "after a split  ";
    PRINT #1, USING "#############"; mc27po(17, 1) - mc27po(17, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; joancapo - 1;
    IF ptm(16) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(16) = 1 THEN PRINT #1, " times table minimum"
END IF
PRINT #1, ""
IF mc27po(4, 0) <> 0 THEN
    PRINT #1, "6 Card 27      ";
    PRINT #1, USING "#############"; mc27po(4, 1) - mc27po(4, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(4, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(5, 0) <> 0 THEN
    PRINT #1, "7 Card 27      ";
    PRINT #1, USING "#############"; mc27po(5, 1) - mc27po(5, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(5, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(6, 0) <> 0 THEN
    PRINT #1, "8 Card 27      ";
    PRINT #1, USING "#############"; mc27po(6, 1) - mc27po(6, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(6, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(7, 0) <> 0 THEN
    PRINT #1, "9 Card 27      ";
    PRINT #1, USING "#############"; mc27po(7, 1) - mc27po(7, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(7, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF ms89T <> 0 THEN
    PRINT #1, "89T mixed suits";
    PRINT #1, USING "#############"; mc27po(8, 1) - mc27po(8, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ms89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
END IF
IF ss89T <> 0 THEN
    PRINT #1, "89T same suit  ";
    PRINT #1, USING "#############"; mc27po(9, 1) - mc27po(9, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ss89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
END IF
IF sp89T <> 0 THEN
    PRINT #1, "89T spades suit";
    PRINT #1, USING "#############"; mc27po(10, 1) - mc27po(10, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; sp89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF ms999 <> 0 THEN
    PRINT #1, "999 mixed suits";
    PRINT #1, USING "#############"; mc27po(1, 1) - mc27po(1, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ms999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF ss999 <> 0 THEN
    PRINT #1, "999 same suit  ";
    PRINT #1, USING "#############"; mc27po(2, 1) - mc27po(2, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ss999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF sp999 <> 0 THEN
    PRINT #1, "ms999+dealer 99";
    PRINT #1, USING "#############"; mc27po(3, 1) - mc27po(3, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; sp999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF jp999 <> 0 THEN
    PRINT #1, "ss999+dealer 99";
    PRINT #1, USING "#############"; mc27po(11, 1) - mc27po(11, 2);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; jp999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF nchw% = 1 THEN
    PRINT #1, "9 card hand win";
    PRINT #1, USING "#############"; mc27po(12, 1) - mc27po(12, 2);
    PRINT #1, "             ";
    q4# = mc27po(12, 0) / (mc27po(12, 1) + 1E-08)
    PRINT #1, USING "##########.#"; q4#;
    PRINT #1, " : 1 Odds "
END IF
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
IF pbonus% = 1 THEN
    phr(11, 0) = 0
    phr(11, 1) = 0
    phr(11, 2) = 0
    FOR x = 0 TO 10
        phr(11, 0) = phr(11, 0) + phr(x, 0)
        phr(11, 1) = phr(11, 1) + phr(x, 1)
        phr(11, 2) = phr(11, 2) + phr(x, 2)
    NEXT x
    PRINT #1, "The user defined set of game rules is described as follows:"
    PRINT #1, ""
    PRINT #1, q$
    PRINT #1, ""
    PRINT #1, "The following is a table displaying information gathered ";
    PRINT #1, "during simulation"
    PRINT #1, "about the best category of five-card-poker hand made from ";
    PRINT #1, "a choice of five"
    PRINT #1, "of the playing cards in each of those player hands that ";
    PRINT #1, "won the game."
    PRINT #1, "For each category, the table includes data about the ";
    PRINT #1, "number of hands made,"
    PRINT #1, "the number of hands made that ranked higher than the ";
    PRINT #1, "best category of five-"
    PRINT #1, "-card-poker hand made during the same game by the dealer, ";
    PRINT #1, "the number hands"
    PRINT #1, "made that ranked not higher than the best category of ";
    PRINT #1, "five-card-poker hand"
    PRINT #1, "made during the same game by the dealer, and the size ";
    PRINT #1, "of the bonus payout."
    PRINT #1,
    PRINT #1, "Hand Category          Number      Higher  Not Higher    ";
    PRINT #1, "Bonus Payout"
    PRINT #1, ""
    PRINT #1, "Not enough cards ";
    PRINT #1, USING "############"; phr(10, 2) - phr(10, 7)
    PRINT #1, "High Card        ";
    PRINT #1, USING "############"; phr(0, 2) - phr(0, 7);
    PRINT #1, USING "############"; phr(0, 1) - phr(0, 6);
    PRINT #1, USING "############"; phr(0, 0) - phr(0, 5);
    PRINT #1, USING "#####.#"; phpo(0);
    IF ptm(0) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(0) = 1 THEN PRINT #1, " times table minimum"
    FOR y = 1 TO 9
        IF y = phrank(1) / 1000000 THEN
            PRINT #1, "One Pair         ";
            PRINT #1, USING "############"; phr(1, 2) - phr(1, 7);
            PRINT #1, USING "############"; phr(1, 1) - phr(1, 6);
            PRINT #1, USING "############"; phr(1, 0) - phr(1, 5);
            PRINT #1, USING "#####.#"; phpo(1);
            IF ptm(1) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(1) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(2) / 1000000 THEN
            PRINT #1, "Two Pair         ";
            PRINT #1, USING "############"; phr(2, 2) - phr(2, 7);
            PRINT #1, USING "############"; phr(2, 1) - phr(2, 6);
            PRINT #1, USING "############"; phr(2, 0) - phr(2, 5);
            PRINT #1, USING "#####.#"; phpo(2);
            IF ptm(2) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(2) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(3) / 1000000 THEN
            PRINT #1, "Three of a Kind  ";
            PRINT #1, USING "############"; phr(3, 2) - phr(3, 7);
            PRINT #1, USING "############"; phr(3, 1) - phr(3, 6);
            PRINT #1, USING "############"; phr(3, 0) - phr(3, 5);
            PRINT #1, USING "#####.#"; phpo(3);
            IF ptm(3) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(3) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(4) / 1000000 THEN
            PRINT #1, "Straight         ";
            PRINT #1, USING "############"; phr(4, 2) - phr(4, 7);
            PRINT #1, USING "############"; phr(4, 1) - phr(4, 6);
            PRINT #1, USING "############"; phr(4, 0) - phr(4, 5);
            PRINT #1, USING "#####.#"; phpo(4);
            IF ptm(4) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(4) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(5) / 1000000 THEN
            PRINT #1, "Flush            ";
            PRINT #1, USING "############"; phr(5, 2) - phr(5, 7);
            PRINT #1, USING "############"; phr(5, 1) - phr(5, 6);
            PRINT #1, USING "############"; phr(5, 0) - phr(5, 5);
            PRINT #1, USING "#####.#"; phpo(5);
            IF ptm(5) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(5) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(6) / 1000000 THEN
            PRINT #1, "Full House       ";
            PRINT #1, USING "############"; phr(6, 2) - phr(6, 7);
            PRINT #1, USING "############"; phr(6, 1) - phr(6, 6);
            PRINT #1, USING "############"; phr(6, 0) - phr(6, 5);
            PRINT #1, USING "#####.#"; phpo(6);
            IF ptm(6) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(6) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(7) / 1000000 THEN
            PRINT #1, "Four of a Kind   ";
            PRINT #1, USING "############"; phr(7, 2) - phr(7, 7);
            PRINT #1, USING "############"; phr(7, 1) - phr(7, 6);
            PRINT #1, USING "############"; phr(7, 0) - phr(7, 5);
            PRINT #1, USING "#####.#"; phpo(7);
            IF ptm(7) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(7) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(8) / 1000000 THEN
            PRINT #1, "Five of a Kind   ";
            PRINT #1, USING "############"; phr(8, 2) - phr(8, 7);
            PRINT #1, USING "############"; phr(8, 1) - phr(8, 6);
            PRINT #1, USING "############"; phr(8, 0) - phr(8, 5);
            PRINT #1, USING "#####.#"; phpo(8);
            IF ptm(8) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(8) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(9) / 1000000 THEN
            PRINT #1, "Straight Flush   ";
            PRINT #1, USING "############"; phr(9, 2) - phr(9, 7);
            PRINT #1, USING "############"; phr(9, 1) - phr(9, 6);
            PRINT #1, USING "############"; phr(9, 0) - phr(9, 5);
            PRINT #1, USING "#####.#"; phpo(9);
            IF ptm(9) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(9) = 1 THEN PRINT #1, " times table minimum"
        END IF
    NEXT y
    PRINT #1, ""
    PRINT #1, "Total           ";
    PRINT #1, USING "#############"; phr(11, 2) - phr(11, 7);
    PRINT #1, USING "############"; phr(11, 1) - phr(11, 6);
    PRINT #1, USING "############"; phr(11, 0) - phr(11, 5)
    PRINT #1, ""
    IF track% = 1 THEN
        phr(11, 3) = 0: phr(11, 4) = 0
        FOR x = 0 TO 10
            phr(11, 3) = phr(11, 3) + phr(x, 3)
            phr(11, 4) = phr(11, 4) + phr(x, 4)
        NEXT x
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, "The following is a table displaying information ";
        PRINT #1, "gathered during "
        PRINT #1, "simulation about the best category of five card ";
        PRINT #1, "poker hand made "
        PRINT #1, "from a choice of five of the playing cards in each ";
        PRINT #1, "player hand "
        PRINT #1, "and information gathered during simulation about ";
        PRINT #1, "the best category"
        PRINT #1, "of five card poker hand made from a choice of five ";
        PRINT #1, "of the playing"
        PRINT #1, "cards in each dealer hand. For each category, the ";
        PRINT #1, "table includes"
        PRINT #1, "data about the number of hands made."
        PRINT #1,
        PRINT #1, "Hand Category                      ";
        PRINT #1, "Player                      Dealer"
        PRINT #1, ""
        PRINT #1, "Not enough cards             ";
        PRINT #1, USING "############"; phr(10, 4) - phr(10, 9);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(10, 3) - phr(10, 8)
        PRINT #1, "High Card                    ";
        PRINT #1, USING "############"; phr(0, 4) - phr(0, 9);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(0, 3) - phr(0, 8)
        FOR y = 1 TO 9
            IF y = phrank(1) / 1000000 THEN
                PRINT #1, "One Pair                     ";
                PRINT #1, USING "############"; phr(1, 4) - phr(1, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(1, 3) - phr(1, 8)
            END IF
            IF y = phrank(2) / 1000000 THEN
                PRINT #1, "Two Pair                     ";
                PRINT #1, USING "############"; phr(2, 4) - phr(2, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(2, 3) - phr(2, 8)
            END IF
            IF y = phrank(3) / 1000000 THEN
                PRINT #1, "Three of a Kind              ";
                PRINT #1, USING "############"; phr(3, 4) - phr(3, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(3, 3) - phr(3, 8)
            END IF
            IF y = phrank(4) / 1000000 THEN
                PRINT #1, "Straight                     ";
                PRINT #1, USING "############"; phr(4, 4) - phr(4, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(4, 3) - phr(4, 8)
            END IF
            IF y = phrank(5) / 1000000 THEN
                PRINT #1, "Flush                        ";
                PRINT #1, USING "############"; phr(5, 4) - phr(5, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(5, 3) - phr(5, 8)
            END IF
            IF y = phrank(6) / 1000000 THEN
                PRINT #1, "Full House                   ";
                PRINT #1, USING "############"; phr(6, 4) - phr(6, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(6, 3) - phr(6, 8)
            END IF
            IF y = phrank(7) / 1000000 THEN
                PRINT #1, "Four of a Kind               ";
                PRINT #1, USING "############"; phr(7, 4) - phr(7, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(7, 3) - phr(7, 8)
            END IF
            IF y = phrank(8) / 1000000 THEN
                PRINT #1, "Five of a Kind               ";
                PRINT #1, USING "############"; phr(8, 4) - phr(8, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(8, 3) - phr(8, 8)
            END IF
            IF y = phrank(9) / 1000000 THEN
                PRINT #1, "Straight Flush               ";
                PRINT #1, USING "############"; phr(9, 4) - phr(9, 9);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(9, 3) - phr(9, 8)
            END IF
        NEXT y
        PRINT #1, ""
        PRINT #1, "Total                        ";
        PRINT #1, USING "############"; phr(11, 4) - phr(11, 9);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(11, 3) - phr(11, 8)
        FOR x = 0 TO 11
            FOR y = 3 TO 4
                phr(x, y + 5) = phr(x, y)
        NEXT y: NEXT x
    END IF
    IF dqfcphw% = 1 THEN
        phr(11, 10) = 0
        FOR x = 0 TO 10
            phr(11, 10) = phr(11, 10) + phr(x, 10)
        NEXT x
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, "The following is a table displaying information ";
        PRINT #1, "gathered during simulation"
        PRINT #1, "about the best category of five card poker hand ";
        PRINT #1, "made from a choice of five"
        PRINT #1, "of the cards in each of those dealer hands with ";
        PRINT #1, "a numerical sum value of "
        PRINT #1, "less than twenty-eight points. For each category, ";
        PRINT #1, "the table includes data "
        PRINT #1, "about the number of hands made."
        PRINT #1,
        PRINT #1, "Hand Category                      ";
        PRINT #1, "Dealer < 28"
        PRINT #1, ""
        PRINT #1, "Not enough cards             ";
        PRINT #1, USING "############"; phr(10, 10) - phr(10, 11)
        PRINT #1, "High Card                    ";
        PRINT #1, USING "############"; phr(0, 10) - phr(0, 11)
        FOR y = 1 TO 9
            IF y = phrank(1) / 1000000 THEN
                PRINT #1, "One Pair                     ";
                PRINT #1, USING "############"; phr(1, 10) - phr(1, 11)
            END IF
            IF y = phrank(2) / 1000000 THEN
                PRINT #1, "Two Pair                     ";
                PRINT #1, USING "############"; phr(2, 10) - phr(2, 11)
            END IF
            IF y = phrank(3) / 1000000 THEN
                PRINT #1, "Three of a Kind              ";
                PRINT #1, USING "############"; phr(3, 10) - phr(3, 11)
            END IF
            IF y = phrank(4) / 1000000 THEN
                PRINT #1, "Straight                     ";
                PRINT #1, USING "############"; phr(4, 10) - phr(4, 11)
            END IF
            IF y = phrank(5) / 1000000 THEN
                PRINT #1, "Flush                        ";
                PRINT #1, USING "############"; phr(5, 10) - phr(5, 11)
            END IF
            IF y = phrank(6) / 1000000 THEN
                PRINT #1, "Full House                   ";
                PRINT #1, USING "############"; phr(6, 10) - phr(6, 11)
            END IF
            IF y = phrank(7) / 1000000 THEN
                PRINT #1, "Four of a Kind               ";
                PRINT #1, USING "############"; phr(7, 10) - phr(7, 11)
            END IF
            IF y = phrank(8) / 1000000 THEN
                PRINT #1, "Five of a Kind               ";
                PRINT #1, USING "############"; phr(8, 10) - phr(8, 11)
            END IF
            IF y = phrank(9) / 1000000 THEN
                PRINT #1, "Straight Flush               ";
                PRINT #1, USING "############"; phr(9, 10) - phr(9, 11)
            END IF
        NEXT y
        PRINT #1, ""
        PRINT #1, "Total                        ";
        PRINT #1, USING "############"; phr(11, 10) - phr(11, 11)
        FOR x = 0 TO 11
            phr(x, 11) = phr(x, 10)
        NEXT x
    END IF
    PRINT #1, ""
    PRINT #1, ""
    PRINT #1, ""
    PRINT #1, ""
    PRINT #1, ""
    FOR x = 0 TO 11
        FOR y = 0 TO 2
            phr(x, y + 5) = phr(x, y)
    NEXT y: NEXT x
    CLOSE #1
    v$ = files$ + "p.txt"
    OPEN v$ FOR OUTPUT AS #1
    PRINT #1, "BIGS908 PROGRAM OUTPUT"
    PRINT #1, ""
    PRINT #1, "The user defined set of game rules is described as follows:"
    PRINT #1, ""
    PRINT #1, q$
    PRINT #1, ""
    PRINT #1, "The following is a table displaying information gathered ";
    PRINT #1, "during simulation"
    PRINT #1, "about the best category of five-card-poker hand made from ";
    PRINT #1, "a choice of five"
    PRINT #1, "of the playing cards in each of those player hands that ";
    PRINT #1, "won the game."
    PRINT #1, "For each category, the table includes data about the ";
    PRINT #1, "number of hands made,"
    PRINT #1, "the number of hands made that ranked higher than the ";
    PRINT #1, "best category of five-"
    PRINT #1, "-card-poker hand made during the same game by the dealer, ";
    PRINT #1, "the number hands"
    PRINT #1, "made that ranked not higher than the best category of ";
    PRINT #1, "five-card-poker hand"
    PRINT #1, "made during the same game by the dealer, and the size ";
    PRINT #1, "of the bonus payout."
    PRINT #1,
    PRINT #1, "Hand Category          Number      Higher  Not Higher    ";
    PRINT #1, "Bonus Payout"
    PRINT #1, ""
    PRINT #1, "Not enough cards ";
    PRINT #1, USING "############"; phr(10, 2)
    PRINT #1, "High Card        ";
    PRINT #1, USING "############"; phr(0, 2);
    PRINT #1, USING "############"; phr(0, 1);
    PRINT #1, USING "############"; phr(0, 0);
    PRINT #1, USING "#####.#"; phpo(0);
    IF ptm(0) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(0) = 1 THEN PRINT #1, " times table minimum"
    FOR y = 1 TO 9
        IF y = phrank(1) / 1000000 THEN
            PRINT #1, "One Pair         ";
            PRINT #1, USING "############"; phr(1, 2);
            PRINT #1, USING "############"; phr(1, 1);
            PRINT #1, USING "############"; phr(1, 0);
            PRINT #1, USING "#####.#"; phpo(1);
            IF ptm(1) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(1) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(2) / 1000000 THEN
            PRINT #1, "Two Pair         ";
            PRINT #1, USING "############"; phr(2, 2);
            PRINT #1, USING "############"; phr(2, 1);
            PRINT #1, USING "############"; phr(2, 0);
            PRINT #1, USING "#####.#"; phpo(2);
            IF ptm(2) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(2) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(3) / 1000000 THEN
            PRINT #1, "Three of a Kind  ";
            PRINT #1, USING "############"; phr(3, 2);
            PRINT #1, USING "############"; phr(3, 1);
            PRINT #1, USING "############"; phr(3, 0);
            PRINT #1, USING "#####.#"; phpo(3);
            IF ptm(3) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(3) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(4) / 1000000 THEN
            PRINT #1, "Straight         ";
            PRINT #1, USING "############"; phr(4, 2);
            PRINT #1, USING "############"; phr(4, 1);
            PRINT #1, USING "############"; phr(4, 0);
            PRINT #1, USING "#####.#"; phpo(4);
            IF ptm(4) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(4) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(5) / 1000000 THEN
            PRINT #1, "Flush            ";
            PRINT #1, USING "############"; phr(5, 2);
            PRINT #1, USING "############"; phr(5, 1);
            PRINT #1, USING "############"; phr(5, 0);
            PRINT #1, USING "#####.#"; phpo(5);
            IF ptm(5) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(5) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(6) / 1000000 THEN
            PRINT #1, "Full House       ";
            PRINT #1, USING "############"; phr(6, 2);
            PRINT #1, USING "############"; phr(6, 1);
            PRINT #1, USING "############"; phr(6, 0);
            PRINT #1, USING "#####.#"; phpo(6);
            IF ptm(6) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(6) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(7) / 1000000 THEN
            PRINT #1, "Four of a Kind   ";
            PRINT #1, USING "############"; phr(7, 2);
            PRINT #1, USING "############"; phr(7, 1);
            PRINT #1, USING "############"; phr(7, 0);
            PRINT #1, USING "#####.#"; phpo(7);
            IF ptm(7) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(7) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(8) / 1000000 THEN
            PRINT #1, "Five of a Kind   ";
            PRINT #1, USING "############"; phr(8, 2);
            PRINT #1, USING "############"; phr(8, 1);
            PRINT #1, USING "############"; phr(8, 0);
            PRINT #1, USING "#####.#"; phpo(8);
            IF ptm(8) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(8) = 1 THEN PRINT #1, " times table minimum"
        END IF
        IF y = phrank(9) / 1000000 THEN
            PRINT #1, "Straight Flush   ";
            PRINT #1, USING "############"; phr(9, 2);
            PRINT #1, USING "############"; phr(9, 1);
            PRINT #1, USING "############"; phr(9, 0);
            PRINT #1, USING "#####.#"; phpo(9);
            IF ptm(9) <> 1 THEN PRINT #1, " : 1 Odds "
            IF ptm(9) = 1 THEN PRINT #1, " times table minimum"
        END IF
    NEXT y
    PRINT #1, ""
    PRINT #1, "Total           ";
    PRINT #1, USING "#############"; phr(11, 2);
    PRINT #1, USING "############"; phr(11, 1);
    PRINT #1, USING "############"; phr(11, 0)
    PRINT #1, ""
    IF track% = 1 THEN
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, "The following is a table displaying information ";
        PRINT #1, "gathered during "
        PRINT #1, "simulation about the best category of five card ";
        PRINT #1, "poker hand made "
        PRINT #1, "from a choice of five of the playing cards in each ";
        PRINT #1, "player hand "
        PRINT #1, "and information gathered during simulation about ";
        PRINT #1, "the best category"
        PRINT #1, "of five card poker hand made from a choice of five ";
        PRINT #1, "of the playing"
        PRINT #1, "cards in each dealer hand. For each category, the ";
        PRINT #1, "table includes"
        PRINT #1, "data about the number of hands made."
        PRINT #1,
        PRINT #1, "Hand Category                      ";
        PRINT #1, "Player                      Dealer"
        PRINT #1, ""
        PRINT #1, "Not enough cards             ";
        PRINT #1, USING "############"; phr(10, 4);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(10, 3)
        PRINT #1, "High Card                    ";
        PRINT #1, USING "############"; phr(0, 4);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(0, 3)
        FOR y = 1 TO 9
            IF y = phrank(1) / 1000000 THEN
                PRINT #1, "One Pair                     ";
                PRINT #1, USING "############"; phr(1, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(1, 3)
            END IF
            IF y = phrank(2) / 1000000 THEN
                PRINT #1, "Two Pair                     ";
                PRINT #1, USING "############"; phr(2, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(2, 3)
            END IF
            IF y = phrank(3) / 1000000 THEN
                PRINT #1, "Three of a Kind              ";
                PRINT #1, USING "############"; phr(3, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(3, 3)
            END IF
            IF y = phrank(4) / 1000000 THEN
                PRINT #1, "Straight                     ";
                PRINT #1, USING "############"; phr(4, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(4, 3)
            END IF
            IF y = phrank(5) / 1000000 THEN
                PRINT #1, "Flush                        ";
                PRINT #1, USING "############"; phr(5, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(5, 3)
            END IF
            IF y = phrank(6) / 1000000 THEN
                PRINT #1, "Full House                   ";
                PRINT #1, USING "############"; phr(6, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(6, 3)
            END IF
            IF y = phrank(7) / 1000000 THEN
                PRINT #1, "Four of a Kind               ";
                PRINT #1, USING "############"; phr(7, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(7, 3)
            END IF
            IF y = phrank(8) / 1000000 THEN
                PRINT #1, "Five of a Kind               ";
                PRINT #1, USING "############"; phr(8, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(8, 3)
            END IF
            IF y = phrank(9) / 1000000 THEN
                PRINT #1, "Straight Flush               ";
                PRINT #1, USING "############"; phr(9, 4);
                PRINT #1, "                ";
                PRINT #1, USING "############"; phr(9, 3)
            END IF
        NEXT y
        PRINT #1, ""
        PRINT #1, "Total                        ";
        PRINT #1, USING "############"; phr(11, 4);
        PRINT #1, "                ";
        PRINT #1, USING "############"; phr(11, 3)
    END IF
    IF dqfcphw% = 1 THEN
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, ""
        PRINT #1, "The following is a table displaying information ";
        PRINT #1, "gathered during simulation"
        PRINT #1, "about the best category of five card poker hand ";
        PRINT #1, "made from a choice of five"
        PRINT #1, "of the cards in each of those dealer hands with ";
        PRINT #1, "a numerical sum value of "
        PRINT #1, "less than twenty-eight points. For each category, ";
        PRINT #1, "the table includes data "
        PRINT #1, "about the number of hands made."
        PRINT #1,
        PRINT #1, "Hand Category                      ";
        PRINT #1, "Dealer < 28"
        PRINT #1, ""
        PRINT #1, "Not enough cards             ";
        PRINT #1, USING "############"; phr(10, 10)
        PRINT #1, "High Card                    ";
        PRINT #1, USING "############"; phr(0, 10)
        FOR y = 1 TO 9
            IF y = phrank(1) / 1000000 THEN
                PRINT #1, "One Pair                     ";
                PRINT #1, USING "############"; phr(1, 10)
            END IF
            IF y = phrank(2) / 1000000 THEN
                PRINT #1, "Two Pair                     ";
                PRINT #1, USING "############"; phr(2, 10)
            END IF
            IF y = phrank(3) / 1000000 THEN
                PRINT #1, "Three of a Kind              ";
                PRINT #1, USING "############"; phr(3, 10)
            END IF
            IF y = phrank(4) / 1000000 THEN
                PRINT #1, "Straight                     ";
                PRINT #1, USING "############"; phr(4, 10)
            END IF
            IF y = phrank(5) / 1000000 THEN
                PRINT #1, "Flush                        ";
                PRINT #1, USING "############"; phr(5, 10)
            END IF
            IF y = phrank(6) / 1000000 THEN
                PRINT #1, "Full House                   ";
                PRINT #1, USING "############"; phr(6, 10)
            END IF
            IF y = phrank(7) / 1000000 THEN
                PRINT #1, "Four of a Kind               ";
                PRINT #1, USING "############"; phr(7, 10)
            END IF
            IF y = phrank(8) / 1000000 THEN
                PRINT #1, "Five of a Kind               ";
                PRINT #1, USING "############"; phr(8, 10)
            END IF
            IF y = phrank(9) / 1000000 THEN
                PRINT #1, "Straight Flush               ";
                PRINT #1, USING "############"; phr(9, 10)
            END IF
        NEXT y
        PRINT #1, ""
        PRINT #1, "Total                        ";
        PRINT #1, USING "############"; phr(11, 10)
    END IF
END IF
CLOSE #1
id(b(16)) = b(36) - purse
idr(b(16)) = b(15)
ide(b(16)) = b(2) - purse
idf(b(16)) = b(18)
ld(b(16)) = b(17)
id(0) = id(0) + id(b(16))
idr(0) = idr(0) + idr(b(16))
ide(0) = ide(0) + ide(b(16))
idf(0) = idf(0) + idf(b(16))
ld(0) = ld(0) + ld(b(16))
b(39) = b(39) + b(22)
b(67) = b(67) + b(66)
b(40) = b(40) + b(24)
b(41) = b(41) + b(26)
b(42) = b(42) + b(27)
b(61) = b(61) + b(60)
b(37) = purse
b(36) = purse
b(2) = purse
b(29) = purse
b(22) = 0
b(66) = 0
b(24) = 0
b(26) = 0
b(27) = 0
b(60) = 0
b(15) = 0
b(18) = 0
b(17) = 0
b(47) = b(0)
b(48) = b(1)
b(49) = b(3)
b(50) = b(19)
b(51) = b(20)
b(52) = b(45)
b(53) = b(46)
b(59) = b(58)
b(35) = b(34)
b(74) = b(75)
b(76) = b(77)
b(80) = b(81)
b(70) = b(71)
b(64) = b(65)
b(62) = b(63)
b(68) = b(69)
b(78) = b(79)
b(72) = b(73)
b(92) = b(93)
b(94) = b(95)
b(98) = b(99)
b(88) = b(89)
b(84) = b(85)
b(82) = b(83)
b(86) = b(87)
b(96) = b(97)
b(90) = b(91)
b(100) = b(101)
b(102) = b(103)
b(104) = b(105)
b(106) = b(107)
b(108) = b(109)
b(110) = b(111)
b(112) = b(113)
b(114) = b(115)
b(116) = b(117)
b(118) = b(119)
b(120) = b(121)
b(122) = b(123)
b(124) = b(125)
b(126) = b(127)
b(128) = b(129)
b(130) = b(131)
b(132) = b(133)
b(134) = b(135)
FOR x = 1 TO 17
    mc27po(x, 2) = mc27po(x, 1)
NEXT x
757 b(23) = 0
b(25) = 0
dh(1) = 0
cv(14) = 0
IF rn&& = hmr&& THEN GOTO 999
IF rps% <> 0 THEN
    IF rps% = rn&& - prn&& THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
IF rps% = 0 THEN
    IF card(14) < shf * deck% * mc(14) / 100 THEN
        b(14) = b(14) + 1
        GOTO 707
    END IF
END IF
GOTO 323
543 CLS: PRINT "The BIGS908 software application is a ";
PRINT "game simulator. The component"
PRINT "enables the user to do the following. Load into ";
PRINT "program memory a user-defined"
PRINT "set of game rules saved to data file by a ";
PRINT "software application selected from"
PRINT "a group consisting of the BIGS907 software ";
PRINT "application and the BIGS921"
PRINT "software application. Load into program ";
PRINT "memory a matching-basic-strategy"
PRINT "table selected from a group consisting of ";
PRINT "the set of combination-dependent-"
PRINT "playing-strategy tables saved to data file ";
PRINT "by the BIGS907 software application"
PRINT "and the total-dependent-basic-strategy table ";
PRINT "saved to data file by the BIGS921"
PRINT "software application. Thereby, program a computer-";
PRINT "controlled player to"
PRINT "use the matching-basic-strategy table to make ";
PRINT "decisions on how to play the"
PRINT "player's hand. Program a computer-controlled dealer ";
PRINT "to use a matching-"
PRINT "predetermined strategy to make decisions on how ";
PRINT "to play the dealer's hand."
PRINT "Simulate the play of millions of rounds of the ";
PRINT "double exposure game of any of"
PRINT "a subset of optional embodiments subject to ";
PRINT "the user-defined set of game";
PRINT "rules. In a double exposure game, the dealer ";
PRINT "forms the dealer's-initial hand"
PRINT "by dealing two cards face up."
PRINT " "

o$ = "     Stand15/A615/A715/A815/A915/AT15/AJ15/AQ15/AK16/A516/A616/A7"
o$ = o$ + "16/A816/A916/AT16/AJ16/AQ16/AK17/A517/A617/A717/A817/A917/AT"
o$ = o$ + "17/AJ17/AQ17/AK18/A518/A618/A718/A818/A918/AT18/AJ18/AQ18/AK"
o$ = o$ + "19/A519/A619/A719/A819/A919/AT19/AJ19/AQ19/AK20/A620/A720/A8"
o$ = o$ + "20/A920/AT20/AJ20/AQ20/AK21/A721/A821/A921/AT21/AJ21/AQ21/AK"
o$ = o$ + "22/A822/A922/AT22/AJ22/AQ22/AK23/A923/AT23/AJ23/AQ23/AK24/AT"
o$ = o$ + "24/AJ24/AQ24/AK25/AJ25/AQ25/AK26/AQ26/AK27/AKSplitSrndrDDown"

n$ = "     Stand15   15   15   15   15   15   15   15   16   16   16   "
n$ = n$ + "16   16   16   16   16   16   17   17   17   17   17   17   "
n$ = n$ + "17   17   17   18   18   18   18   18   18   18   18   18   "
n$ = n$ + "19   19   19   19   19   19   19   19   19   20   20   20   "
n$ = n$ + "20   20   20   20   20   21   21   21   21   21   21   21   "
n$ = n$ + "22   22   22   22   22   22   23   23   23   23   23   24   "
n$ = n$ + "24   24   24   25   25   25   26   26   27   SplitSrndrDDown"

' START OF A SOFTWARE MEANS FOR LOADING A SET OF GAME RULES SAVED BY
' A SOFTWARE APPLICATION SELECTED FROM A GROUP CONSISTING OF THE
' BIGS907M SOFTWARE APPLICATION AND THE BIGS921M SOFTWARE APPLICATION.
69 PRINT "enter the 'folder/filename prefix' of the set of files"
PRINT "containing data about the set of strategy tables"
PRINT "and matching user-defined set of game rules"
PRINT "to be loaded into program memory."
INPUT D$
PRINT " "
OPEN D$ + "a.dat" FOR RANDOM AS #1 LEN = LEN(sd)
GET #1, , sd
mc(0) = sd.c0
mc(1) = sd.c1
mc(2) = sd.c2
mc(3) = sd.c3
mc(4) = sd.c4
mc(5) = sd.c5
mc(6) = sd.c6
mc(7) = sd.c7
mc(8) = sd.c8
mc(9) = sd.c9
mc(10) = sd.cT
mc(11) = sd.cJ
mc(12) = sd.cQ
mc(13) = sd.cK
jojo% = sd.jojo
jojopo = sd.jojopo
joanca% = sd.joanca
joancash% = sd.joancash
joancapo = sd.joancapo
jo27% = sd.jowi
d28p% = sd.d28p
bshw% = sd.bshw
dhf% = sd.dhf
j = sd.j
dwt% = sd.dwt
dbc% = sd.dbc
nchw% = sd.nchw
ls% = sd.ls
splt% = sd.splt
most% = sd.nsh
rsa% = sd.rsa
das% = sd.das
dh% = sd.dh
ld% = sd.ld
bigslick = sd.bigslick
dsa% = sd.dsa
bssh% = sd.bssh
deck% = sd.deck
shf = sd.shf
immed% = sd.immed
pbd% = sd.pbd
b27po% = sd.b27po
ms999 = sd.ms999
ss999 = sd.ss999
sp999 = sd.sp999
jp999 = sd.jp999
mc27po(4, 0) = sd.po6c27
mc27po(5, 0) = sd.po7c27
mc27po(6, 0) = sd.po8c27
mc27po(7, 0) = sd.po9c27
ms89T = sd.ms89T
ss89T = sd.ss89T
sp89T = sd.sp89T
dd% = sd.dd
dd(3) = sd.dd3
dd(4) = sd.dd4
dd(5) = sd.dd5
dd(6) = sd.dd6
dd(7) = sd.dd7
dd(8) = sd.dd8
q$ = sd.description
CLOSE #1
' END OF A SOFTWARE MEANS FOR LOADING A SET OF GAME RULES SAVED BY
' A SOFTWARE APPLICATION SELECTED FROM A GROUP CONSISTING OF THE
' BIGS907M SOFTWARE APPLICATION AND THE BIGS921M SOFTWARE APPLICATION.
OPEN D$ + "b.dat" FOR RANDOM AS #1 LEN = LEN(num)
w = 0
FOR x = 0 TO 104
    FOR y = 0 TO 104
        w = w + 1
        GET #1, w, num
        far(x, y) = num.far
        sar(x, y) = num.sar
        r(x, y) = num.r
        Hit(x, y) = num.Hit
    NEXT y
NEXT x
CLOSE #1
PRINT "enter the 'folder/filename prefix' of the files"
PRINT "to be used to store application output."
INPUT files$
PRINT " "
PRINT "strategy loaded is described as follows:"
PRINT q$
PRINT " "
PRINT "if this is acceptable, then type 'y' and press enter, ";
PRINT "else press enter "
INPUT ans$
PRINT " "
IF ans$ <> "y" THEN GOTO 69
' START OF A SOFTWARE MEANS FOR SAVING THE SET OF GAME RULES
v$ = files$ + "a.dat"
OPEN v$ FOR RANDOM AS #1 LEN = LEN(sd)
sd.c0 = mc(0)
sd.c1 = mc(1)
sd.c2 = mc(2)
sd.c3 = mc(3)
sd.c4 = mc(4)
sd.c5 = mc(5)
sd.c6 = mc(6)
sd.c7 = mc(7)
sd.c8 = mc(8)
sd.c9 = mc(9)
sd.cT = mc(10)
sd.cJ = mc(11)
sd.cQ = mc(12)
sd.cK = mc(13)
sd.jojo = jojo%
sd.jojopo = jojopo
sd.joanca = joanca%
sd.joancash = joancash%
sd.joancapo = joancapo
sd.jowi = jo27%
sd.d28p = d28p%
sd.bshw = bshw%
sd.dhf = dhf%
sd.j = j
sd.dwt = dwt%
sd.dbc = dbc%
sd.nchw = nchw%
sd.ls = ls%
sd.splt = splt%
sd.nsh = most%
sd.rsa = rsa%
sd.das = das%
sd.dh = dh%
sd.ld = ld%
sd.bigslick = bigslick
sd.dsa = dsa%
sd.bssh = bssh%
sd.deck = deck%
sd.shf = shf
sd.immed = immed%
sd.pbd = pbd%
sd.b27po = b27po%
sd.po6c27 = mc27po(4, 0)
sd.po7c27 = mc27po(5, 0)
sd.po8c27 = mc27po(6, 0)
sd.po9c27 = mc27po(7, 0)
sd.ms89T = ms89T
sd.ss89T = ss89T
sd.sp89T = sp89T
sd.ms999 = ms999
sd.ss999 = ss999
sd.sp999 = sp999
sd.jp999 = jp999
sd.dd = dd%
sd.dd3 = dd(3)
sd.dd4 = dd(4)
sd.dd5 = dd(5)
sd.dd6 = dd(6)
sd.dd7 = dd(7)
sd.dd8 = dd(8)
IF LEN(q$) > 80 THEN
    sd.description = MID$(q$, 1, 80)
END IF
IF LEN(q$) < 81 THEN
    sd.description = q$
END IF
PUT #1, , sd
CLOSE #1
' END OF A SOFTWARE MEANS FOR SAVING THE SET OF GAME RULES
'
hu% = (dhf% - dhf% MOD 100) / 100
su% = (j - j MOD 100) / 100
IF hu% = 0 THEN hu% = 27
IF su% = 0 THEN su% = 27
j = j MOD 100
p27d27push% = (dwt% - dwt% MOD 10) / 10
dwt% = dwt% MOD 10
dhf% = dhf% MOD 100
pbc% = dbc% - dbc% MOD 100
debc% = dbc% - pbc% - (dbc% - pbc%) MOD 10
dbc% = dbc% - debc% - pbc%
pbc% = pbc% / 100
debc% = debc% / 10
sh999% = b27po% - b27po% MOD 100
sh89T% = b27po% - sh999% - (b27po% - sh999%) MOD 10
b27po% = b27po% - sh999% - sh89T%
sh999% = sh999% / 100
sh89T% = sh89T% / 10
dd999% = dh% - dh% MOD 100
dd89T% = dh% - dd999% - (dh% - dd999%) MOD 10
dh% = dh% - dd999% - dd89T%
dd999% = dd999% / 100
dd89T% = dd89T% / 10
ddmc27% = dd% - dd% MOD 100
shmc27% = dd% - ddmc27% - (dd% - ddmc27%) MOD 10
dd% = dd% - ddmc27% - shmc27%
ddmc27% = ddmc27% / 100
shmc27% = shmc27% / 10
ptm(13) = pbd% - pbd% MOD 1000
ptm(12) = pbd% - ptm(13) - (pbd% - ptm(13)) MOD 100
ptm(11) = pbd% - ptm(13) - ptm(12) - (pbd% - ptm(13) - ptm(12)) MOD 10
pbd% = pbd% - ptm(11) - ptm(12) - ptm(13)
ptm(13) = ptm(13) / 1000
ptm(12) = ptm(12) / 100
ptm(11) = ptm(11) / 10
IF d28p% = 2 THEN
    d28p% = 1
    d28w% = 1
END IF
IF jo27% = 2 THEN
    jowi% = 1
    jo27% = 1
END IF
mc(14) = mc(0) + mc(1) + mc(2) + mc(3) + mc(4)
mc(14) = mc(14) + mc(5) + mc(6) + mc(7) + mc(8)
mc(14) = mc(14) + mc(9) + mc(10) + mc(11) + mc(12) + mc(13)
OPEN files$ + "i.txt" FOR OUTPUT AS #1
PRINT #1, "enter the 'folder/filename prefix' of the set of files"
PRINT #1, "containing data about the set of strategy tables"
PRINT #1, "and matching user-defined set of game rules"
PRINT #1, "to be loaded into program memory."
PRINT #1, D$
PRINT #1, " "
PRINT #1, "enter the 'folder/filename prefix' of the files"
PRINT #1, "to be used to store application output."
PRINT #1, files$
PRINT #1, " "
PRINT #1, "strategy loaded is described as follows: "
PRINT #1, q$
PRINT #1, " "
PRINT #1, "if this is acceptable, then type 'y' and press enter,"
PRINT #1, "else press enter "
PRINT #1, ans$
PRINT #1, " "
CLOSE #1
IF rsa% = 1 THEN rsa% = most% ELSE rsa% = 2
' START OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT "A game wager is an agreement between ";
PRINT "the player and the dealer that"
PRINT "the party that has made an incorrect ";
PRINT "prediction about the uncertain"
PRINT "outcome of the game will forfeit an item ";
PRINT "of value to the other."
PRINT " "
PRINT "Define the prediction made by ";
PRINT "the computer-controlled player: "
PRINT " "
PRINT "Press enter for the player predicts ";
PRINT "the outcome of the game will be"
PRINT "the player's hand wins."
PRINT "Press 1 and enter for the player predicts ";
PRINT "the outcome of the game will be"
PRINT "the dealer's hand wins."
PRINT "Press 2 and enter for the player predicts ";
PRINT "the outcome of the game will be"
PRINT "a stalemate."
INPUT wager%
PRINT " "
IF wager% <> 0 THEN
    PRINT "input the odds on the game wager that ";
    PRINT "the dealer will pay to the player when"
    IF wager% = 1 THEN
        PRINT "the outcome of the game is ";
        PRINT "the dealer's hand wins."
    END IF
    IF wager% = 2 THEN
        PRINT "the outcome of the game is ";
        PRINT "a stalemate."
    END IF
    INPUT gwpo
    PRINT " "
END IF
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "A game wager is an agreement between ";
PRINT #1, "the player and the dealer that"
PRINT #1, "the party that has made an incorrect ";
PRINT #1, "prediction about the uncertain"
PRINT #1, "outcome of the game will forfeit an item ";
PRINT #1, "of value to the other."
PRINT #1, " "
PRINT #1, "Define the prediction made by ";
PRINT #1, "the computer-controlled player: "
PRINT #1, " "
PRINT #1, "Press enter for the player predicts ";
PRINT #1, "the outcome of the game will be"
PRINT #1, "the player's hand wins."
PRINT #1, "Press 1 and enter for the player predicts ";
PRINT #1, "the outcome of the game will be"
PRINT #1, "the dealer's hand wins."
PRINT #1, "Press 2 and enter for the player predicts ";
PRINT #1, "the outcome of the game will be"
PRINT #1, "a stalemate."
PRINT #1, wager%
PRINT #1, " "
IF wager% <> 0 THEN
    PRINT #1, "input the odds on the game wager that ";
    PRINT #1, "the dealer will pay to the player when"
    IF wager% = 1 THEN
        PRINT #1, "the outcome of the game is ";
        PRINT #1, "the dealer's hand wins."
    END IF
    IF wager% = 2 THEN
        PRINT #1, "the outcome of the game is ";
        PRINT #1, "a stalemate."
    END IF
    PRINT #1, gwpo
    PRINT #1, " "
END IF
CLOSE #1
PRINT "Press 1 and enter to add rules for complete hands that"
PRINT "make qualifying-five-card-poker-hands, else press enter"
INPUT pbonus%
PRINT " "
IF pbonus% = 1 THEN
    PRINT "Press 1 and enter for (fully wild rule) ";
    PRINT "enables the holder of"
    PRINT "a winning hand that consists of at least five playing cards"
    PRINT "to use each joker included in the winning hand to represent"
    PRINT "the suit and rank of any other playing card."
    PRINT " "
    PRINT "Else press enter for (bug rule) enables the holder of"
    PRINT "a winning hand that consists of at least five playing cards"
    PRINT "to use each joker included in the winning hand to perform a"
    PRINT "function selected from a group consisting of ";
    PRINT "represent an ace,"
    PRINT "complete a straight, complete a flush ";
    PRINT "and complete a straight-flush."
    PRINT " "
    INPUT wildcardrules%
    PRINT " "
    PRINT "Press enter to input the rank of each of ";
    PRINT "nine categories of poker hands."
    PRINT "Press 1 and enter to use default hand ranking rules "
    INPUT default%
    PRINT " "
    IF default% = 1 AND wildcardrules% = 0 THEN
        phrank(1) = 1: phrank(11) = 1
        phrank(2) = 2: phrank(12) = 2
        phrank(3) = 3: phrank(13) = 3
        phrank(4) = 4: phrank(14) = 4
        phrank(5) = 5: phrank(15) = 5
        phrank(6) = 6: phrank(16) = 6
        phrank(7) = 7: phrank(17) = 7
        phrank(8) = 9: phrank(18) = 9
        phrank(9) = 8: phrank(19) = 8
    END IF
    IF default% = 1 AND wildcardrules% = 1 THEN
        phrank(1) = 1: phrank(11) = 1
        phrank(2) = 2: phrank(12) = 2
        phrank(3) = 3: phrank(13) = 3
        phrank(4) = 4: phrank(14) = 4
        phrank(5) = 7: phrank(15) = 6
        phrank(6) = 5: phrank(16) = 7
        phrank(7) = 6: phrank(17) = 5
        phrank(8) = 9: phrank(18) = 9
        phrank(9) = 8: phrank(19) = 8
    END IF
    PRINT " "
    IF default% <> 1 THEN
        PRINT "a set of user-defined poker-hand-ranking ";
        PRINT "rules create a hierarchy"
        PRINT "wherein poker hands of the high card category ";
        PRINT "are assigned the lowest rank,"
        PRINT "and wherein poker hands of each ";
        PRINT "category assigned a higher rank"
        PRINT "outrank poker hands of all categories ";
        PRINT "assigned lower ranks."
        PRINT ""
        PRINT "input the rank (1-9) assigned to one pair "
        INPUT phrank(1)
        PRINT " "
        phrank(10 + phrank(1)) = 1
        PRINT "input the rank (1-9) assigned to two pair "
        INPUT phrank(2)
        PRINT " "
        phrank(10 + phrank(2)) = 2
        PRINT "input the rank (1-9) assigned to three of a kind "
        INPUT phrank(3)
        PRINT " "
        phrank(10 + phrank(3)) = 3
        PRINT "input the rank (1-9) assigned to a straight "
        INPUT phrank(4)
        PRINT " "
        phrank(10 + phrank(4)) = 4
        PRINT "input the rank (1-9) assigned to a flush "
        INPUT phrank(5)
        PRINT " "
        phrank(10 + phrank(5)) = 5
        PRINT "input the rank (1-9) assigned to a full house "
        INPUT phrank(6)
        PRINT " "
        phrank(10 + phrank(6)) = 6
        PRINT "input the rank (1-9) assigned to four of a kind "
        INPUT phrank(7)
        PRINT " "
        phrank(10 + phrank(7)) = 7
        PRINT "input the rank (1-9) assigned to five of a kind "
        INPUT phrank(8)
        PRINT " "
        phrank(10 + phrank(8)) = 8
        PRINT "input the rank (1-9) assigned to a straight flush "
        INPUT phrank(9)
        PRINT " "
        phrank(10 + phrank(9)) = 9
    END IF
    PRINT "a qualifying-five-card-poker hand is ";
    PRINT "a five-card-poker hand of a rank that"
    PRINT "is at least equal to a minimum rank ";
    PRINT "specified by the user-defined set of ";
    PRINT "game rules."
    PRINT " "
    PRINT "input the minimum rank specified by ";
    PRINT "the user-defined set of game rules"
    PRINT " "
    FOR y = 0 TO 9
        IF y = 0 THEN
            PRINT "input "; y; "for high card."
        END IF
        IF y = phrank(1) THEN
            PRINT "input "; y; "for one pair."
        END IF
        IF y = phrank(2) THEN
            PRINT "input "; y; "for two pair."
        END IF
        IF y = phrank(3) THEN
            PRINT "input "; y; "for three-of-a-kind."
        END IF
        IF y = phrank(4) THEN
            PRINT "input "; y; "for straight."
        END IF
        IF y = phrank(5) THEN
            PRINT "input "; y; "for flush."
        END IF
        IF y = phrank(6) THEN
            PRINT "input "; y; "for full house."
        END IF
        IF y = phrank(7) THEN
            PRINT "input "; y; "for four-of-a-kind."
        END IF
        IF y = phrank(8) THEN
            PRINT "input "; y; "for five-of-a-kind."
        END IF
        IF y = phrank(9) THEN
            PRINT "input "; y; "for straight-flush."
        END IF
    NEXT y
    INPUT a
    PRINT " "
    minrank% = a
    PRINT "for each category of poker hand input ";
    PRINT "the bonus the dealer pays to a player"
    PRINT " "
    FOR y = 0 TO 9
        IF y = 0 AND y >= minrank% THEN
            PRINT "input bonus paid for a high card hand "
            INPUT a
            PRINT " "
            phpo(0) = a
        END IF
        IF y = phrank(1) AND y >= minrank% THEN
            PRINT "input bonus paid for a pair hand "
            INPUT a
            PRINT " "
            phpo(1) = a
        END IF
        IF y = phrank(2) AND y >= minrank% THEN
            PRINT "input bonus paid for a two pair hand "
            INPUT a
            PRINT " "
            phpo(2) = a
        END IF
        IF y = phrank(3) AND y >= minrank% THEN
            PRINT "input bonus paid for a three of a kind hand "
            INPUT a
            PRINT " "
            phpo(3) = a
        END IF
        IF y = phrank(4) AND y >= minrank% THEN
            PRINT "input bonus paid for a straight hand "
            INPUT a
            PRINT " "
            phpo(4) = a
        END IF
        IF y = phrank(5) AND y >= minrank% THEN
            PRINT "input bonus paid for a flush hand "
            INPUT a
            PRINT " "
            phpo(5) = a
        END IF
        IF y = phrank(6) AND y >= minrank% THEN
            PRINT "input bonus paid for a full house hand "
            INPUT a
            PRINT " "
            phpo(6) = a
        END IF
        IF y = phrank(7) AND y >= minrank% THEN
            PRINT "input bonus paid for a four of a kind hand "
            INPUT a
            PRINT " "
            phpo(7) = a
        END IF
        IF y = phrank(8) AND y >= minrank% THEN
            PRINT "input bonus paid for a five of a kind hand "
            INPUT a
            PRINT " "
            phpo(8) = a
        END IF
        IF y = phrank(9) AND y >= minrank% THEN
            PRINT "input bonus paid for a straight flush hand "
            INPUT a
            PRINT " "
            phpo(9) = a
        END IF
    NEXT y
    PRINT "Press enter for all bonus payouts are multiples ";
    PRINT "of the game wager"
    PRINT "Press 1 and enter for all bonus payouts are multiples ";
    PRINT "of table minimum "
    PRINT "Press 2 and enter for the bonus payout for at least one ";
    PRINT "category of poker hand"
    PRINT "is a multiple of table minimum "
    INPUT ptbm%
    PRINT " "
    FOR y = 0 TO 9
        IF y = 0 THEN
            IF ptbm% = 1 THEN ptm(0) = 1
            IF ptbm% = 2 AND phpo(0) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a high card hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(0) = a
            END IF
        END IF
        IF y = phrank(1) THEN
            IF ptbm% = 1 THEN ptm(1) = 1
            IF ptbm% = 2 AND phpo(1) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for one-pair hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(1) = a
            END IF
        END IF
        IF y = phrank(2) THEN
            IF ptbm% = 1 THEN ptm(2) = 1
            IF ptbm% = 2 AND phpo(2) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for two-pair hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(2) = a
            END IF
        END IF
        IF y = phrank(3) THEN
            IF ptbm% = 1 THEN ptm(3) = 1
            IF ptbm% = 2 AND phpo(3) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a three-of-a-kind hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(3) = a
            END IF
        END IF
        IF y = phrank(4) THEN
            IF ptbm% = 1 THEN ptm(4) = 1
            IF ptbm% = 2 AND phpo(4) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a straight hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(4) = a
            END IF
        END IF
        IF y = phrank(5) THEN
            IF ptbm% = 1 THEN ptm(5) = 1
            IF ptbm% = 2 AND phpo(5) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a flush hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(5) = a
            END IF
        END IF
        IF y = phrank(6) THEN
            IF ptbm% = 1 THEN ptm(6) = 1
            IF ptbm% = 2 AND phpo(6) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a full-house hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(6) = a
            END IF
        END IF
        IF y = phrank(7) THEN
            IF ptbm% = 1 THEN ptm(7) = 1
            IF ptbm% = 2 AND phpo(7) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a four-of-a-kind hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(7) = a
            END IF
        END IF
        IF y = phrank(8) THEN
            IF ptbm% = 1 THEN ptm(8) = 1
            IF ptbm% = 2 AND phpo(8) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a five-of-a-kind hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(8) = a
            END IF
        END IF
        IF y = phrank(9) THEN
            IF ptbm% = 1 THEN ptm(9) = 1
            IF ptbm% = 2 AND phpo(9) <> 0 THEN
                PRINT "Press 1 and enter for bonus payout ";
                PRINT "for a straight-flush hand"
                PRINT "is a multiple of the table minimum, ";
                PRINT "else press enter."
                INPUT a
                PRINT " "
                ptm(9) = a
            END IF
        END IF
    NEXT y
    phpo(10) = 0
    PRINT "press 1 and enter for only a complete hand with a ";
    PRINT "numerical-sum value of"
    PRINT "twenty-seven points can make a ";
    PRINT "qualifying-five-card-poker hand,"
    PRINT "else press enter"
    INPUT only27%
    PRINT " "
    IF only27% <> 1 THEN
        PRINT "press 1 and enter for only a complete hand with a ";
        PRINT "numerical-sum value of"
        PRINT "less than twenty-eight points can make a ";
        PRINT "qualifying-five-card-poker hand,"
        PRINT "else press enter"
        INPUT onlylessthan28%
        PRINT " "
    END IF
    PRINT "Press 1 and enter for any player hand with ";
    PRINT "a numerical sum value of less than"
    PRINT "twenty-eight points that makes ";
    PRINT "a qualifying-five-card-poker hand"
    PRINT "is a predetermined-winning-complete hand, ";
    PRINT "else press enter "
    INPUT qfcphw%
    PRINT " "
    PRINT "Press 1 and enter for any dealer hand with ";
    PRINT "a numerical sum value of less than"
    PRINT "twenty-eight points that makes ";
    PRINT "a qualifying-five-card-poker hand"
    PRINT "is a predetermined-winning-complete hand, ";
    PRINT "else press enter "
    INPUT dqfcphw%
    PRINT " "
    IF qfcphw% <> 1 THEN
        PRINT "Press 1 and enter for any player hand with ";
        PRINT "a numerical sum value of"
        PRINT "twenty-seven points that makes ";
        PRINT "a qualifying-five-card-poker hand"
        PRINT "is a predetermined-winning-complete hand, "
        PRINT "else press enter "
        INPUT qph27wa%
        PRINT " "
    END IF
    PRINT "Press 1 and enter for player's poker hand must ";
    PRINT "outrank dealer's poker hand "
    PRINT "else press enter "
    INPUT pcomp%
    PRINT " "
    PRINT "Press enter to save to a text file a ";
    PRINT "table displaying the number"
    PRINT "of poker hands of each category made from ";
    PRINT "winning player hands only."
    PRINT "Press 1 and enter to also save to a ";
    PRINT "text file a table displaying"
    PRINT "the number of poker hands of ";
    PRINT "each category made from all player hands"
    PRINT "and made from all dealer hands "
    INPUT track%
    PRINT " "
    PRINT "Press 1 and enter to enable the ";
    PRINT "computer-controlled player to override"
    PRINT "the set of strategy tables in cases ";
    PRINT "wherein the set of strategy tables"
    PRINT "calls for the player to stand, and ";
    PRINT "wherein the potential benefits of"
    PRINT "making a qualifying-five-card-poker ";
    PRINT "hand by taking an additional card"
    PRINT "to the player's hand outweigh the ";
    PRINT "potential risks of busting and"
    PRINT "possibly losing the game, ";
    PRINT "else press enter "
    INPUT override%
    PRINT " "
    IF override% = 1 THEN
        369 PRINT "enter the 'folder/filename prefix' ";
        PRINT "of the set of files"
        PRINT "containing data about the basic strategy ";
        PRINT "for the play of the"
        PRINT "player's four-card hands to be ";
        PRINT "loaded into program memory."
        INPUT D1$
        OPEN D1$ + "a.dat" FOR RANDOM AS #1 LEN = LEN(sd)
        GET #1, , sd
        q1$ = sd.description
        CLOSE #1
        OPEN D1$ + "b.dat" FOR RANDOM AS #1 LEN = LEN(num)
        w = 0
        FOR x = 0 TO 104
            FOR y = 0 TO 104
                w = w + 1
                GET #1, w, num
                far1(x, y) = num.far
                sar1(x, y) = num.sar
                r1(x, y) = num.r
                Hit1(x, y) = num.Hit
            NEXT y
        NEXT x
        CLOSE #1
        PRINT " "
        PRINT "strategy loaded is described as follows:"
        PRINT q1$
        PRINT " "
        PRINT "if this is acceptable, then type 'y' and press enter, ";
        PRINT "else press enter "
        INPUT ans1$
        PRINT " "
        IF ans1$ <> "y" THEN GOTO 369
    END IF
END IF
' END OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "Press 1 and enter to add rules for complete hands that"
PRINT #1, "make qualifying-five-card-poker-hands, else press enter."
PRINT #1, pbonus%
PRINT #1, " "
IF pbonus% = 1 THEN
    PRINT #1, "Press 1 and enter for (fully wild rule) ";
    PRINT #1, "enables the holder of"
    PRINT #1, "a winning hand that consists of ";
    PRINT #1, "at least five playing cards"
    PRINT #1, "to use each joker included ";
    PRINT #1, "in the winning hand to represent"
    PRINT #1, "the suit and rank of any other playing card."
    PRINT #1, " "
    PRINT #1, "Else press enter for (bug rule) enables the holder of"
    PRINT #1, "a winning hand that consists of ";
    PRINT #1, "at least five playing cards"
    PRINT #1, "to use each joker included ";
    PRINT #1, "in the winning hand to perform a"
    PRINT #1, "function selected from a group ";
    PRINT #1, "consisting of represent an ace,"
    PRINT #1, "complete a straight, complete a flush and complete a ";
    PRINT #1, "straight-flush."
    PRINT #1, " "
    PRINT #1, wildcardrules%
    PRINT #1, " "
    PRINT #1, "Press enter to input the rank of each of ";
    PRINT #1, "nine categories of poker hands."
    PRINT #1, "Press 1 and enter to use default hand ranking rules "
    PRINT #1, default%
    PRINT #1, " "
    IF default% <> 1 THEN
        PRINT #1, "a set of user-defined poker-hand-ranking ";
        PRINT #1, "rules create a hierarchy"
        PRINT #1, "wherein poker hands of the high card category ";
        PRINT #1, "are assigned the lowest rank,"
        PRINT #1, "and wherein poker hands of each ";
        PRINT #1, "category assigned a higher rank"
        PRINT #1, "outrank poker hands of all categories ";
        PRINT #1, "assigned lower ranks."
        PRINT #1, ""
        FOR y = 1 TO 9
            IF y = phrank(1) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to one pair "
                PRINT #1, phrank(1)
                PRINT #1, " "
            END IF
            IF y = phrank(2) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to two pair "
                PRINT #1, phrank(2)
                PRINT #1, " "
            END IF
            IF y = phrank(3) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to three of a kind "
                PRINT #1, phrank(3)
                PRINT #1, " "
            END IF
            IF y = phrank(4) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a straight "
                PRINT #1, phrank(4)
                PRINT #1, " "
            END IF
            IF y = phrank(5) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a flush "
                PRINT #1, phrank(5)
                PRINT #1, " "
            END IF
            IF y = phrank(6) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a full house "
                PRINT #1, phrank(6)
                PRINT #1, " "
            END IF
            IF y = phrank(7) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to four of a kind "
                PRINT #1, phrank(7)
                PRINT #1, " "
            END IF
            IF y = phrank(8) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to five of a kind "
                PRINT #1, phrank(8)
                PRINT #1, " "
            END IF
            IF y = phrank(9) THEN
                PRINT #1, "input the rank (1-9) ";
                PRINT #1, "assigned to a straight flush "
                PRINT #1, phrank(9)
                PRINT #1, " "
            END IF
        NEXT y
    END IF
    PRINT #1, "a qualifying-five-card-poker hand is ";
    PRINT #1, "a five-card-poker hand of a rank that"
    PRINT #1, "is at least equal to a minimum rank ";
    PRINT #1, "specified by the user-defined set of ";
    PRINT #1, "game rules."
    PRINT #1, " "
    PRINT #1, "input the minimum rank specified by ";
    PRINT #1, "the user-defined set of game rules"
    PRINT #1, " "
    FOR y = 0 TO 9
        IF y = 0 THEN
            PRINT #1, "input "; y; "for high card."
        END IF
        IF y = phrank(1) THEN
            PRINT #1, "input "; y; "for one pair."
        END IF
        IF y = phrank(2) THEN
            PRINT #1, "input "; y; "for two pair."
        END IF
        IF y = phrank(3) THEN
            PRINT #1, "input "; y; "for three-of-a-kind."
        END IF
        IF y = phrank(4) THEN
            PRINT #1, "input "; y; "for straight."
        END IF
        IF y = phrank(5) THEN
            PRINT #1, "input "; y; "for flush."
        END IF
        IF y = phrank(6) THEN
            PRINT #1, "input "; y; "for full house."
        END IF
        IF y = phrank(7) THEN
            PRINT #1, "input "; y; "for four-of-a-kind."
        END IF
        IF y = phrank(8) THEN
            PRINT #1, "input "; y; "for five-of-a-kind."
        END IF
        IF y = phrank(9) THEN
            PRINT #1, "input "; y; "for straight-flush."
        END IF
    NEXT y
    PRINT #1, minrank%
    PRINT #1, " "
    PRINT #1, "for each category of poker hand input the bonus ";
    PRINT #1, "the dealer pays to the player"
    PRINT #1, " "
    FOR y = 0 TO 9
        IF y = 0 AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a high card hand "
            PRINT #1, phpo(0)
            PRINT #1, " "
        END IF
        IF y = phrank(1) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a pair hand "
            PRINT #1, phpo(1)
            PRINT #1, " "
        END IF
        IF y = phrank(2) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a two pair hand "
            PRINT #1, phpo(2)
            PRINT #1, " "
        END IF
        IF y = phrank(3) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a three of a kind hand "
            PRINT #1, phpo(3)
            PRINT #1, " "
        END IF
        IF y = phrank(4) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a straight hand "
            PRINT #1, phpo(4)
            PRINT #1, " "
        END IF
        IF y = phrank(5) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a flush hand "
            PRINT #1, phpo(5)
            PRINT #1, " "
        END IF
        IF y = phrank(6) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a full house hand "
            PRINT #1, phpo(6)
            PRINT #1, " "
        END IF
        IF y = phrank(7) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a four of a kind hand "
            PRINT #1, phpo(7)
            PRINT #1, " "
        END IF
        IF y = phrank(8) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a five of a kind hand "
            PRINT #1, phpo(8)
            PRINT #1, " "
        END IF
        IF y = phrank(9) AND y >= minrank% THEN
            PRINT #1, "input bonus paid for a straight flush hand "
            PRINT #1, phpo(9)
            PRINT #1, " "
        END IF
    NEXT y
    PRINT #1, "Press enter for all bonus payouts are ";
    PRINT #1, "multiples of the game wager"
    PRINT #1, "Press 1 and enter for all bonus payouts are ";
    PRINT #1, "multiples of table minimum "
    PRINT #1, "Press 2 and enter the bonus payout for ";
    PRINT #1, "at least one category of poker hand"
    PRINT #1, "is a multiple of table minimum "
    PRINT #1, ptbm%
    PRINT #1, " "
    FOR y = 0 TO 9
        IF y = 0 AND ptbm% = 2 AND phpo(0) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a high card hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(0)
            PRINT #1, " "
        END IF
        IF y = phrank(1) AND ptbm% = 2 AND phpo(1) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for one-pair hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(1)
            PRINT #1, " "
        END IF
        IF y = phrank(2) AND ptbm% = 2 AND phpo(2) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for two-pair hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(2)
            PRINT #1, " "
        END IF
        IF y = phrank(3) AND ptbm% = 2 AND phpo(3) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a three-of-a-kind hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(3)
            PRINT #1, " "
        END IF
        IF y = phrank(4) AND ptbm% = 2 AND phpo(4) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a straight hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(4)
            PRINT #1, " "
        END IF
        IF y = phrank(5) AND ptbm% = 2 AND phpo(5) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a flush hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(5)
            PRINT #1, " "
        END IF
        IF y = phrank(6) AND ptbm% = 2 AND phpo(6) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a full-house hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(6)
            PRINT #1, " "
        END IF
        IF y = phrank(7) AND ptbm% = 2 AND phpo(7) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a four-of-a-kind hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(7)
            PRINT #1, " "
        END IF
        IF y = phrank(8) AND ptbm% = 2 AND phpo(8) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a five-of-a-kind hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(8)
            PRINT #1, " "
        END IF
        IF y = phrank(9) AND ptbm% = 2 AND phpo(9) <> 0 THEN
            PRINT #1, "Press 1 and enter for bonus payout ";
            PRINT #1, "for a straight-flush hand"
            PRINT #1, "is a multiple of the table minimum, ";
            PRINT #1, "else press enter."
            PRINT #1, ptm(9)
            PRINT #1, " "
        END IF
    NEXT y
    FOR y = 1 TO 9
        phrank(y) = phrank(y) * 1000000
    NEXT y
    PRINT #1, "press 1 and enter for only a complete hand with a ";
    PRINT #1, "numerical-sum value of"
    PRINT #1, "twenty-seven points can make a ";
    PRINT #1, "qualifying-five-card-poker hand,"
    PRINT #1, "else press enter"
    PRINT #1, only27%
    PRINT #1, " "
    IF only27% <> 1 THEN
        PRINT #1, "press 1 and enter for only a complete hand with a ";
        PRINT #1, "numerical-sum value of"
        PRINT #1, "less than twenty-eight points can make a ";
        PRINT #1, "qualifying-five-card-poker hand,"
        PRINT #1, "else press enter"
        PRINT #1, onlylessthan28%
        PRINT #1, " "
    END IF
    PRINT #1, "Press 1 and enter for any player hand with ";
    PRINT #1, "a numerical sum value of less than"
    PRINT #1, "twenty-eight points that makes ";
    PRINT #1, "a qualifying-five-card-poker hand"
    PRINT #1, "is a predetermined-winning-complete hand, ";
    PRINT #1, "else press enter "
    PRINT #1, qfcphw%
    PRINT #1, " "
    PRINT #1, "Press 1 and enter for any dealer hand with ";
    PRINT #1, "a numerical sum value of less than"
    PRINT #1, "twenty-eight points that makes ";
    PRINT #1, "a qualifying-five-card-poker hand"
    PRINT #1, "is a predetermined-winning-complete hand, ";
    PRINT #1, "else press enter "
    PRINT #1, dqfcphw%
    PRINT #1, " "
    IF qfcphw% <> 1 AND only27% <> 1 THEN
        PRINT #1, "Press 1 and enter for any player hand with ";
        PRINT #1, "a numerical sum value of"
        PRINT #1, "twenty-seven points that makes ";
        PRINT #1, "a qualifying category of five-card-poker hand"
        PRINT #1, "is a predetermined-winning-complete hand, "
        PRINT #1, "else press enter "
        PRINT #1, qph27wa%
        PRINT #1, " "
    END IF
    PRINT #1, "Press 1 and enter for player's poker hand ";
    PRINT #1, "must outrank dealer's poker hand "
    PRINT #1, "else press enter "
    PRINT #1, pcomp%
    PRINT #1, " "
    PRINT #1, "Press enter to save to a text file a ";
    PRINT #1, "table displaying the number"
    PRINT #1, "of poker hands of each category made from ";
    PRINT #1, "winning player hands only."
    PRINT #1, "Press 1 and enter to also save to a ";
    PRINT #1, "text file a table displaying"
    PRINT #1, "the number of poker hands of each category ";
    PRINT #1, "made from all player hands"
    PRINT #1, "and made from all dealer hands "
    PRINT #1, track%
    PRINT #1, " "
    PRINT #1, "Press 1 and enter to enable the ";
    PRINT #1, "computer-controlled player to override"
    PRINT #1, "the set of strategy tables in cases ";
    PRINT #1, "wherein the set of strategy tables"
    PRINT #1, "calls for the player to stand, and ";
    PRINT #1, "wherein the potential benefits of"
    PRINT #1, "making a qualifying-five-card-poker ";
    PRINT #1, "hand by taking an additional card"
    PRINT #1, "to the player's hand outweigh the ";
    PRINT #1, "potential risks of busting and"
    PRINT #1, "possibly losing the game, ";
    PRINT #1, "else press enter "
    PRINT #1, override%
    PRINT #1, " "
    IF override% = 1 THEN
        PRINT #1, "enter the 'folder/filename prefix' ";
        PRINT #1, "of the set of files"
        PRINT #1, "containing data about the basic strategy ";
        PRINT #1, "for the play of the"
        PRINT #1, "player's four-card hands to be"
        PRINT #1, "loaded into program memory."
        PRINT #1, D1$
        PRINT #1, " "
        PRINT #1, "strategy loaded is described as follows: "
        PRINT #1, q1$
        PRINT #1, " "
        PRINT #1, "if this is acceptable, ";
        PRINT #1, "then type 'y' and press enter,"
        PRINT #1, "else press enter "
        PRINT #1, ans1$
        PRINT #1, " "
    END IF
END IF
CLOSE #1
FOR x = 0 TO 13
    cv(x) = 0
NEXT x
79 PRINT "press 'y' and enter to load an E-Z-count strategy, ";
PRINT "else press enter "
INPUT ans$
PRINT " "
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "press 'y' and enter to load an E-Z-count strategy, ";
PRINT #1, "else press enter "
PRINT #1, ans$
PRINT #1, " "
CLOSE #1
IF ans$ = "y" THEN
    PRINT "enter the 'folder/filename prefix' of the file"
    PRINT "containing data about the E-Z-count strategy to be loaded"
    PRINT "into program memory."
    INPUT z$
    PRINT " "
    OPEN z$ + "z.dat" FOR RANDOM AS #1 LEN = LEN(ez)
    GET #1, , ez
    dv(0) = ez.dv0
    dv(1) = ez.dv1
    dv(2) = ez.dv2
    dv(3) = ez.dv3
    dv(4) = ez.dv4
    dv(5) = ez.dv5
    dv(6) = ez.dv6
    dv(7) = ez.dv7
    dv(8) = ez.dv8
    dv(9) = ez.dv9
    dv(10) = ez.dv10
    dv(11) = ez.dv11
    dv(12) = ez.dv12
    dv(13) = ez.dv13
    fv(0) = ez.fv0
    fv(1) = ez.fv1
    fv(2) = ez.fv2
    fv(3) = ez.fv3
    fv(4) = ez.fv4
    fv(5) = ez.fv5
    fv(6) = ez.fv6
    fv(7) = ez.fv7
    fv(8) = ez.fv8
    fv(9) = ez.fv9
    fv(10) = ez.fv10
    fv(11) = ez.fv11
    fv(12) = ez.fv12
    fv(13) = ez.fv13
    k$ = ez.description
    PRINT "E-Z-count loaded is described as "
    PRINT k$
    PRINT " "
    I = 1
    CLOSE #1
END IF
OPEN files$ + "i.txt" FOR APPEND AS #1
IF ans$ = "y" THEN
    PRINT #1, "enter the 'folder/filename prefix' of the file"
    PRINT #1, "containing data about the E-Z-count strategy ";
    PRINT #1, "to be loaded"
    PRINT #1, "into program memory."
    PRINT #1, z$
    PRINT #1, "E-Z-count loaded is described as "
    PRINT #1, k$
    PRINT #1, " "
END IF
CLOSE #1
IF ans$ = "y" THEN
    PRINT "if this is acceptable, then press 'y' and enter, ";
    PRINT "else press enter "
    INPUT ans$
    PRINT " "
    IF ans$ <> "y" THEN GOTO 79
END IF
OPEN files$ + "i.txt" FOR APPEND AS #1
IF ans$ = "y" THEN
    PRINT #1, "if this is acceptable, then press 'y' and enter, ";
    PRINT #1, "else press enter "
    PRINT #1, ans$
    PRINT #1, " "
END IF
CLOSE #1
IF ans$ <> "y" AND wildcardrules% = 0 THEN
    RESTORE Database1
    FOR x = 0 TO 13
        READ a: dv(x) = a: fv(x) = 100
    NEXT x
    PRINT "press 1 and enter for default count values, ";
    PRINT "else press enter "
    INPUT I
    PRINT " "
END IF
IF ans$ <> "y" AND wildcardrules% = 1 THEN
    RESTORE Database2
    FOR x = 0 TO 13
        READ a: dv(x) = a: fv(x) = 100
    NEXT x
    PRINT "press 1 and enter for default count values, ";
    PRINT "else press enter "
    INPUT I
    PRINT " "
END IF
FOR x = 0 TO 13
    IF mc(0) = 0 AND x = 0 THEN x = 1
    IF I = 1 THEN
        a = dv(x) / fv(x) * 100
        GOTO 808
    END IF
    PRINT "what is the count value of "; x; "'s ("; dv(x); ")"
    INPUT a
    PRINT " "
    dv(x) = a
    808 cv(x) = a
    cv(14) = cv(14) - cv(x) * mc(x) * deck%
    ev(14) = ev(14) + cv(x) * mc(x) / 4
    gv(15) = gv(15) + ABS(cv(x)) * mc(x) / 4
NEXT x
OPEN files$ + "i.txt" FOR APPEND AS #1
IF ans$ <> "y" THEN
    PRINT #1, "press 1 and enter for default count values, ";
    PRINT #1, "else press enter "
    PRINT #1, I
    PRINT #1, " "
    FOR x = 0 TO 13
        IF mc(0) = 0 AND x = 0 THEN x = 1
        PRINT #1, "what is the count value of "; x; "'s ("; dv(x); ")"
        PRINT #1, " "
    NEXT x
END IF
CLOSE #1
809 PRINT "press 1 and enter for true count conversion, ";
PRINT "else press enter "
INPUT true%
PRINT " "
PRINT "input a constant added to render the bet count, ";
PRINT "else press enter "
INPUT constant
PRINT " "
PRINT "Press 1 and enter to load a file containing data about"
PRINT "matching play variation indices and thereby enable"
PRINT "the computer-controlled player to vary playing strategy"
PRINT "in response to changes in the bet count."
INPUT mpvi%
PRINT " "
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "press 1 and enter for true count conversion, ";
PRINT #1, "else press enter "
PRINT #1, true%
PRINT #1, " "
PRINT #1, "input a constant added to render the bet count, ";
PRINT #1, "else press enter "
PRINT #1, constant
PRINT #1, " "
PRINT #1, "Press 1 and enter to load a file containing data about"
PRINT #1, "matching play variation indices and thereby enable"
PRINT #1, "the computer-controlled player to vary playing strategy"
PRINT #1, "in response to changes in the bet count."
PRINT #1, mpvi%
PRINT #1, " "
CLOSE #1
IF mpvi% = 1 THEN
    70 PRINT "enter the 'folder/filename prefix' of the files "
    PRINT "containing data about the matching play variation indices ";
    PRINT "to be loaded into program memory."
    INPUT indx$
    OPEN indx$ + "n.dat" FOR RANDOM AS #1 LEN = LEN(ir(0, 0))
    FOR x = 0 TO 104
        FOR y = 0 TO 104
            GET #1, , indice
            ir(x, y) = indice
        NEXT y
    NEXT x
    FOR x = 0 TO 104
        FOR y = 0 TO 104
            GET #1, , indice
            ifar(x, y) = indice
        NEXT y
    NEXT x
    FOR x = 0 TO 104
        FOR y = 0 TO 104
            GET #1, , indice
            isar(x, y) = indice
        NEXT y
    NEXT x
    CLOSE #1
    OPEN indx$ + "d.txt" FOR RANDOM AS #1 LEN = LEN(wow)
    GET #1, , wow
    CLOSE #1: x$ = wow.description
    PRINT "matching indices are described as follows:"; x$
    PRINT "if this is acceptable, then type 'y' and press enter,";
    PRINT "else press enter ";
    INPUT ans$
    IF ans$ <> "y" THEN GOTO 70
    OPEN files$ + "i.txt" FOR APPEND AS #1
    PRINT #1, "enter the 'folder/filename prefix' of the files"
    PRINT #1, "containing data about the matching play variation ";
    PRINT #1, "indices to be loaded into program memory."
    PRINT #1, indx$
    PRINT #1, " "
    PRINT #1, "matching indices are described as follows:"
    PRINT #1, x$
    PRINT #1, " "
    PRINT #1, "if this is acceptable, then type 'y' and press enter,";
    PRINT #1, "else press enter "
    PRINT #1, ans$
    PRINT #1, " "
    CLOSE #1
END IF
PRINT "press 1 and enter to use ongoing simulation results"
PRINT "to generate an E-Z-count strategy, else press enter "
INPUT ezc%
PRINT " "
PRINT "Press 1 and enter to mathematically balance"
PRINT "the card counting strategy if unbalanced, else press enter"
INPUT bal%
PRINT " "
IF bal% = 1 THEN
    PRINT "Press 1 and enter or 2 and enter ";
    PRINT "to specify the type of balancing to be used: "
    PRINT "1 for subtractive, 2 for multiplicative"
    INPUT balance%
    PRINT " "
END IF
IF balance% = 1 THEN
    FOR x = 0 TO 13
        gv(x) = cv(x) - ev(14) * mc(x) / mc(14)
        cv(x) = gv(x)
    NEXT x
    cv(14) = 0
END IF
IF balance% = 2 THEN
    FOR x = 0 TO 13
        IF cv(x) >= 0 THEN gv(x) = cv(x) * gv(15) / (gv(15) + ev(14))
        IF cv(x) < 0 THEN gv(x) = cv(x) * gv(15) / (gv(15) - ev(14))
        cv(x) = gv(x)
    NEXT x
    cv(14) = 0
END IF
top! = 10000: bottom! = -10000
IF ezc% = 1 AND bal% = 1 THEN
    cv(14) = 0
    FOR x = 0 TO 13
        cv(14) = cv(14) - cv(x) * mc(x) * deck%
    NEXT x
    PRINT "press 1 and enter to generate the E-Z-count strategy ";
    PRINT "by only using ongoing simulation results gathered from"
    PRINT "the outcome of games started within a ";
    PRINT "user-defined range of bet counts, "
    PRINT "else press enter "
    INPUT x
    PRINT " "
    IF x = 1 THEN
        PRINT "input the upper limit of the ";
        PRINT "user-defined range of bet counts "
        INPUT top!
        PRINT " "
        PRINT "input the lower limit of the ";
        PRINT "user-defined range of bet counts "
        INPUT bottom!
        PRINT " "
    END IF
END IF
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "press 1 and enter to use ongoing simulation results"
PRINT #1, "to generate an E-Z-count strategy, else press enter"
PRINT #1, ezc%
PRINT #1, " "
PRINT #1, "Press 1 and enter to mathematically balance "
PRINT #1, "the card counting strategy if unbalanced, else press enter"
PRINT #1, bal%
PRINT #1, " "
IF bal% = 1 THEN
    PRINT #1, "Press 1 and enter, or 2 and enter ";
    PRINT #1, "to specify the type of balancing to be used: "
    PRINT #1, "1 for subtractive, 2 for multiplicative "
    PRINT #1, balance%
    PRINT #1, " "
END IF
IF ezc% = 1 AND bal% = 1 THEN
    PRINT #1, " "
    PRINT #1, "press 1 and enter to generate the E-Z-count strategy ";
    PRINT #1, "by only using ongoing simulation results gathered "
    PRINT #1, "from the outcome of games started within a ";
    PRINT #1, "user-defined range of bet counts, "
    PRINT #1, "else press enter "
    PRINT #1, x
    PRINT #1, " "
    IF x = 1 THEN
        PRINT #1, "input the upper limit of the ";
        PRINT #1, "user-defined range of bet counts "
        PRINT #1, top!
        PRINT #1, " "
        PRINT #1, "input the lower limit of the ";
        PRINT #1, "user-defined range of bet counts "
        PRINT #1, bottom!
        PRINT #1, " "
    END IF
END IF
CLOSE #1
' START OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT "press 1 and enter for the dealer uses the number of rounds dealt"
PRINT "to determine when to reshuffle the stack of playing cards, ";
PRINT "else press enter."
INPUT w
PRINT " "
IF w = 1 THEN
    PRINT "input the number of rounds dealt ";
    PRINT "from each stack of playing cards "
    INPUT rps%
    PRINT " "
END IF
IF w <> 1 THEN
    rps% = 0
    PRINT shf;: PRINT "% is the maximum percentage of ";
    PRINT "the stack of cards"
    PRINT "remaining in the shoe when the dealer reshuffles."
    PRINT "if this is acceptable, then type y and press enter, ";
    PRINT "else press enter "
    INPUT ans$
    PRINT " "
    IF ans$ <> "y" THEN
        PRINT "input the maximum percentage of the stack of cards"
        PRINT "remaining in the shoe when the dealer reshuffles (15-99)"
        INPUT shf
        PRINT " "
    END IF
END IF
' END OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT "press 1 and enter for if the bet count ";
PRINT "does fall below a user-defined threshold,"
PRINT "then the computer-controlled player quits the table, ";
PRINT "else press enter "
INPUT y
PRINT " "
IF y = 1 THEN
    PRINT "at what bet count does the player quit the table"
    INPUT quit
    PRINT " "
    IF true% <> 1 THEN
        PRINT "press 1 and enter for if the bet count ";
        PRINT "does fall below the product of"
        PRINT "the user-defined threshold multiplied ";
        PRINT "by the percentage of the stack"
        PRINT "remaining in the shoe, then the computer-";
        PRINT "controlled player quits the table,"
        PRINT "else press enter "
        INPUT truequit%
        PRINT " "
    END IF
END IF
IF y <> 1 THEN quit = -10000
PRINT "press 1 and enter for if the bet count ";
PRINT "does rise above a user-defined threshold,"
PRINT "then the dealer reshuffles, ";
PRINT "else press enter "
INPUT z
PRINT " "
IF z = 1 THEN
    PRINT "at what bet count does the dealer reshuffle"
    INPUT reshf
    PRINT " "
    IF true% <> 1 THEN
        PRINT "press 1 and enter for if the bet count ";
        PRINT "does rise above the product of"
        PRINT "the user-defined threshold multiplied ";
        PRINT "by the percentage of the stack"
        PRINT "remaining in the shoe, then the dealer ";
        PRINT "reshuffles the stack,"
        PRINT "else press enter "
        INPUT truereshf%
        PRINT " "
    END IF
END IF
IF z <> 1 THEN reshf = 10000
PRINT "press 1 and enter for the computer-controlled player uses"
PRINT "a multiplicative betting strategy, ";
PRINT "else press enter "
INPUT multi%
PRINT " "
IF multi% = 1 THEN
    PRINT "bet = multiplier * bet count, input the multiplier"
    INPUT factor
    PRINT " "
END IF
IF multi% <> 1 THEN
    PRINT "press 1 and enter for the computer-controlled player uses"
    PRINT "an exponential betting strategy, ";
    PRINT "else press enter "
    INPUT expo%
    PRINT " "
END IF
IF expo% = 1 THEN
    PRINT "bet = multiplier * base ^ bet count, input the base "
    INPUT factor
    PRINT "bet = multiplier * base ^ bet count, input the multiplier "
    INPUT multiplier
    PRINT " "
END IF
PRINT "press 1 and enter for the computer-controlled player limits"
PRINT "bet size by percentage of purse, else press enter "
INPUT limper%
PRINT " "
IF limper% <> 1 THEN hibet = 100
IF limper% = 1 THEN
    PRINT "as a % of purse input the size of the smallest bet"
    INPUT lobet
    PRINT "as a % of purse input the size of the biggest bet"
    INPUT hibet
    PRINT " "
END IF
PRINT "press 1 and enter for the computer-controlled player limits"
PRINT "bet size by number of credits, else press enter "
INPUT limpoi%
PRINT " "
IF limpoi% <> 1 THEN lrg& = 1E+09
IF limpoi% = 1 THEN
    PRINT "as a number of credits what is the smallest player bet"
    INPUT sml&
    PRINT " "
    PRINT "as a number of point what is the largest player bet"
    INPUT lrg&
    PRINT " "
END IF
PRINT "press 1 and enter for the computer-controlled player uses"
PRINT "the plateau betting strategy, else press enter "
INPUT pbs%
PRINT " "
IF pbs% = 1 THEN PRINT "bet = bet * record high purse / starting purse"
IF pbs% <> 1 THEN
    PRINT "press 1 and enter for the computer-controlled player uses"
    PRINT "the proportional betting strategy, else press enter "
    INPUT propor%
    PRINT " "
    IF propor% = 1 THEN
        PRINT "bet= bet * current purse / starting purse"
        PRINT " "
    END IF
END IF
PRINT "input as a number of credits the starting purse"
INPUT purse
PRINT " "
b(37) = purse
b(36) = purse
b(2) = purse
b(29) = purse
IF pbs% = 1 OR propor% = 1 THEN pbs = purse
PRINT "compute bets in multiples of what number of credits"
INPUT mult%
PRINT " "
' START OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT "input as a number of credits the table minimum"
INPUT mini&
PRINT " "
PRINT "input as a number of credits the table maximum"
INPUT maxi&
PRINT " "
PRINT "input as a number of credits ";
PRINT "the fee paid for every 100 credits bet"
INPUT ante%
PRINT " "
IF wager% = 0 THEN
    IF jojopo > 1 THEN
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on a predetermined-winning-complete hand ";
        PRINT "consisting of a pair of jokers,"
        PRINT "else press enter."
        INPUT ptbm%
        PRINT " "
        ptm(14) = ptbm%
    END IF
    IF bigslick > 1 THEN
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on a predetermined-winning-complete hand ";
        PRINT "consisting of an ace and a king,"
        PRINT "else press enter."
        INPUT ptbm%
        PRINT " "
        ptm(15) = ptbm%
    END IF
    IF joancapo > 1 THEN
        PRINT "Press 1 and enter for dealer makes ";
        PRINT "bonus payouts a multiple of the table minimum"
        PRINT "on a predetermined-winning-complete hand ";
        PRINT "consisting of a joker"
        PRINT "and a card of any rank other than joker, ";
        PRINT "else press enter."
        INPUT ptbm%
        PRINT " "
        ptm(16) = ptbm%
    END IF
    IF ms999 + ss999 < sp999 + jp999 THEN
        PRINT "input the minimum wager required to qualify ";
        PRINT "for the super bonus payouts on"
        PRINT "mixed suits 9-9-9 against any dealer 9-9"
        PRINT "and same suit 9-9-9 against any dealer 9-9"
        INPUT qmb&
        PRINT " "
    END IF
END IF
PRINT "press 1 and enter to add rules to specify the following."
PRINT "If, upon the dealer's turn, ";
PRINT "the dealer will draw at least one playing card to"
PRINT "the dealer's-initial hand, if rules limit ";
PRINT "the player's options to a choice of"
PRINT "hit and stand, and if the player's-hand total ";
PRINT "is less than a minimum-hand total"
PRINT "specified by the user for the type of hand ";
PRINT "that the player has, then the player"
PRINT "is required to draw additional playing cards ";
PRINT "to the player's hand, one at a"
PRINT "time, until the player's-hand total is at ";
PRINT "least equal to the minimum-hand total"
PRINT "specified by the user for the type of ";
PRINT "hand the player has, else press enter."
INPUT v
PRINT " "
IF v = 1 THEN
    PRINT "input the minimum-hand total specified ";
    PRINT "for the player's-hard hands."
    INPUT hl%
    PRINT " "
    PRINT "input the minimum-hand total specified ";
    PRINT "for the player's-soft hands."
    INPUT sl%
    PRINT " "
END IF
' END OF A SOFTWARE MEANS FOR MODIFYING THE SET OF GAME RULES
PRINT " "
PRINT "what is the number of additional players at the table (0-6) "
INPUT ap
PRINT " "
PRINT "input the number of sessions in this simulation (1 - 10000) "
INPUT hmr&&
PRINT " "
PRINT "input the number of rounds of play in each session ";
PRINT "(1 -"; FIX(2100000000 / hmr&&); ") "
INPUT scr&
PRINT " "
hmr&& = hmr&& * scr&
s$ = "open " + files$ + "i.txt to see a list of simulation parameters"
CLS
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, "press 1 and enter for the dealer uses ";
PRINT #1, "the number of rounds dealt"
PRINT #1, "to determine when to reshuffle the stack of playing cards, ";
PRINT #1, "else press enter."
PRINT #1, w
PRINT #1, " "
IF w = 1 THEN
    PRINT #1, " "
    PRINT #1, "input the number of rounds dealt ";
    PRINT #1, "from each stack of playing cards "
    PRINT #1, rps%
    PRINT #1, " "
END IF
IF w <> 1 THEN
    PRINT #1, " "
    PRINT #1, shf;: PRINT #1, "% is the maximum percentage of ";
    PRINT #1, "the stack of cards "
    PRINT #1, "remaining in the shoe when the dealer reshuffles."
    PRINT #1, " "
    PRINT #1, "if this is acceptable, then type y and press enter,"
    PRINT #1, "else press enter "
    PRINT #1, ans$
    PRINT #1, " "
    IF ans$ <> "y" THEN
        PRINT #1, " "
        PRINT #1, "input the maximum percentage of the stack of cards ";
        PRINT #1, "remaining in the shoe when ";
        PRINT #1, "the dealer reshuffles (15-99)"
        PRINT #1, shf
        PRINT #1, " "
    END IF
END IF
PRINT #1, " "
PRINT #1, "press 1 and enter for if the bet count ";
PRINT #1, "does fall below a user-defined threshold, "
PRINT #1, "then the computer-controlled player quits the table, ";
PRINT #1, "else press enter "
PRINT #1, y
PRINT #1, " "
IF y = 1 THEN
    PRINT #1, "at what bet count does the player quit the table"
    PRINT #1, quit
    PRINT #1, " "
    IF true% <> 1 THEN
        PRINT #1, "press 1 and enter for if the bet count ";
        PRINT #1, "does fall below the product of"
        PRINT #1, "the user-defined threshold multiplied ";
        PRINT #1, "by the percentage of the stack"
        PRINT #1, "remaining in the shoe, then the computer-";
        PRINT #1, "controlled player quits the table,"
        PRINT #1, "else press enter "
        PRINT #1, truequit%
        PRINT #1, " "
    END IF
END IF
IF y <> 1 THEN quit = -10000
PRINT #1, "press 1 and enter for if the bet count ";
PRINT #1, "does rise above a user-defined threshold,"
PRINT #1, "then the dealer reshuffles, ";
PRINT #1, "else press enter "
PRINT #1, z
PRINT #1, " "
IF z = 1 THEN
    PRINT #1, "at what bet count does the dealer reshuffle"
    PRINT #1, reshf
    PRINT #1, " "
    IF true% <> 1 THEN
        PRINT #1, "press 1 and enter for if the bet count ";
        PRINT #1, "does rise above the product of"
        PRINT #1, "the user-defined threshold multiplied ";
        PRINT #1, "by the percentage of the stack"
        PRINT #1, "remaining in the shoe, then the dealer ";
        PRINT #1, "reshuffles the stack,"
        PRINT #1, "else press enter "
        PRINT #1, truereshf%
        PRINT #1, " "
    END IF
END IF
IF z <> 1 THEN reshf = 10000
PRINT #1, "press 1 and enter for the computer-controlled player uses "
PRINT #1, "a multiplicative betting strategy, ";
PRINT #1, "else press enter "
PRINT #1, multi%
PRINT #1, " "
IF multi% = 1 THEN
    PRINT #1, "bet = multiplier * bet count, input the multiplier "
    PRINT #1, factor
    PRINT #1, " "
END IF
IF multi% <> 1 THEN
    PRINT #1, "press 1 and enter for ";
    PRINT #1, "the computer-controlled player uses "
    PRINT #1, "an exponential betting strategy, ";
    PRINT #1, "else press enter "
    PRINT #1, expo%
    PRINT #1, " "
END IF
IF expo% = 1 THEN
    PRINT #1, "bet = multiplier * base ^ bet count, input the base "
    PRINT #1, factor
    PRINT #1, " "
    PRINT #1, "bet = multiplier * base ^ bet count, ";
    PRINT #1, "input the multiplier "
    PRINT #1, multiplier
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for the computer-controlled player limits"
PRINT #1, "bet size by percentage of purse, else press enter "
PRINT #1, limper%
PRINT #1, " "
IF limper% <> 1 THEN hibet = 100
IF limper% = 1 THEN
    PRINT #1, "as a % of purse input the size of the smallest bet"
    PRINT #1, lobet
    PRINT #1, " "
    PRINT #1, "as a % of purse input the size of the biggest bet"
    PRINT #1, hibet
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for the computer-controlled player limits"
PRINT #1, "bet size by number of credits, else press enter "
PRINT #1, limpoi%
PRINT #1, " "
IF limpoi% <> 1 THEN lrg& = 1E+09
IF limpoi% = 1 THEN
    PRINT #1, "as a number of credits what is the smallest player bet"
    PRINT #1, sml&
    PRINT #1, " "
    PRINT #1, "as a number of point what is the largest player bet"
    PRINT #1, lrg&
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter for the computer-controlled player uses"
PRINT #1, "the plateau betting strategy, else press enter "
PRINT #1, pbs%
PRINT #1, " "
IF pbs% = 1 THEN
    PRINT #1, "bet = bet * ";
    PRINT #1, "record high purse / starting purse"

END IF
IF pbs% <> 1 THEN
    PRINT #1, "press 1 and enter for ";
    PRINT #1, "the computer-controlled player uses"
    PRINT #1, "the proportional betting strategy, else press enter "
    PRINT #1, propor%
    PRINT #1, " "
    IF propor% = 1 THEN
        PRINT #1, " "
        PRINT #1, "bet= bet * current purse / starting purse"
        PRINT #1, " "
    END IF
END IF
PRINT #1, "input as a number of credits the starting purse"
PRINT #1, purse
PRINT #1, " "
PRINT #1, "compute bets in multiples of what number of credits"
PRINT #1, mult%
PRINT #1, " "
PRINT #1, "input as a number of credits the table minimum"
PRINT #1, mini&
PRINT #1, " "
PRINT #1, "input as a number of credits the table maximum"
PRINT #1, maxi&
PRINT #1, " "
PRINT #1, "input as a number of credits ";
PRINT #1, "the fee paid for every 100 credits bet"
PRINT #1, ante%
PRINT #1, " "
IF jojopo > 1 THEN
    PRINT #1, "Press 1 and enter for dealer makes ";
    PRINT #1, "bonus payouts a multiple of the table minimum"
    PRINT #1, "on a predetermined-winning-complete hand ";
    PRINT #1, "consisting of a pair of jokers,"
    PRINT #1, "else press enter."
    PRINT #1, ptm(14)
    PRINT #1, " "
END IF
IF bigslick > 1 THEN
    PRINT #1, "Press 1 and enter for dealer makes ";
    PRINT #1, "bonus payouts a multiple of the table minimum"
    PRINT #1, "on a predetermined-winning-complete hand ";
    PRINT #1, "consisting of an ace and a king,"
    PRINT #1, "else press enter."
    PRINT #1, ptm(15)
    PRINT #1, " "
END IF
IF joancapo > 1 THEN
    PRINT #1, "Press 1 and enter for dealer makes ";
    PRINT #1, "bonus payouts a multiple of the table minimum"
    PRINT #1, "on a predetermined-winning-complete hand ";
    PRINT #1, "consisting of a joker and"
    PRINT #1, "a card of any rank other than joker, ";
    PRINT #1, "else press enter."
    PRINT #1, ptm(16)
    PRINT #1, " "
END IF
IF ms999 + ss999 < sp999 + jp999 THEN
    PRINT #1, "input the minimum wager required to qualify ";
    PRINT #1, "for the super bonus payouts on"
    PRINT #1, "mixed suits 9-9-9 against any dealer 9-9"
    PRINT #1, "and same suit 9-9-9 against any dealer 9-9"
    PRINT #1, qmb&
    PRINT #1, " "
END IF
PRINT #1, "press 1 and enter to add rules to specify the following."
PRINT #1, "If, upon the dealer's turn, ";
PRINT #1, "the dealer will draw at least one playing card to"
PRINT #1, "the dealer's-initial hand, if rules limit ";
PRINT #1, "the player's options to a choice of"
PRINT #1, "hit and stand, and if the player's-hand total ";
PRINT #1, "is less than a minimum-hand total"
PRINT #1, "specified by the user for the type of hand ";
PRINT #1, "that the player has, then the player"
PRINT #1, "is required to draw additional playing cards ";
PRINT #1, "to the player's hand, one at a"
PRINT #1, "time, until the player's-hand total is at ";
PRINT #1, "least equal to the minimum-hand total"
PRINT #1, "specified by the user for the type of ";
PRINT #1, "hand the player has, else press enter."
PRINT #1, v
PRINT #1, " "
IF v = 1 THEN
    PRINT #1, "input the minimum-hand total specified ";
    PRINT #1, "for the player's-hard hands."
    PRINT #1, hl%
    PRINT #1, " "
    PRINT #1, "input the minimum-hand total specified ";
    PRINT #1, "for the player's-soft hands."
    PRINT #1, sl%
    PRINT #1, " "
END IF
PRINT #1, "input the number of additional players at the table (0-6)"
PRINT #1, ap
PRINT #1, " "
PRINT #1, "input the number of sessions in this simulation "
PRINT #1, hmr&& / scr&
PRINT #1, " "
PRINT #1, "input the number of rounds of play in each session "
PRINT #1, scr&
PRINT #1, " "
PRINT #1, "a brief description of ";
PRINT #1, "simulation parameters reads as follows: "
PRINT #1, s$
PRINT #1, ""
PRINT #1, ""
PRINT #1, "START: "; DATE$; " "; TIME$
CLOSE #1
OPEN files$ + "o.txt" FOR OUTPUT AS #1
PRINT #1, ""
CLOSE #1
RANDOMIZE TIMER
REM initalizing stack of cards
z = 0
suitp(1) = 32
suitp(2) = 32
suitp(3) = 104
suitp(4) = 100
suitp(5) = 99
suitp(6) = 115
suito(3) = 6
suito(4) = 3
suito(5) = 5
suito(6) = 4
FOR w = 1 TO deck%
    FOR x = 0 TO 13
        FOR y = 0 TO mc(x) - 1
            denom(z) = x
            suit(z) = y MOD 4 + 3
            suit(z) = suito(suit(z))
            IF x = 0 THEN
                suit(z) = y MOD 2 + 1
            END IF
            stack(z) = z MOD mc(14)
            z = z + 1
        NEXT y
    NEXT x
NEXT w
z = 0
FOR u = 5 TO 12 STEP 1
    FOR v = 4 TO u - 1 STEP 1
        FOR w = 3 TO v - 1 STEP 1
            FOR x = 2 TO w - 1 STEP 1
                FOR y = 1 TO x - 1 STEP 1
                    z = z + 1
                    combo(z, 0) = y
                    combo(z, 1) = x
                    combo(z, 2) = w
                    combo(z, 3) = v
                    combo(z, 4) = u
                NEXT y
            NEXT x
        NEXT w
    NEXT v
NEXT u
first(5) = 1
first(6) = 6
first(7) = 21
first(8) = 56
first(9) = 126
first(10) = 252
first(11) = 462
FOR x = 12 TO 27
    first(x) = 792
NEXT x
z = 0
FOR x = 15 TO 27
    FOR y = 19 TO 27
        IF x > y THEN y = x
        z = z + 1
        g(z) = x
        h(z) = y
    NEXT y
NEXT x
GOTO 707
STOP
999 IF ezc% = 1 AND bal% = 1 THEN
    OPEN files$ + "z.dat" FOR RANDOM AS #1 LEN = LEN(ez)
    ez.dv0 = dv(0)
    ez.dv1 = dv(1)
    ez.dv2 = dv(2)
    ez.dv3 = dv(3)
    ez.dv4 = dv(4)
    ez.dv5 = dv(5)
    ez.dv6 = dv(6)
    ez.dv7 = dv(7)
    ez.dv8 = dv(8)
    ez.dv9 = dv(9)
    ez.dv10 = dv(10)
    ez.dv11 = dv(11)
    ez.dv12 = dv(12)
    ez.dv13 = dv(13)
    ez.fv0 = fv(0)
    ez.fv1 = fv(1)
    ez.fv2 = fv(2)
    ez.fv3 = fv(3)
    ez.fv4 = fv(4)
    ez.fv5 = fv(5)
    ez.fv6 = fv(6)
    ez.fv7 = fv(7)
    ez.fv8 = fv(8)
    ez.fv9 = fv(9)
    ez.fv10 = fv(10)
    ez.fv11 = fv(11)
    ez.fv12 = fv(12)
    ez.fv13 = fv(13)
    ez.description = s$
    PUT #1, , ez
    CLOSE #1
END IF
OPEN files$ + "m.dat" FOR RANDOM AS #1 LEN = LEN(mdc)
FOR x = 0 TO 600
    mdc.adc0 = adc(0, x)
    mdc.adc1 = adc(1, x)
    mdc.adc2 = adc(2, x)
    mdc.adc3 = adc(3, x)
    mdc.adc4 = adc(4, x)
    mdc.adc5 = adc(5, x)
    mdc.adc6 = adc(6, x)
    mdc.adc7 = adc(7, x)
    mdc.adc8 = adc(8, x)
    mdc.adc9 = adc(9, x)
    mdc.adc10 = adc(10, x)
    mdc.adc11 = adc(11, x)
    mdc.adc12 = adc(12, x)
    mdc.adc13 = adc(13, x)
    mdc.adc14 = adc(14, x)
    mdc.adc15 = adc(15, x)
    mdc.hmr = hmr&&
    mdc.ap = ap
    mdc.description = s$
    PUT #1, , mdc
NEXT x
CLOSE #1
IF pbonus% = 1 THEN
    v$ = files$ + "k.dat"
    w = 0
    OPEN v$ FOR RANDOM AS #1 LEN = LEN(idatabase)
    FOR x = 0 TO 104
        FOR y = 0 TO 104
            FOR r = 0 TO 11
                FOR f = 0 TO 2
                    w = w + 1
                    idatabase.idat = iphr(x, y, r, f)
                    PUT #1, w, idatabase
                NEXT f
            NEXT r
        NEXT y
    NEXT x
    CLOSE #1
END IF
OPEN files$ + "i.txt" FOR APPEND AS #1
PRINT #1, ""
PRINT #1, "END:   "; DATE$; " "; TIME$
CLOSE #1
OPEN files$ + "d.txt" FOR OUTPUT AS #1
PRINT #1, "BIGS908 PROGRAM OUTPUT"
PRINT #1, " "
PRINT #1, "number of rounds played during each session is ";
PRINT #1, "                  : ";
PRINT #1, USING "##########"; scr&
PRINT #1, "number of sessions completed during entire simulation is ";
PRINT #1, "        : ";
PRINT #1, USING "##########"; b(16)
PRINT #1, ""
PRINT #1, "average size of the initial drop is                      ";
PRINT #1, "        : ";
PRINT #1, USING "##########"; id(0) / b(16);: PRINT #1, " credits"
PRINT #1, "average duration of initial drop ";
PRINT #1, "from start to lowest point is ";
PRINT #1, "  : ";
PRINT #1, USING "##########"; idr(0) / b(16);: PRINT #1, " rounds"
PRINT #1, "average duration of initial drop from start to finish is ";
PRINT #1, "        : ";
PRINT #1, USING "##########"; idf(0) / b(16);: PRINT #1, " rounds"
PRINT #1, "average size of the largest drop from a new high is      ";
PRINT #1, "        : ";
PRINT #1, USING "##########"; ld(0) / b(16);: PRINT #1, " credits"
PRINT #1, "average bankroll change at the end of session is         ";
PRINT #1, "        : ";
PRINT #1, USING "##########"; ide(0) / b(16);: PRINT #1, " credits"
PRINT #1, ""
PRINT #1, "average number of decks remaining ";
PRINT #1, "in the stack of playing cards is";
PRINT #1, USING "##.##"; b(28) / b(38) / mc(14)
PRINT #1, "average number of playing cards ";
PRINT #1, "per each dealer's-complete hand is";
PRINT #1, USING "##.##"; nodc&& / nodh&&
PRINT #1, "average number of playing cards ";
PRINT #1, "per each player's-complete hand is";
PRINT #1, USING "##.##"; nopc&& / noph&&
PRINT #1, "average number of consultations ";
PRINT #1, "per each player's-complete hand is";
PRINT #1, USING "##.##"; cons&& / noph&&
PRINT #1, ""
PRINT #1, "total number of wagers won by house  :    ";
PRINT #1, USING "##########.#"; b(42) / 2
PRINT #1, "total number of wagers won by player :    ";
PRINT #1, USING "##########.#"; b(41) / 2
PRINT #1, "player is winning ";
PRINT #1, USING "###.##"; b(41) / (b(41) + b(42) + 1E-08) * 100;
PRINT #1, "% of all wagers won       ROUND NUMBER "; rn&&; ""
PRINT #1, "total number of credits won by house :";
PRINT #1, USING "##############.#"; b(40) / 2
PRINT #1, "total number of credits won by player:";
PRINT #1, USING "##############.#"; b(39) / 2
PRINT #1, "player is winning ";
PRINT #1, USING "###.##"; b(39) / (b(39) + b(40) + 1E-08) * 100;
PRINT #1, "% of all credits won        reshuffles "; b(14); ""
PRINT #1, "finish purse ";
PRINT #1, USING "########.#"; purse + (b(39) - b(40)) / 2;
PRINT #1, " high ";: PRINT #1, USING "########.#"; b(44);
PRINT #1, " low ";: PRINT #1, USING "########.#"; b(43);
PRINT #1, "  largest drop ";
PRINT #1, USING "########.#"; drop
PRINT #1, "change in purse is an average of ";
PRINT #1, USING "##########.##"; b(31);
PRINT #1, " credits after "; scr&; " rounds"
PRINT #1, "one standard deviation equal to  ";
PRINT #1, USING "##########.##"; SQR(b(33) / INT(rn&& / scr&));
PRINT #1, " credits"
PRINT #1, ""
IF ezc% <> 1 THEN
    PRINT #1, "values added to the running count as each ";
    PRINT #1, "card of a given denomination was played"
    PRINT #1, "and then removed from the stack during ";
    PRINT #1, "this game simulation were as follows:"
    PRINT #1, ""
    FOR x = 0 TO 13
        IF mc(0) = 0 AND x = 0 THEN x = 1
        PRINT #1, USING "##"; x;
        PRINT #1, "    = ";
        PRINT #1, USING "####.###"; cv(x);
        IF bal% = 1 THEN
            PRINT #1, "          Balanced ";
            PRINT #1, USING "##"; x;
            PRINT #1, "    = ";
            PRINT #1, USING "####.###"; gv(x)
        END IF
        IF bal% <> 1 THEN PRINT #1, ""
    NEXT x
    PRINT #1, ""
    PRINT #1, "TOTAL = ";: PRINT #1, USING "####.###"; ev(14);
    IF bal% = 1 THEN
        PRINT #1, "          Balanced TOTAL = ";
        PRINT #1, USING "####.###"; 0
    END IF
    PRINT #1, ""
END IF
IF ezc% = 1 THEN
    PRINT #1, "Change in expected value of the game wager caused"
    PRINT #1, "by the removal of one card of a given denomination "
    PRINT #1, "from the stack during this game simulation."
    PRINT #1, ""
    FOR x = 0 TO 13
        IF mc(0) = 0 AND x = 0 THEN x = 1
        PRINT #1, USING "##"; x;
        PRINT #1, "    = ";
        PRINT #1, USING "####.###"; cv(x);
        IF bal% = 1 THEN
            PRINT #1, "          Balanced ";
            PRINT #1, USING "##"; x;
            PRINT #1, "    = ";
            PRINT #1, USING "####.###"; gv(x)
        END IF
        IF bal% <> 1 THEN PRINT #1, ""
    NEXT x
    PRINT #1, ""
    PRINT #1, "TOTAL = ";
    PRINT #1, USING "####.###"; ev(14);
    IF bal% = 1 THEN
        PRINT #1, "          Balanced TOTAL = ";
        PRINT #1, USING "####.###"; 0
    END IF
    IF bal <> 1 THEN PRINT #1, ""
END IF
FOR w = 1 TO b(16)
    high# = -1000000000
    FOR x = 1 TO b(16)
        IF id(x) > high# THEN
            IF order1(x) = 0 THEN
                high# = id(x)
                rank1(w) = x
            END IF
        END IF
        IF id(x) = high# THEN
            IF order1(x) = 0 THEN
                high# = id(x)
                rank1(w) = x
            END IF
        END IF
    NEXT x
    order1(rank1(w)) = 1
NEXT w
PRINT #1, ""
PRINT #1, ""
PRINT #1, "in the following table, each of ";
PRINT #1, USING "####"; b(16);
PRINT #1, " sessions completed during the simulation is ranked "
PRINT #1, "from smallest to biggest according to ";
PRINT #1, "the size of the initial drop in the bankroll ";
PRINT #1, "measured as a number of credits"
PRINT #1,
FOR x = 1 TO b(16)
    IF x = FIX(x / 100) * 100 + 1 THEN
        PRINT #1, ""
        PRINT #1, "                ";
        PRINT #1, "initial drop        ";
        PRINT #1, "start to lowest point        ";
        PRINT #1, "start to finish             ";
        PRINT #1, "largest drop           ";
        PRINT #1, "session end"
        PRINT #1, "RANK                 ";
        PRINT #1, "SIZE                 ";
        PRINT #1, "DURATION                 ";
        PRINT #1, "DURATION                      ";
        PRINT #1, "SIZE            ";
        PRINT #1, "BANKROLL CHANGE"
        PRINT #1, ""
    END IF
    PRINT #1, USING "####"; x;: PRINT #1, "        ";
    PRINT #1, USING "###########.#"; id(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idr(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idf(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ld(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ide(rank1(x))
NEXT x
ERASE rank1: ERASE order1
FOR w = 1 TO b(16)
    idrn& = 1000000000
    FOR x = 1 TO b(16)
        IF idr(x) < idrn& THEN
            IF order1(x) = 0 THEN
                idrn& = idr(x)
                rank1(w) = x
            END IF
        END IF
        IF idr(x) = idrn& THEN
            IF order1(x) = 0 THEN
                idrn& = idr(x)
                rank1(w) = x
            END IF
        END IF
    NEXT x
    order1(rank1(w)) = 1
NEXT w
PRINT #1, ""
PRINT #1, ""
PRINT #1, "in the following table, each of ";
PRINT #1, USING "####"; b(16);
PRINT #1, " sessions completed during the entire simulation are ranked"
PRINT #1, "from shortest to longest according to ";
PRINT #1, "the duration of the initial drop ";
PRINT #1, "from start to the lowest point ";
PRINT #1, "measured as a number of rounds."
PRINT #1,
FOR x = 1 TO b(16)
    IF x = FIX(x / 100) * 100 + 1 THEN
        PRINT #1, ""
        PRINT #1, "                ";
        PRINT #1, "initial drop        ";
        PRINT #1, "start to lowest point        ";
        PRINT #1, "start to finish             ";
        PRINT #1, "largest drop           ";
        PRINT #1, "session end"
        PRINT #1, "RANK                 ";
        PRINT #1, "SIZE                 ";
        PRINT #1, "DURATION                 ";
        PRINT #1, "DURATION                      ";
        PRINT #1, "SIZE            ";
        PRINT #1, "BANKROLL CHANGE"
        PRINT #1, ""
    END IF
    PRINT #1, USING "####"; x;: PRINT #1, "        ";
    PRINT #1, USING "###########.#"; id(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idr(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idf(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ld(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ide(rank1(x))
NEXT x
ERASE rank1: ERASE order1
FOR w = 1 TO b(16)
    idrn& = 1000000000
    FOR x = 1 TO b(16)
        IF idf(x) < idrn& THEN
            IF order1(x) = 0 THEN
                idrn& = idf(x)
                rank1(w) = x
            END IF
        END IF
        IF idf(x) = idrn& THEN
            IF order1(x) = 0 THEN
                idrn& = idf(x)
                rank1(w) = x
            END IF
        END IF
    NEXT x
    order1(rank1(w)) = 1
NEXT w
PRINT #1, ""
PRINT #1, ""
PRINT #1, "in the following table, each of ";
PRINT #1, USING "####"; b(16);
PRINT #1, " sessions completed during the entire simulation are ranked"
PRINT #1, "from shortest to longest according to ";
PRINT #1, "the duration of the initial drop from start to finish ";
PRINT #1, "measured as a number of rounds."
PRINT #1,
FOR x = 1 TO b(16)
    IF x = FIX(x / 100) * 100 + 1 THEN
        PRINT #1, ""
        PRINT #1, "                ";
        PRINT #1, "initial drop        ";
        PRINT #1, "start to lowest point        ";
        PRINT #1, "start to finish             ";
        PRINT #1, "largest drop           ";
        PRINT #1, "session end"
        PRINT #1, "RANK                 ";
        PRINT #1, "SIZE                 ";
        PRINT #1, "DURATION                 ";
        PRINT #1, "DURATION                      ";
        PRINT #1, "SIZE            ";
        PRINT #1, "BANKROLL CHANGE"
        PRINT #1, ""
    END IF
    PRINT #1, USING "####"; x;: PRINT #1, "        ";
    PRINT #1, USING "###########.#"; id(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idr(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idf(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ld(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ide(rank1(x))
NEXT x
ERASE rank1: ERASE order1
FOR w = 1 TO b(16)
    high# = -1000000000
    FOR x = 1 TO b(16)
        IF ld(x) > high# THEN
            IF order1(x) = 0 THEN
                high# = ld(x)
                rank1(w) = x
            END IF
        END IF
        IF ld(x) = high# THEN
            IF order1(x) = 0 THEN
                high# = ld(x)
                rank1(w) = x
            END IF
        END IF
    NEXT x
    order1(rank1(w)) = 1
NEXT w
PRINT #1, ""
PRINT #1, ""
PRINT #1, "in the following table, each of ";
PRINT #1, USING "####"; b(16);
PRINT #1, " sessions completed during the entire simulation are ranked"
PRINT #1, "from smallest to biggest according to ";
PRINT #1, "the size of the largest drop from a new high ";
PRINT #1, "measured as a number of credits"
PRINT #1,
FOR x = 1 TO b(16)
    IF x = FIX(x / 100) * 100 + 1 THEN
        PRINT #1, ""
        PRINT #1, "                ";
        PRINT #1, "initial drop        ";
        PRINT #1, "start to lowest point        ";
        PRINT #1, "start to finish             ";
        PRINT #1, "largest drop           ";
        PRINT #1, "session end"
        PRINT #1, "RANK                 ";
        PRINT #1, "SIZE                 ";
        PRINT #1, "DURATION                 ";
        PRINT #1, "DURATION                      ";
        PRINT #1, "SIZE            ";
        PRINT #1, "BANKROLL CHANGE"
        PRINT #1, ""
    END IF
    PRINT #1, USING "####"; x;: PRINT #1, "        ";
    PRINT #1, USING "###########.#"; id(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idr(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idf(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ld(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ide(rank1(x))
NEXT x
ERASE rank1: ERASE order1
FOR w = 1 TO b(16)
    high# = -1000000000
    FOR x = 1 TO b(16)
        IF ide(x) > high# THEN
            IF order1(x) = 0 THEN
                high# = ide(x)
                rank1(w) = x
            END IF
        END IF
        IF ide(x) = high# THEN
            IF order1(x) = 0 THEN
                high# = ide(x)
                rank1(w) = x
            END IF
        END IF
    NEXT x
    order1(rank1(w)) = 1
NEXT w
PRINT #1, ""
PRINT #1, ""
PRINT #1, "in the following table, each of ";
PRINT #1, USING "####"; b(16);
PRINT #1, " sessions completed during the entire simulation are ranked"
PRINT #1, "from greatest gain to greatest loss according to ";
PRINT #1, "the end of session net change in bankroll ";
PRINT #1, "measured as a number of credits."
PRINT #1,
FOR x = 1 TO b(16)
    IF x = FIX(x / 100) * 100 + 1 THEN
        PRINT #1, ""
        PRINT #1, "                ";
        PRINT #1, "initial drop        ";
        PRINT #1, "start to lowest point        ";
        PRINT #1, "start to finish             ";
        PRINT #1, "largest drop           ";
        PRINT #1, "session end"
        PRINT #1, "RANK                 ";
        PRINT #1, "SIZE                 ";
        PRINT #1, "DURATION                 ";
        PRINT #1, "DURATION                      ";
        PRINT #1, "SIZE            ";
        PRINT #1, "BANKROLL CHANGE"
        PRINT #1, ""
    END IF
    PRINT #1, USING "####"; x;: PRINT #1, "        ";
    PRINT #1, USING "###########.#"; id(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idr(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "############"; idf(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ld(rank1(x));
    PRINT #1, "             ";
    PRINT #1, USING "###########.#"; ide(rank1(x))
NEXT x
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying the number of hands"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each hand has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(61) - b(63) - b(65) - b(101)
b(55) = b(67) - b(69) - b(71) - b(73)
b(56) = b(75) - b(77) - b(79) - b(103)
b(57) = b(54) + b(55) + b(56)
b(136) = b(113)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(101)
b(55) = b(71)
b(56) = b(103)
b(57) = b(54) + b(55) + b(56)
b(136) = b(119)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(65)
b(55) = b(73)
b(56) = b(79)
b(57) = b(54) + b(55) + b(56)
b(136) = b(125)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(63)
b(55) = b(69)
b(56) = b(77)
b(57) = b(54) + b(55) + b(56)
b(136) = b(131)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(61)
b(55) = b(67)
b(56) = b(75)
b(57) = b(54) + b(55) + b(56)
b(136) = b(81)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57);: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136);: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying the percentage of hands"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each hand has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(61) - b(63) - b(65) - b(101)
b(55) = b(67) - b(69) - b(71) - b(73)
b(56) = b(75) - b(77) - b(79) - b(103)
b(57) = b(54) + b(55) + b(56)
b(136) = b(113)
b(54) = b(54) / (b(61) + b(67) + b(75)) * 100
b(55) = b(55) / (b(61) + b(67) + b(75)) * 100
b(56) = b(56) / (b(61) + b(67) + b(75)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(61) + b(67) + b(75)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(101)
b(55) = b(71)
b(56) = b(103)
b(57) = b(54) + b(55) + b(56)
b(136) = b(119)
b(54) = b(54) / (b(61) + b(67) + b(75)) * 100
b(55) = b(55) / (b(61) + b(67) + b(75)) * 100
b(56) = b(56) / (b(61) + b(67) + b(75)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(61) + b(67) + b(75)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(65)
b(55) = b(73)
b(56) = b(79)
b(57) = b(54) + b(55) + b(56)
b(136) = b(125)
b(54) = b(54) / (b(61) + b(67) + b(75)) * 100
b(55) = b(55) / (b(61) + b(67) + b(75)) * 100
b(56) = b(56) / (b(61) + b(67) + b(75)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(61) + b(67) + b(75)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(63)
b(55) = b(69)
b(56) = b(77)
b(57) = b(54) + b(55) + b(56)
b(136) = b(131)
b(54) = b(54) / (b(61) + b(67) + b(75)) * 100
b(55) = b(55) / (b(61) + b(67) + b(75)) * 100
b(56) = b(56) / (b(61) + b(67) + b(75)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(61) + b(67) + b(75)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(61)
b(55) = b(67)
b(56) = b(75)
b(57) = b(54) + b(55) + b(56)
b(136) = b(81)
b(54) = b(54) / (b(61) + b(67) + b(75)) * 100
b(55) = b(55) / (b(61) + b(67) + b(75)) * 100
b(56) = b(56) / (b(61) + b(67) + b(75)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(61) + b(67) + b(75)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
REM (results of flat betting)
PRINT #1, "The following is a table displaying ";
PRINT #1, "the number of game wagers"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each game wager has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(41) - b(45) - b(20) - b(105)
b(55) = b(42) - b(46) - b(19) - b(34)
b(56) = b(0) - b(1) - b(58) - b(107)
b(57) = b(54) + b(55) + b(56)
b(136) = b(115)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(105)
b(55) = b(19)
b(56) = b(107)
b(57) = b(54) + b(55) + b(56)
b(136) = b(121)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(20)
b(55) = b(34)
b(56) = b(58)
b(57) = b(54) + b(55) + b(56)
b(136) = b(127)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(45)
b(55) = b(46)
b(56) = b(1)
b(57) = b(54) + b(55) + b(56)
b(136) = b(133)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(41)
b(55) = b(42)
b(56) = b(0)
b(57) = b(54) + b(55) + b(56)
b(136) = b(3)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying ";
PRINT #1, "the percentage of game wagers"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each game wager has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(41) - b(45) - b(20) - b(105)
b(55) = b(42) - b(46) - b(19) - b(34)
b(56) = b(0) - b(1) - b(58) - b(107)
b(57) = b(54) + b(55) + b(56)
b(136) = b(115)
b(54) = b(54) / (b(41) + b(42) + b(0)) * 100
b(55) = b(55) / (b(41) + b(42) + b(0)) * 100
b(56) = b(56) / (b(41) + b(42) + b(0)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(41) + b(42) + b(0)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(105)
b(55) = b(19)
b(56) = b(107)
b(57) = b(54) + b(55) + b(56)
b(136) = b(121)
b(54) = b(54) / (b(41) + b(42) + b(0)) * 100
b(55) = b(55) / (b(41) + b(42) + b(0)) * 100
b(56) = b(56) / (b(41) + b(42) + b(0)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(41) + b(42) + b(0)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(20)
b(55) = b(34)
b(56) = b(58)
b(57) = b(54) + b(55) + b(56)
b(136) = b(127)
b(54) = b(54) / (b(41) + b(42) + b(0)) * 100
b(55) = b(55) / (b(41) + b(42) + b(0)) * 100
b(56) = b(56) / (b(41) + b(42) + b(0)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(41) + b(42) + b(0)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(45)
b(55) = b(46)
b(56) = b(1)
b(57) = b(54) + b(55) + b(56)
b(136) = b(133)
b(54) = b(54) / (b(41) + b(42) + b(0)) * 100
b(55) = b(55) / (b(41) + b(42) + b(0)) * 100
b(56) = b(56) / (b(41) + b(42) + b(0)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(41) + b(42) + b(0)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(41)
b(55) = b(42)
b(56) = b(0)
b(57) = b(54) + b(55) + b(56)
b(136) = b(3)
b(54) = b(54) / (b(41) + b(42) + b(0)) * 100
b(55) = b(55) / (b(41) + b(42) + b(0)) * 100
b(56) = b(56) / (b(41) + b(42) + b(0)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(41) + b(42) + b(0)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
REM (results of the user-defined betting strategy)
PRINT #1, "The following is a table displaying the number of credits"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each credit has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(39) - b(83) - b(85) - b(109)
b(55) = b(40) - b(87) - b(89) - b(91)
b(56) = b(93) - b(95) - b(97) - b(111)
b(57) = b(54) + b(55) + b(56)
b(136) = b(117)
PRINT #1, "NO BUST     ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(109)
b(55) = b(89)
b(56) = b(111)
b(57) = b(54) + b(55) + b(56)
b(136) = b(123)
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(85)
b(55) = b(91)
b(56) = b(97)
b(57) = b(54) + b(55) + b(56)
b(136) = b(129)
PRINT #1, "DEALER BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(83)
b(55) = b(87)
b(56) = b(95)
b(57) = b(54) + b(55) + b(56)
b(136) = b(135)
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
b(54) = b(39)
b(55) = b(40)
b(56) = b(93)
b(57) = b(54) + b(55) + b(56)
b(136) = b(99)
PRINT #1, "TOTAL       ";
PRINT #1, USING "###########.#"; b(54) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(55) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(56) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(57) / 2;: PRINT #1, "   ";
PRINT #1, USING "###########.#"; b(136) / 2;: PRINT #1, "   ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, "The following is a table displaying ";
PRINT #1, "the percentage of credits"
PRINT #1, "resolved in each possible way given each possible outcome"
PRINT #1, "wherein each credit has the same value."
PRINT #1, ""
PRINT #1, ""
PRINT #1, "                      WIN            LOSS            PUSH ";
PRINT #1, "          TOTAL             TIE"
PRINT #1, ""
b(54) = b(39) - b(83) - b(85) - b(109)
b(55) = b(40) - b(87) - b(89) - b(91)
b(56) = b(93) - b(95) - b(97) - b(111)
b(57) = b(54) + b(55) + b(56)
b(136) = b(117)
b(54) = b(54) / (b(39) + b(40) + b(93)) * 100
b(55) = b(55) / (b(39) + b(40) + b(93)) * 100
b(56) = b(56) / (b(39) + b(40) + b(93)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(39) + b(40) + b(93)) * 100
PRINT #1, "NO BUST     ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(109)
b(55) = b(89)
b(56) = b(111)
b(57) = b(54) + b(55) + b(56)
b(136) = b(123)
b(54) = b(54) / (b(39) + b(40) + b(93)) * 100
b(55) = b(55) / (b(39) + b(40) + b(93)) * 100
b(56) = b(56) / (b(39) + b(40) + b(93)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(39) + b(40) + b(93)) * 100
PRINT #1, "PLAYER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(85)
b(55) = b(91)
b(56) = b(97)
b(57) = b(54) + b(55) + b(56)
b(136) = b(129)
b(54) = b(54) / (b(39) + b(40) + b(93)) * 100
b(55) = b(55) / (b(39) + b(40) + b(93)) * 100
b(56) = b(56) / (b(39) + b(40) + b(93)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(39) + b(40) + b(93)) * 100
PRINT #1, "DEALER BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(83)
b(55) = b(87)
b(56) = b(95)
b(57) = b(54) + b(55) + b(56)
b(136) = b(135)
b(54) = b(54) / (b(39) + b(40) + b(93)) * 100
b(55) = b(55) / (b(39) + b(40) + b(93)) * 100
b(56) = b(56) / (b(39) + b(40) + b(93)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(39) + b(40) + b(93)) * 100
PRINT #1, "DOUBLE BUST ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
b(54) = b(39)
b(55) = b(40)
b(56) = b(93)
b(57) = b(54) + b(55) + b(56)
b(136) = b(99)
b(54) = b(54) / (b(39) + b(40) + b(93)) * 100
b(55) = b(55) / (b(39) + b(40) + b(93)) * 100
b(56) = b(56) / (b(39) + b(40) + b(93)) * 100
b(57) = b(54) + b(55) + b(56)
b(136) = b(136) / (b(39) + b(40) + b(93)) * 100
PRINT #1, "TOTAL       ";
PRINT #1, USING "##########.##"; b(54);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(55);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(56);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(57);: PRINT #1, "%  ";
PRINT #1, USING "##########.##"; b(136);: PRINT #1, "%  ";
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
PRINT #1, ""
IF b27po% = 1 OR jojo% = 1 OR bshw% = 1 OR joanca% = 1 THEN
    PRINT #1, ""
    PRINT #1, "The following table displays ";
    PRINT #1, "information gathered during";
    PRINT #1, " the simulation about"
    PRINT #1, "the number of times the dealer paid the player for ";
    PRINT #1, "obtaining each of a set of"
    PRINT #1, "user-defined predetermined winning ";
    PRINT #1, "card combinations and ";
    PRINT #1, "the bonus payoff if any."
    PRINT #1, ""
    PRINT #1, "Card Combination      Number             Bonus Payoff"
END IF
IF jojo% = 1 THEN
    PRINT #1, ""
    PRINT #1, "joker joker    ";
    PRINT #1, USING "#############"; mc27po(15, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; jojopo - 1;
    IF ptm(14) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(14) = 1 THEN PRINT #1, " times table minimum"
END IF
IF bshw% = 1 THEN
    PRINT #1, ""
    PRINT #1, "ace and king   ";
    PRINT #1, USING "#############"; mc27po(13, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; bigslick - 1;
    IF ptm(15) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(15) = 1 THEN PRINT #1, " times table minimum"
END IF
IF bssh% = 1 THEN
    PRINT #1, "after a split  ";
    PRINT #1, USING "#############"; mc27po(14, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; bigslick - 1;
    IF ptm(15) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(15) = 1 THEN PRINT #1, " times table minimum"
END IF
IF joanca% = 1 THEN
    PRINT #1, ""
    PRINT #1, "joker any card ";
    PRINT #1, USING "#############"; mc27po(16, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; joancapo - 1;
    IF ptm(16) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(16) = 1 THEN PRINT #1, " times table minimum"
END IF
IF joancash% = 1 THEN
    PRINT #1, "after a split  ";
    PRINT #1, USING "#############"; mc27po(17, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; joancapo - 1;
    IF ptm(16) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(16) = 1 THEN PRINT #1, " times table minimum"
END IF
PRINT #1, ""
IF mc27po(4, 0) <> 0 THEN
    PRINT #1, "6 Card 27      ";
    PRINT #1, USING "#############"; mc27po(4, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(4, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(5, 0) <> 0 THEN
    PRINT #1, "7 Card 27      ";
    PRINT #1, USING "#############"; mc27po(5, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(5, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(6, 0) <> 0 THEN
    PRINT #1, "8 Card 27      ";
    PRINT #1, USING "#############"; mc27po(6, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(6, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
END IF
IF mc27po(7, 0) <> 0 THEN
    PRINT #1, "9 Card 27      ";
    PRINT #1, USING "#############"; mc27po(7, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; mc27po(7, 0);
    IF ptm(11) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(11) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF ms89T <> 0 THEN
    PRINT #1, "89T mixed suits";
    PRINT #1, USING "#############"; mc27po(8, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ms89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
END IF
IF ss89T <> 0 THEN
    PRINT #1, "89T same suit  ";
    PRINT #1, USING "#############"; mc27po(9, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ss89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
END IF
IF sp89T <> 0 THEN
    PRINT #1, "89T spades suit";
    PRINT #1, USING "#############"; mc27po(10, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; sp89T;
    IF ptm(12) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(12) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF ms999 <> 0 THEN
    PRINT #1, "999 mixed suits";
    PRINT #1, USING "#############"; mc27po(1, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ms999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF ss999 <> 0 THEN
    PRINT #1, "999 same suit  ";
    PRINT #1, USING "#############"; mc27po(2, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; ss999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF sp999 <> 0 THEN
    PRINT #1, "ms999+dealer 99";
    PRINT #1, USING "#############"; mc27po(3, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; sp999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
END IF
IF jp999 <> 0 THEN
    PRINT #1, "ss999+dealer 99";
    PRINT #1, USING "#############"; mc27po(11, 1);
    PRINT #1, "             ";
    PRINT #1, USING "##########.#"; jp999;
    IF ptm(13) <> 1 THEN PRINT #1, " : 1 Odds "
    IF ptm(13) = 1 THEN PRINT #1, " times table minimum"
    PRINT #1, ""
END IF
IF nchw% = 1 THEN
    PRINT #1, "9 card hand win";
    PRINT #1, USING "#############"; mc27po(12, 1);
    PRINT #1, "             ";
    q4# = mc27po(12, 0) / (mc27po(12, 1) + 1E-08)
    PRINT #1, USING "##########.#"; q4#;
    PRINT #1, " : 1 Odds "
END IF
CLOSE #1
END
Database1:
DATA -2,-2,-1,-1,-1,0,0,0,1,1,1,1,1,1: wildcardsrule% = 0
Database2:
DATA -2,-1,-1,-1,-1,-1,0,0,1,1,1,1,1,1: wildcardsrule% = 1
